"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CPU –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""
import psutil
import os
from typing import Tuple


def get_cpu_info() -> Tuple[int, int, int]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ CPU:
    - physical_cores: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —è–¥–µ—Ä
    - logical_cores: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —è–¥–µ—Ä (—Å –≥–∏–ø–µ—Ä—Ç—Ä–µ–¥–∏–Ω–≥–æ–º)
    - optimal_threads: –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è llama-cpp
    
    Returns:
        Tuple[int, int, int]: (physical_cores, logical_cores, optimal_threads)
    """
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —è–¥–µ—Ä
    physical_cores = psutil.cpu_count(logical=False)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —è–¥–µ—Ä
    logical_cores = psutil.cpu_count(logical=True)
    
    # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —è–¥–µ—Ä
    # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É GPU —á–∞—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã
    optimal_threads = physical_cores
    
    return physical_cores, logical_cores, optimal_threads


def get_optimal_batch_size() -> int:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏.
    
    Returns:
        int: –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å –≤ –ì–ë
    memory_gb = psutil.virtual_memory().total / (1024**3)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞–º—è—Ç–∏
    if memory_gb >= 32:
        return 512  # –ë–æ–ª—å—à–∞—è –ø–∞–º—è—Ç—å - –±–æ–ª—å—à–æ–π –±–∞—Ç—á
    elif memory_gb >= 16:
        return 256  # –°—Ä–µ–¥–Ω—è—è –ø–∞–º—è—Ç—å - —Å—Ä–µ–¥–Ω–∏–π –±–∞—Ç—á
    elif memory_gb >= 8:
        return 128  # –ú–∞–ª–∞—è –ø–∞–º—è—Ç—å - –º–∞–ª—ã–π –±–∞—Ç—á
    else:
        return 64   # –û—á–µ–Ω—å –º–∞–ª–∞—è –ø–∞–º—è—Ç—å - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞—Ç—á


def print_cpu_optimization_info():
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ CPU –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
    physical_cores, logical_cores, optimal_threads = get_cpu_info()
    optimal_batch = get_optimal_batch_size()
    
    print("üîß CPU –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø:")
    print(f"  –§–∏–∑–∏—á–µ—Å–∫–∏–µ —è–¥—Ä–∞: {physical_cores}")
    print(f"  –õ–æ–≥–∏—á–µ—Å–∫–∏–µ —è–¥—Ä–∞: {logical_cores}")
    print(f"  –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏: {optimal_threads}")
    print(f"  –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞—Ç—á: {optimal_batch}")
    print(f"  –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —è–¥–µ—Ä: {logical_cores/physical_cores:.1f}:1")
    
    if logical_cores > physical_cores:
        print("  ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω –≥–∏–ø–µ—Ä—Ç—Ä–µ–¥–∏–Ω–≥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —è–¥—Ä–∞!")
    
    return optimal_threads, optimal_batch 