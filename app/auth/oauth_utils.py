"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è OAuth –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
"""

import httpx
import secrets
import hashlib
from urllib.parse import urlencode, parse_qs
from typing import Dict, Optional
from app.auth.oauth_config import OAUTH_PROVIDERS
from app.auth.utils import hash_password, create_refresh_token, get_token_expiry
from app.models.user import Users
from app.services.subscription_service import SubscriptionService
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from datetime import datetime, timezone


def generate_state() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è OAuth."""
    return secrets.token_urlsafe(32)


def generate_oauth_url(provider: str, state: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –¥–ª—è OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    if provider not in OAUTH_PROVIDERS:
        raise ValueError(f"Unsupported OAuth provider: {provider}")
    
    config = OAUTH_PROVIDERS[provider]
    params = {
        "client_id": config["client_id"],
        "redirect_uri": config["redirect_uri"],
        "scope": config["scope"],
        "response_type": "code",
        "state": state,
        "access_type": "offline",
        "prompt": "consent"
    }
    
    return f"{config['authorize_url']}?{urlencode(params)}"


async def exchange_code_for_token(provider: str, code: str) -> Dict:
    """–û–±–º–µ–Ω–∏–≤–∞–µ—Ç –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞."""
    if provider not in OAUTH_PROVIDERS:
        raise ValueError(f"Unsupported OAuth provider: {provider}")
    
    config = OAUTH_PROVIDERS[provider]
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(
                config["token_url"],
                data={
                    "client_id": config["client_id"],
                    "client_secret": config["client_secret"],
                    "code": code,
                    "grant_type": "authorization_code",
                    "redirect_uri": config["redirect_uri"]
                },
                headers={"Accept": "application/json"}
            )
            response.raise_for_status()
            return response.json()
        except httpx.HTTPStatusError as e:
            error_detail = e.response.text
            print(f"OAuth token exchange error: {e.response.status_code}")
            print(f"Error response: {error_detail}")
            raise


async def get_user_info(provider: str, access_token: str) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç OAuth –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞."""
    if provider not in OAUTH_PROVIDERS:
        raise ValueError(f"Unsupported OAuth provider: {provider}")
    
    config = OAUTH_PROVIDERS[provider]
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(
                config["user_info_url"],
                headers={"Authorization": f"Bearer {access_token}"}
            )
            response.raise_for_status()
            return response.json()
        except httpx.HTTPStatusError as e:
            error_detail = e.response.text
            print(f"OAuth user info error: {e.response.status_code}")
            print(f"Error response: {error_detail}")
            raise


async def get_or_create_oauth_user(
    provider: str, 
    user_info: Dict, 
    db: AsyncSession
) -> Users:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ OAuth –¥–∞–Ω–Ω—ã—Ö."""
    email = user_info.get("email")
    if not email:
        raise ValueError("Email not provided by OAuth provider")
    
    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await db.execute(select(Users).filter(Users.email == email))
    user = result.scalar_one_or_none()
    
    if user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if not user.is_verified:
            user.is_verified = True
            await db.commit()
        return user
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –î–ª—è OAuth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å
    random_password = secrets.token_urlsafe(32)
    password_hash = hash_password(random_password)
    
    user = Users(
        email=email,
        password_hash=password_hash,
        is_active=True,
        is_verified=True  # OAuth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã
    )
    
    db.add(user)
    await db.commit()
    await db.refresh(user)
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É Base –¥–ª—è –Ω–æ–≤–æ–≥–æ OAuth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        print(f"üîç DEBUG: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ Base –¥–ª—è OAuth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        subscription_service = SubscriptionService(db)
        await subscription_service.create_subscription(user.id, "base")
        print(f"[OK] DEBUG: –ü–æ–¥–ø–∏—Å–∫–∞ Base —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è OAuth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    except Exception as e:
        print(f"[ERROR] DEBUG: –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ Base –¥–ª—è OAuth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    
    return user


def create_oauth_tokens(user: Users) -> Dict:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –¥–ª—è OAuth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    from app.auth.dependencies import create_jwt_token
    from datetime import timedelta
    
    # –°–æ–∑–¥–∞–µ–º access token
    access_token_expires = timedelta(minutes=30)
    access_token = create_jwt_token(
        data={"sub": user.email},
        expires_delta=access_token_expires
    )
    
    # –°–æ–∑–¥–∞–µ–º refresh token
    refresh_token = create_refresh_token()
    
    return {
        "access_token": access_token,
        "refresh_token": refresh_token,
        "token_type": "bearer"
    }
