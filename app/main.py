#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —á–∞—Ç-–±–æ—Ç–∞.
"""

import sys
from pathlib import Path
from datetime import datetime
import logging
import traceback
import asyncio
from contextlib import asynccontextmanager

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Unicode
import locale
import os
os.environ['PYTHONIOENCODING'] = 'utf-8'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == "win32":
    import codecs
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –∫–∞–∫ –∫–æ–¥–∏—Ä–æ–≤–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    try:
        locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')
    except:
        try:
            locale.setlocale(locale.LC_ALL, 'C.UTF-8')
        except:
            pass
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    os.environ['LC_ALL'] = 'en_US.UTF-8'
    os.environ['LANG'] = 'en_US.UTF-8'
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    import locale
    locale.getpreferredencoding = lambda: 'utf-8'
    
    # –ù–ï –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º stdout –∏ stderr, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    # sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
    # sys.stderr = codecs.getwriter("utf-8")(sys.stderr.detach())

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ü–ï–†–ï–î –∏–º–ø–æ—Ä—Ç–∞–º–∏
import os
project_root = Path(__file__).parent.parent
os.chdir(str(project_root))

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
app_root = Path(__file__).parent

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±–∞ –ø—É—Ç–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(app_root))

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
try:
    import pydantic
    print(f"[OK] Pydantic version: {pydantic.__version__}")
except ImportError as e:
    print(f"[ERROR] Pydantic import error: {e}")
    sys.exit(1)

from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from starlette.middleware.sessions import SessionMiddleware
from fastapi.responses import JSONResponse, FileResponse, RedirectResponse, StreamingResponse
from fastapi.exceptions import RequestValidationError
from fastapi.staticfiles import StaticFiles
import uvicorn
from pydantic import BaseModel
from typing import Optional

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
from app.chat_bot.add_character import get_character_data
from app.services.face_refinement import FaceRefinementService
from app.schemas.generation import GenerationSettings
from app.config.settings import settings

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥–µ–ª–µ–π –¥–ª—è Alembic
from app.models.chat_history import ChatHistory

# –°—Ö–µ–º–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
class ImageGenerationRequest(BaseModel):
    prompt: str
    negative_prompt: Optional[str] = None
    use_default_prompts: bool = True
    seed: Optional[int] = None
    steps: Optional[int] = None
    width: Optional[int] = None
    height: Optional[int] = None
    cfg_scale: Optional[float] = None
    sampler_name: Optional[str] = None
    character: Optional[str] = None
    user_id: Optional[int] = None  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs('logs', exist_ok=True)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('logs/app.log', encoding='utf-8')
    ],
    force=True  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
)
logger = logging.getLogger(__name__)



async def sync_characters_to_db():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Ç–µ–ø–µ—Ä—å –Ω–µ –Ω—É–∂–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º character_importer."""
    logger.info("[INFO] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ character_importer")
    logger.info("[NOTE] –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python update_character.py")

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("[START] –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    try:
        import sys
        from pathlib import Path
        webui_path = Path(__file__).parent.parent / "stable-diffusion-webui"
        sys.path.insert(0, str(webui_path))
        from model_config import get_model_info, check_model_files
        model_info = get_model_info()
        model_available = check_model_files()
        
        if model_info and model_available:
            logger.info(f"[TARGET] –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –º–æ–¥–µ–ª—å: {model_info['name']} ({model_info['size_mb']} MB)")
            if model_info["vae_name"]:
                logger.info(f"[ART] VAE: {model_info['vae_name']}")
            else:
                logger.info("[ART] VAE: –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π")
        else:
            logger.warning("[WARNING] –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    except Exception as e:
        logger.warning(f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏: {e}")
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º character_importer
    logger.info("[INFO] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ character_importer")
    
    logger.info("üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")
    yield
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    logger.info("[OK] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å lifespan
app = FastAPI(
    title="Stable Diffusion API",
    description="API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é Stable Diffusion",
    version="1.0.0",
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json"
)

# –°–æ–±—ã—Ç–∏–µ startup —É–¥–∞–ª–µ–Ω–æ - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ Unicode
@app.middleware("http")
async def unicode_middleware(request: Request, call_next):
    """Middleware –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ Unicode –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö."""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"Request: {request.method} {request.url}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        if hasattr(request, '_body'):
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞, —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –æ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ
            pass
        
        response = await call_next(request)
        logger.info(f"Response: {response.status_code}")
        return response
    except UnicodeError as e:
        logger.error(f"Unicode error in middleware: {e}")
        return JSONResponse(
            status_code=400,
            content={"detail": f"Unicode processing error: {str(e)}"}
        )
    except Exception as e:
        logger.error(f"Error in middleware: {e}")
        return JSONResponse(
            status_code=500,
            content={"detail": f"Internal server error: {str(e)}"}
        )

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π –¥–ª—è OAuth
app.add_middleware(SessionMiddleware, secret_key="your-secret-key-change-in-production")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è Unicode
@app.exception_handler(UnicodeEncodeError)
async def unicode_encode_handler(request: Request, exc: UnicodeEncodeError):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ Unicode."""
    logger.error(f"Unicode encoding error: {exc}")
    return JSONResponse(
        status_code=400,
        content={"detail": f"Unicode encoding error: {str(exc)}"}
    )

@app.exception_handler(UnicodeDecodeError)
async def unicode_decode_handler(request: Request, exc: UnicodeDecodeError):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∏ Unicode."""
    logger.error(f"Unicode decoding error: {exc}")
    return JSONResponse(
        status_code=400,
        content={"detail": f"Unicode decoding error: {str(exc)}"}
    )

# –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="app/static"), name="static")

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
os.makedirs("app/static/images", exist_ok=True)

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º –ø–ª–∞—Ç–Ω—É—é –≥–∞–ª–µ—Ä–µ—é –∫–∞–∫ —Å—Ç–∞—Ç–∏–∫—É
try:
    repo_root = Path(__file__).resolve().parents[1]
    paid_gallery_dir = repo_root / "paid_gallery"
    if paid_gallery_dir.exists():
        app.mount("/paid_gallery", StaticFiles(directory=str(paid_gallery_dir), html=True), name="paid_gallery")
        logger.info(f"[OK] –°–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–ª–∞—Ç–Ω–∞—è –≥–∞–ª–µ—Ä–µ—è: {paid_gallery_dir}")
    else:
        logger.warning(f"–ü–∞–ø–∫–∞ –ø–ª–∞—Ç–Ω–æ–π –≥–∞–ª–µ—Ä–µ–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {paid_gallery_dir}")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–Ω–æ–π –≥–∞–ª–µ—Ä–µ–∏: {e}")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
try:
    from app.auth.routers import auth_router
    from app.auth.oauth_routers import oauth_router
    app.include_router(auth_router)
    app.include_router(oauth_router)
    logger.info("[OK] –†–æ—É—Ç–µ—Ä—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
except Exception as e:
    logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
    import traceback
    logger.error(f"Traceback: {traceback.format_exc()}")

# –†–æ—É—Ç–µ—Ä generation —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ /api/v1/generate-image/ –≤ main.py

try:
    logger.info("üîÑ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º chat_router...")
    from app.chat_bot.api.chat_endpoints import router as chat_router
    logger.info("[OK] chat_router –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    logger.info("üîÑ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º character_router...")
    from app.chat_bot.api.character_endpoints import router as character_router
    logger.info("[OK] character_router –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    logger.info("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º chat_router...")
    app.include_router(chat_router)
    logger.info("[OK] chat_router –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    logger.info("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º character_router...")
    app.include_router(character_router)
    logger.info("[OK] character_router –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–æ–≤—ã–µ —Ä–æ—É—Ç–µ—Ä—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    logger.info("üîÑ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ä–æ—É—Ç–µ—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...")
    from app.chat_bot.add_character import character_router as new_character_router
    from app.chat_bot.add_character import universal_chat_router
    logger.info("[OK] –ù–æ–≤—ã–µ —Ä–æ—É—Ç–µ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    
    logger.info("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º new_character_router...")
    app.include_router(new_character_router)
    logger.info("[OK] new_character_router –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    logger.info("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º universal_chat_router...")
    app.include_router(universal_chat_router)
    logger.info("[OK] universal_chat_router –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    logger.info("[OK] –†–æ—É—Ç–µ—Ä—ã chat –∏ character –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

except Exception as e:
    logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ chat/character: {e}")
    logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
    import traceback
    logger.error(f"Traceback: {traceback.format_exc()}")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
try:
    logger.info("üîÑ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º profit_activate_router...")
    from app.api.endpoints.profit_activate_endpoints import router as profit_activate_router
    logger.info("[OK] profit_activate_router –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    logger.info("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º profit_activate_router...")
    app.include_router(profit_activate_router, prefix="/api/v1/profit", tags=["profit"])
    logger.info("[OK] profit_activate_router –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    logger.info("[OK] –†–æ—É—Ç–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π) –ø–æ–¥–∫–ª—é—á–µ–Ω")
except Exception as e:
    logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
    import traceback
    logger.error(f"Traceback: {traceback.format_exc()}")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ä–æ—É—Ç–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
try:
    logger.info("üîÑ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º subscription_router...")
    from app.api.endpoints.subscription_endpoints import router as subscription_router
    logger.info("[OK] subscription_router –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    logger.info("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º subscription_router...")
    app.include_router(subscription_router, prefix="/api/v1/subscription", tags=["subscription"])
    logger.info("[OK] subscription_router –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    logger.info("[OK] –†–æ—É—Ç–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫ (—Å—Ç–∞—Ä—ã–π) –ø–æ–¥–∫–ª—é—á–µ–Ω")
except Exception as e:
    logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
    import traceback
    logger.error(f"Traceback: {traceback.format_exc()}")

# –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –≤ main.py –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
from fastapi import Depends, HTTPException, status
from app.auth.dependencies import get_current_user
from app.models.user import Users
from app.services.profit_activate import ProfitActivateService
from app.schemas.subscription import SubscriptionActivateRequest, SubscriptionActivateResponse, SubscriptionStatsResponse
from app.database.db_depends import get_db
from sqlalchemy.ext.asyncio import AsyncSession

@app.post("/api/v1/profit/activate/", response_model=SubscriptionActivateResponse)
async def activate_subscription_direct(
    request: SubscriptionActivateRequest,
    current_user: Users = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä—è–º–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)."""
    try:
        service = ProfitActivateService(db)
        
        if request.subscription_type.lower() not in ["base", "standard"]:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–∏–ø–∞ 'base' –∏ 'standard'"
            )
        
        subscription = await service.activate_subscription(current_user.id, request.subscription_type)
        
        if request.subscription_type.lower() == "base":
            message = "–ü–æ–¥–ø–∏—Å–∫–∞ Base —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ 100 –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏ 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π —Ñ–æ—Ç–æ."
        else:
            message = "–ü–æ–¥–ø–∏—Å–∫–∞ Standard —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ 2000 –∫—Ä–µ–¥–∏—Ç–æ–≤"
        
        return SubscriptionActivateResponse(
            success=True,
            message=message,
            subscription=SubscriptionStatsResponse(
                subscription_type=subscription.subscription_type.value,
                status=subscription.status.value,
                monthly_credits=subscription.monthly_credits,
                monthly_photos=subscription.monthly_photos,
                used_credits=subscription.used_credits,
                used_photos=subscription.used_photos,
                credits_remaining=subscription.credits_remaining,
                photos_remaining=subscription.photos_remaining,
                days_left=subscription.days_until_expiry,
                is_active=subscription.is_active,
                expires_at=subscription.expires_at,
                last_reset_at=subscription.last_reset_at
            )
        )
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}"
        )

@app.get("/api/v1/profit/stats/")
async def get_subscription_stats_direct(
    current_user: Users = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä—è–º–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)."""
    try:
        service = ProfitActivateService(db)
        stats = await service.get_subscription_stats(current_user.id)
        return stats
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}"
        )

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –ø–ª–∞—Ç–Ω–æ–π –≥–∞–ª–µ—Ä–µ–∏ (–æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –¥—Ä—É–≥–∏—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤)
try:
    from app.routers.gallery import router as gallery_router
    app.include_router(gallery_router)
    logger.info("[OK] –†–æ—É—Ç–µ—Ä paid-gallery –ø–æ–¥–∫–ª—é—á–µ–Ω")
except Exception as e:
    logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞ gallery: {e}")
    import traceback
    logger.error(f"Traceback: {traceback.format_exc()}")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
try:
    from app.api.endpoints.photos_endpoints import router as photos_router
    app.include_router(photos_router)
    logger.info("[OK] –†–æ—É—Ç–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–¥–∫–ª—é—á–µ–Ω")
except Exception as e:
    logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {e}")
    import traceback
    logger.error(f"Traceback: {traceback.format_exc()}")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
try:
    logger.info("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞...")
    from app.api.endpoints.chat_history import router as chat_history_router
    app.include_router(chat_history_router, prefix="/api/v1/chat-history", tags=["chat-history"])
    logger.info("[OK] chat_history_router –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    logger.info("[OK] –†–æ—É—Ç–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω")
except Exception as e:
    logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")
    import traceback
    logger.error(f"Traceback: {traceback.format_exc()}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(
    request: Request, exc: RequestValidationError
):
    error_msg = f"Validation error: {exc.errors()}"
    logger.error(error_msg)
    
    return JSONResponse(
        status_code=422,
        content={"detail": exc.errors()}
    )

@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    error_msg = f"""
Error occurred at {datetime.now()}
Request: {request.url}
Method: {request.method}
Error Type: {type(exc).__name__}
Error Message: {str(exc)}
Traceback:
{traceback.format_exc()}
"""
    logger.error(error_msg)
    
    status_code = 500
    if isinstance(exc, HTTPException):
        status_code = exc.status_code
    
    return JSONResponse(
        status_code=status_code,
        content={
            "detail": str(exc),
            "type": type(exc).__name__
        }
    )

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —á–∞—Ç–æ–º."""
    return FileResponse("app/static/chat.html")

@app.get("/docs_app")
async def docs_app():
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é."""
    return RedirectResponse(url="/docs")

@app.get("/chat")
async def chat_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∞—Ç–∞."""
    file_path = Path(__file__).parent / "static" / "chat.html"
    return FileResponse(str(file_path))

@app.get("/health")
async def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        try:
            import sys
            from pathlib import Path
            webui_path = Path(__file__).parent.parent / "stable-diffusion-webui"
            sys.path.insert(0, str(webui_path))
            from model_config import get_model_info, check_model_files
            model_info = get_model_info()
            model_available = check_model_files()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏: {e}")
            model_info = None
            model_available = False
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app_status = {
            "app": "Stable Diffusion API",
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "version": "1.0.0",
            "model": {
                "name": model_info["name"] if model_info else "Unknown",
                "size_mb": model_info["size_mb"] if model_info else 0,
                "available": model_available,
                "vae": model_info["vae_name"] if model_info and model_info["vae_name"] else "Built-in"
            },
            "services": {}
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        if model_info:
            logger.info(f"[TARGET] –ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {model_info['name']} ({model_info['size_mb']} MB)")
            if model_info["vae_name"]:
                logger.info(f"[ART] VAE: {model_info['vae_name']}")
            else:
                logger.info("[ART] VAE: –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π")
        else:
            logger.warning("[WARNING] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        return app_status
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return {
            "app": "Stable Diffusion API",
            "status": "error",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@app.get("/api/v1/models/")
async def get_available_models():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π."""
    return [
        {
            "id": "L3-DARKEST-PLANET-16.5B",
            "name": "L3-DARKEST-PLANET-16.5B",
            "description": "L3-DARKEST-PLANET –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è 4096 –∫–æ–Ω—Ç–µ–∫—Å—Ç - –ª—É—á—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è 16.5B –º–æ–¥–µ–ª–∏"
        },
        {
            "id": "MythoMax-L2-13B",
            "name": "MythoMax L2 13B", 
            "description": "–ú–æ–¥–µ–ª—å –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –∏ –¥–∏–∞–ª–æ–≥–æ–≤"
        }
    ]

@app.get("/api/v1/generation-settings/")
async def get_generation_settings():
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    try:
        from app.config.generation_defaults import get_generation_params, get_fallback_values
        settings = get_generation_params("default")
        fallback_values = get_fallback_values()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        return {
            "steps": settings.get("steps", fallback_values["steps"]),
            "width": settings.get("width", fallback_values["width"]),
            "height": settings.get("height", fallback_values["height"]),
            "cfg_scale": settings.get("cfg_scale", fallback_values["cfg_scale"]),
            "sampler_name": settings.get("sampler_name", fallback_values["sampler_name"]),
            "negative_prompt": fallback_values["negative_prompt"]
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            from app.config.generation_defaults import get_fallback_values
            return get_fallback_values()
        except Exception as fallback_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è fallback –∑–Ω–∞—á–µ–Ω–∏–π: {fallback_error}")
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º default_prompts.py
            try:
                from app.config.default_prompts import get_default_negative_prompts
                from app.config.generation_defaults import DEFAULT_GENERATION_PARAMS
                return {
                    "steps": DEFAULT_GENERATION_PARAMS.get("steps", 100),
                    "width": DEFAULT_GENERATION_PARAMS.get("width", 512),
                    "height": DEFAULT_GENERATION_PARAMS.get("height", 853),
                    "cfg_scale": DEFAULT_GENERATION_PARAMS.get("cfg_scale", 5),
                    "sampler_name": DEFAULT_GENERATION_PARAMS.get("sampler_name", "Euler"),
                    "negative_prompt": get_default_negative_prompts()
                }
            except Exception as final_error:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: {final_error}")
                # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤ - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                return {
                    "steps": None,
                    "width": None,
                    "height": None,
                    "cfg_scale": None,
                    "sampler_name": None,
                    "negative_prompt": None
                }

@app.get("/api/v1/fallback-settings/")
async def get_fallback_settings():
    """–ü–æ–ª—É—á–∏—Ç—å fallback –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ generation_defaults.py."""
    try:
        from app.config.generation_defaults import get_fallback_values
        return get_fallback_values()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è fallback –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º default_prompts.py
        try:
            from app.config.default_prompts import get_default_negative_prompts
            from app.config.generation_defaults import DEFAULT_GENERATION_PARAMS
            return {
                "steps": DEFAULT_GENERATION_PARAMS.get("steps", 100),
                "width": DEFAULT_GENERATION_PARAMS.get("width", 512),
                "height": DEFAULT_GENERATION_PARAMS.get("height", 853),
                "cfg_scale": DEFAULT_GENERATION_PARAMS.get("cfg_scale", 5),
                "sampler_name": DEFAULT_GENERATION_PARAMS.get("sampler_name", "Euler"),
                "negative_prompt": get_default_negative_prompts()
            }
        except Exception as final_error:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: {final_error}")
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤ - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            return {
                "steps": None,
                "width": None,
                "height": None,
                "cfg_scale": None,
                "sampler_name": None,
                "negative_prompt": None
            }

@app.get("/api/v1/prompts/")
async def get_prompts():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã –∏–∑ default_prompts.py."""
    try:
        from app.config.generation_defaults import get_prompts_from_defaults
        return get_prompts_from_defaults()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤ - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        return {
            "positive_prompt": None,
            "negative_prompt": None
        }

@app.get("/api/v1/characters/{character_name}")
async def get_character_by_name(character_name: str, current_user: Users = Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –∏–º–µ–Ω–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤."""
    try:
        from app.chat_bot.utils.character_importer import character_importer
        from app.database.db import async_session_maker
        from app.chat_bot.models.models import CharacterDB
        from sqlalchemy import select
        
        async with async_session_maker() as db:
            result = await db.execute(
                select(CharacterDB).filter(CharacterDB.name == character_name)
            )
            character = result.scalar_one_or_none()
            
            if not character:
                raise HTTPException(status_code=404, detail="–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            if character.user_id != current_user.id and not current_user.is_admin:
                raise HTTPException(status_code=403, detail="–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
            
            return {
                "id": character.id,
                "name": character.name,
                "display_name": character.display_name,
                "description": character.description,
                "prompt": character.prompt,
                "character_appearance": character.character_appearance,
                "location": character.location,
                "user_id": character.user_id
            }
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_name}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")

@app.get("/api/v1/characters/")
async def fallback_characters():
    """Fallback endpoint –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."""
    try:
        from app.chat_bot.utils.character_importer import character_importer
        from app.database.db import async_session_maker
        from app.chat_bot.models.models import CharacterDB
        from sqlalchemy import select
        
        async with async_session_maker() as db:
            result = await db.execute(
                select(CharacterDB).order_by(CharacterDB.name)
            )
            characters = result.scalars().all()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º (–Ω–æ–≤–∞—è —Å—Ö–µ–º–∞ Alpaca)
            character_list = []
            for char in characters:
                character_list.append({
                    "id": char.id,
                    "name": char.name,
                    "display_name": char.display_name,
                    "description": char.description,
                    "prompt": char.prompt,
                    "character_appearance": char.character_appearance,
                    "location": char.location,
                    "user_id": char.user_id
                })
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {len(character_list)}")
            return character_list
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
        return []

@app.get("/api/characters/")
async def legacy_characters_redirect(request: Request):
    """Legacy endpoint –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º."""
    try:
        from app.chat_bot.utils.character_importer import character_importer
        from app.database.db import async_session_maker
        from app.chat_bot.models.models import CharacterDB
        from sqlalchemy import select
        
        async with async_session_maker() as db:
            result = await db.execute(
                select(CharacterDB).order_by(CharacterDB.name)
            )
            characters = result.scalars().all()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º (–Ω–æ–≤–∞—è —Å—Ö–µ–º–∞ Alpaca)
            character_list = []
            for char in characters:
                character_list.append({
                    "id": char.id,
                    "name": char.name,
                    "display_name": char.display_name,
                    "description": char.description,
                    "prompt": char.prompt,
                    "character_appearance": char.character_appearance,
                    "location": char.location,
                    "user_id": char.user_id
                })
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {len(character_list)}")
            return character_list
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
        return []

@app.post("/api/chat/")
async def legacy_chat_redirect(request: Request):
    return RedirectResponse(url="/api/v1/chat/")



@app.post("/chat")
async def chat_endpoint(request: dict):
    """
    –ü—Ä–æ—Å—Ç–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —á–∞—Ç–∞ - –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –±–µ–∑ –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    try:
        logger.info("[NOTE] /chat: –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º - –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        from app.chat_bot.services.textgen_webui_service import textgen_webui_service
        from app.chat_bot.config.chat_config import chat_config
        from app.config.generation_defaults import get_generation_params
        from app.services.profit_activate import ProfitActivateService
        from app.database.db import async_session_maker
        import json
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ text-generation-webui
        if not await textgen_webui_service.check_connection():
            raise HTTPException(
                status_code=503, 
                detail="text-generation-webui –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä text-generation-webui."
            )
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
        message = request.get("message", "").strip()
        character_name = request.get("character", "anna")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Anna
        if not message:
            raise HTTPException(status_code=400, detail="–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        history = request.get("history", [])
        session_id = request.get("session_id", "default")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
        user_id = request.get("user_id")  # –ë—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        if user_id:
            logger.info(f"[DEBUG] DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–µ—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            async with async_session_maker() as db:
                from app.services.coins_service import CoinsService
                coins_service = CoinsService(db)
                can_send_message = await coins_service.can_user_send_message(user_id)
                logger.info(f"[DEBUG] DEBUG: –ú–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {can_send_message}")
                if not can_send_message:
                    coins = await coins_service.get_user_coins(user_id)
                    logger.error(f"[ERROR] DEBUG: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {coins} –º–æ–Ω–µ—Ç, –Ω—É–∂–Ω–æ 2")
                    raise HTTPException(
                        status_code=403, 
                        detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è! –ù—É–∂–Ω–æ 2 –º–æ–Ω–µ—Ç—ã."
                    )
                else:
                    logger.info(f"[OK] DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from app.database.db import async_session_maker
        from app.chat_bot.models.models import CharacterDB
        from sqlalchemy import select
        
        character_data = None
        try:
            async with async_session_maker() as db:
                # –ü–æ–∏—Å–∫ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
                result = await db.execute(
                    select(CharacterDB).where(CharacterDB.name.ilike(character_name))
                )
                db_character = result.scalar_one_or_none()
                
                if db_character:
                    character_data = {
                        "name": db_character.name,
                        "prompt": db_character.prompt
                    }
                    logger.info(f"[OK] –î–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ '{character_name}' –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –ë–î")
                else:
                    # Fallback –∫ —Ñ–∞–π–ª–∞–º
                    character_data = get_character_data(character_name)
                    if character_data:
                        logger.info(f"[OK] Fallback: –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ '{character_name}' –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–æ–≤")
                    else:
                        logger.error(f"[ERROR] –ü–µ—Ä—Å–æ–Ω–∞–∂ '{character_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –ë–î, –Ω–∏ –≤ —Ñ–∞–π–ª–∞—Ö")
                        raise HTTPException(
                            status_code=404, 
                            detail=f"–ü–µ—Ä—Å–æ–Ω–∞–∂ '{character_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
                        )
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
            # Fallback –∫ —Ñ–∞–π–ª–∞–º
            character_data = get_character_data(character_name)
            if not character_data:
                raise HTTPException(
                    status_code=404, 
                    detail=f"–ü–µ—Ä—Å–æ–Ω–∞–∂ '{character_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
                )
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è "continue the story"
        is_continue_story = message.lower().strip() == "continue the story briefly"
        
        if is_continue_story:
            logger.info(f"üìñ Continue the story briefly - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫—Ä–∞—Ç–∫–æ")
        else:
            logger.info(f"[START] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è: {message[:50]}...")
        
        # –°—Ç—Ä–æ–∏–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Alpaca
        if history:
            # –°—Ç—Ä–æ–∏–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ Alpaca
            history_text = ""
            for msg in history[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                if msg.get('role') == 'user':
                    user_content = msg.get('content', '')
                    history_text += f"### Instruction:\n{user_content}\n\n### Response:\n"
                elif msg.get('role') == 'assistant':
                    history_text += f"{msg.get('content', '')}\n\n"
            
            # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç
            full_prompt = character_data["prompt"] + "\n\n" + history_text
        else:
            # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç
            if is_continue_story:
                full_prompt = character_data["prompt"] + f"\n\n### Instruction:\ncontinue the story briefly.\n\n### Response:\n"
            else:
                full_prompt = character_data["prompt"] + f"\n\n### Instruction:\n{message}\n\n### Response:\n"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –æ—Ç –º–æ–¥–µ–ª–∏
        response = await textgen_webui_service.generate_text(
            prompt=full_prompt,
            max_tokens=chat_config.HARD_MAX_TOKENS,
            temperature=chat_config.DEFAULT_TEMPERATURE,
            top_p=chat_config.DEFAULT_TOP_P,
            top_k=chat_config.DEFAULT_TOP_K,
            min_p=chat_config.DEFAULT_MIN_P,
            repeat_penalty=chat_config.DEFAULT_REPEAT_PENALTY,
            presence_penalty=chat_config.DEFAULT_PRESENCE_PENALTY
        )
        
        if not response:
            raise HTTPException(
                status_code=500, 
                detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏"
            )
        
        logger.info(f"[OK] /chat: –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ({len(response)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –¢—Ä–∞—Ç–∏–º –º–æ–Ω–µ—Ç—ã –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
        if user_id:
            logger.info(f"üí∞ –¢—Ä–∞—Ç–∏–º 2 –º–æ–Ω–µ—Ç—ã –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            async with async_session_maker() as db:
                from app.services.coins_service import CoinsService
                coins_service = CoinsService(db)
                coins_spent = await coins_service.spend_coins_for_message(user_id)
                if coins_spent:
                    coins_left = await coins_service.get_user_coins(user_id)
                    logger.info(f"[OK] –ü–æ—Ç—Ä–∞—á–µ–Ω–æ 2 –º–æ–Ω–µ—Ç—ã –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –û—Å—Ç–∞–ª–æ—Å—å: {coins_left}")
                else:
                    logger.warning(f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –º–æ–Ω–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        generate_image = request.get("generate_image", False)
        image_url = None
        image_filename = None
        
        if generate_image:
            try:
                logger.info("[ART] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ
                if user_id:
                    logger.info(f"[DEBUG] DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–µ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    async with async_session_maker() as db:
                        from app.services.coins_service import CoinsService
                        coins_service = CoinsService(db)
                        can_generate_photo = await coins_service.can_user_generate_photo(user_id)
                        logger.info(f"[DEBUG] DEBUG: –ú–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ: {can_generate_photo}")
                        if not can_generate_photo:
                            coins = await coins_service.get_user_coins(user_id)
                            logger.error(f"[ERROR] DEBUG: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ! –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {coins} –º–æ–Ω–µ—Ç, –Ω—É–∂–Ω–æ 30")
                            raise HTTPException(
                                status_code=403, 
                                detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ! –ù—É–∂–Ω–æ 30 –º–æ–Ω–µ—Ç."
                            )
                        else:
                            logger.info(f"[OK] DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ")
                else:
                    logger.warning(f"[WARNING] DEBUG: user_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–Ω–µ—Ç")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                image_prompt = request.get("image_prompt") or message
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                image_steps = request.get("image_steps")
                image_width = request.get("image_width") 
                image_height = request.get("image_height")
                image_cfg_scale = request.get("image_cfg_scale")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                image_request = ImageGenerationRequest(
                    prompt=image_prompt,
                    character=character_name,
                    steps=image_steps,
                    width=image_width,
                    height=image_height,
                    cfg_scale=image_cfg_scale
                )
                
                # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ HTTP
                import httpx
                async with httpx.AsyncClient() as client:
                    response = await client.post(
                        "http://localhost:8000/api/v1/generate-image/",
                        json=image_request.dict()
                    )
                    if response.status_code == 200:
                        image_result = response.json()
                        image_url = image_result.get("image_url")
                        image_filename = image_result.get("filename")
                    else:
                        raise Exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status_code}")
                
                logger.info(f"[OK] /chat: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {image_filename}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if image_url:
                    import os
                    static_path = f"app/static/images/{image_filename}"
                    if os.path.exists(static_path):
                        logger.info(f"[OK] DEBUG: –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {static_path}")
                    else:
                        logger.error(f"[ERROR] DEBUG: –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {static_path}")
                        image_url = None
                
                # –¢—Ä–∞—Ç–∏–º –º–æ–Ω–µ—Ç—ã –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
                if user_id and image_url:
                    logger.info(f"üí∞ –¢—Ä–∞—Ç–∏–º 30 –º–æ–Ω–µ—Ç –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    async with async_session_maker() as db:
                        from app.services.coins_service import CoinsService
                        coins_service = CoinsService(db)
                        coins_spent = await coins_service.spend_coins_for_photo(user_id)
                        if coins_spent:
                            coins_left = await coins_service.get_user_coins(user_id)
                            logger.info(f"[OK] –ü–æ—Ç—Ä–∞—á–µ–Ω–æ 30 –º–æ–Ω–µ—Ç –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –û—Å—Ç–∞–ª–æ—Å—å: {coins_left}")
                        else:
                            logger.warning(f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –º–æ–Ω–µ—Ç—ã –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
            except Exception as e:
                logger.error(f"[ERROR] /chat: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —á–∞—Ç
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
        result = {
            "response": response,
            "session_id": session_id,
            "character": character_data["name"],
            "message": message,
            "image_generated": generate_image and image_url is not None
        }
        
        logger.info(f"[DEBUG] DEBUG: image_url = {image_url}, image_filename = {image_filename}")
        logger.info(f"[DEBUG] DEBUG: generate_image = {generate_image}, image_generated = {result['image_generated']}")
        
        if image_url:
            result["image_url"] = image_url
            result["image_filename"] = image_filename
            logger.info(f"[OK] DEBUG: –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç: {image_url}")
        else:
            logger.warning(f"[WARNING] DEBUG: image_url –ø—É—Å—Ç–æ–π, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç")
        
        return result
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"[ERROR] /chat: –û—à–∏–±–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# –ò–º–ø–æ—Ä—Ç —É–∂–µ –µ—Å—Ç—å –≤—ã—à–µ –≤ —Ñ–∞–π–ª–µ

@app.post("/api/v1/generate-image/")
async def generate_image(request: ImageGenerationRequest):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞.

    Args:
        request (ImageGenerationRequest): –ó–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
        user_id = getattr(request, 'user_id', None)
        logger.info(f"[DEBUG] DEBUG: –≠–Ω–¥–ø–æ–∏–Ω—Ç generate-image, user_id: {user_id}")
        if user_id:
            logger.info(f"[DEBUG] DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–µ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            from app.services.coins_service import CoinsService
            from app.database.db import async_session_maker
            
            async with async_session_maker() as db:
                coins_service = CoinsService(db)
                can_generate_photo = await coins_service.can_user_generate_photo(user_id)
                logger.info(f"[DEBUG] DEBUG: –ú–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ: {can_generate_photo}")
                if not can_generate_photo:
                    coins = await coins_service.get_user_coins(user_id)
                    logger.error(f"[ERROR] DEBUG: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ! –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {coins} –º–æ–Ω–µ—Ç, –Ω—É–∂–Ω–æ 30")
                    raise HTTPException(
                        status_code=403, 
                        detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ! –ù—É–∂–Ω–æ 30 –º–æ–Ω–µ—Ç."
                    )
                else:
                    logger.info(f"[OK] DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ")
        else:
            logger.warning(f"[WARNING] DEBUG: user_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ generate-image")
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
        try:
            import sys
            from pathlib import Path
            webui_path = Path(__file__).parent.parent / "stable-diffusion-webui"
            sys.path.insert(0, str(webui_path))
            from model_config import get_model_info
            model_info = get_model_info()
            if model_info:
                logger.info(f"[TARGET] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –º–æ–¥–µ–ª—å—é: {model_info['name']} ({model_info['size_mb']} MB)")
            else:
                logger.warning("[WARNING] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        except Exception as e:
            logger.warning(f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏: {e}")
        
        logger.info(f"[TARGET] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {request.prompt}")

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        face_refinement_service = FaceRefinementService(settings.SD_API_URL)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –≤–Ω–µ—à–Ω–æ—Å—Ç–∏
        character_name = request.character or "anna"
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        character_appearance = None
        character_location = None
        
        try:
            from app.database.db import async_session_maker
            from app.chat_bot.models.models import CharacterDB
            from sqlalchemy import select
            
            async with async_session_maker() as db:
                # –ü–æ–∏—Å–∫ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
                result = await db.execute(
                    select(CharacterDB).where(CharacterDB.name.ilike(character_name))
                )
                db_character = result.scalar_one_or_none()
                
                if db_character:
                    character_appearance = db_character.character_appearance
                    character_location = db_character.location
                    logger.info(f"[OK] –î–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ '{character_name}' –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –ë–î")
                else:
                    # –ï—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–æ–≤
                    character_data = get_character_data(character_name)
                    if character_data:
                        character_appearance = character_data.get("character_appearance")
                        character_location = character_data.get("location")
                        logger.info(f"[OK] –î–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ '{character_name}' –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–æ–≤")
                    else:
                        logger.error(f"[ERROR] –ü–µ—Ä—Å–æ–Ω–∞–∂ '{character_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –ë–î, –Ω–∏ –≤ —Ñ–∞–π–ª–∞—Ö")
                        raise HTTPException(status_code=404, detail=f"–ü–µ—Ä—Å–æ–Ω–∞–∂ '{character_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
            # Fallback –∫ —Ñ–∞–π–ª–∞–º
            character_data = get_character_data(character_name)
            if character_data:
                character_appearance = character_data.get("character_appearance")
                character_location = character_data.get("location")
                logger.info(f"[OK] Fallback: –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ '{character_name}' –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–æ–≤")
            else:
                logger.error(f"[ERROR] –ü–µ—Ä—Å–æ–Ω–∞–∂ '{character_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                raise HTTPException(status_code=404, detail=f"–ü–µ—Ä—Å–æ–Ω–∞–∂ '{character_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        from app.config.generation_defaults import get_generation_params
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_params = get_generation_params("default")
        logger.info(f"üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: default_params['steps'] = {default_params.get('steps')}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        generation_settings = GenerationSettings(
            prompt=request.prompt,
            negative_prompt=request.negative_prompt,
            use_default_prompts=request.use_default_prompts,
            character=character_name,
            seed=request.seed or default_params.get("seed", -1),
            steps=default_params.get("steps"),  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            width=request.width or default_params.get("width"),
            height=request.height or default_params.get("height"),
            cfg_scale=request.cfg_scale or default_params.get("cfg_scale"),
            sampler_name=request.sampler_name or default_params.get("sampler_name"),
            batch_size=default_params.get("batch_size", 1),
            n_iter=default_params.get("n_iter", 1),
            save_grid=default_params.get("save_grid", False),
            use_adetailer=default_params.get("use_adetailer", False),
            enable_hr=default_params.get("enable_hr", True),
            denoising_strength=default_params.get("denoising_strength", 0.5),
            hr_scale=default_params.get("hr_scale", 1.5),
            hr_upscaler=default_params.get("hr_upscaler", "R-ESRGAN 4x+ Anime6B"),
            hr_second_pass_steps=default_params.get("hr_second_pass_steps", 10),
            hr_prompt=default_params.get("hr_prompt", ""),
            hr_negative_prompt=default_params.get("hr_negative_prompt", ""),
            restore_faces=default_params.get("restore_faces", False),
            clip_skip=default_params.get("clip_skip", 2),
            lora_models=default_params.get("lora_models", []),
            alwayson_scripts=default_params.get("alwayson_scripts", {})
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–∫–ª—é—á–∞—è –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        full_settings_for_logging = default_params.copy()
        full_settings_for_logging.update({
            "prompt": request.prompt,
            "negative_prompt": request.negative_prompt,
            "use_default_prompts": request.use_default_prompts,
            "character": character_name,
            "seed": request.seed or default_params.get("seed", -1),
            "steps": request.steps or default_params.get("steps", 35),
            "width": request.width or default_params.get("width", 512),
            "height": request.height or default_params.get("height", 853),
            "cfg_scale": request.cfg_scale or default_params.get("cfg_scale", 12),
            "sampler_name": request.sampler_name or default_params.get("sampler_name", "DPM++ 2M Karras"),
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–æ—Å—Ç—å –∏ –ª–æ–∫–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        prompt_parts = []
        
        if character_appearance:
            logger.info(f"[ART] –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {character_appearance[:100]}...")
            prompt_parts.append(character_appearance)
            full_settings_for_logging["character_appearance"] = character_appearance
        
        if character_location:
            logger.info(f"üè† –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {character_location[:100]}...")
            prompt_parts.append(character_location)
            full_settings_for_logging["character_location"] = character_location
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ default_prompts.py
        from app.config.default_prompts import get_default_positive_prompts
        default_positive_prompts = get_default_positive_prompts()
        logger.info(f"[NOTE] –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {default_positive_prompts[:100]}...")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç: –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ + –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç + —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        final_prompt_parts = []
        
        # 1. –î–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if prompt_parts:
            final_prompt_parts.extend(prompt_parts)
        
        # 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
        final_prompt_parts.append(generation_settings.prompt)
        
        # 3. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        final_prompt_parts.append(default_positive_prompts)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
        enhanced_prompt = ", ".join(final_prompt_parts)
        generation_settings.prompt = enhanced_prompt
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        full_settings_for_logging["prompt"] = enhanced_prompt
        full_settings_for_logging["default_positive_prompts"] = default_positive_prompts
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result = await face_refinement_service.generate_image(generation_settings, full_settings_for_logging)
        
        if not result.image_data or len(result.image_data) == 0:
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_data = result.image_data[0]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        from app.utils.image_saver import save_image
        import time
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        character_name = request.character or "character"
        character_photos_dir = f"paid_gallery/main_photos/{character_name.lower()}"
        os.makedirs(character_photos_dir, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        filename = f"generated_{int(time.time())}.png"
        filepath = os.path.join(character_photos_dir, filename)
        
        with open(filepath, 'wb') as f:
            f.write(image_data)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        image_url = f"/static/photos/{character_name.lower()}/{filename}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists(filepath):
            logger.info(f"[OK] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
            logger.info(f"[OK] URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")
        else:
            logger.error(f"[ERROR] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {filepath}")
            image_url = None
        
        # –¢—Ä–∞—Ç–∏–º –º–æ–Ω–µ—Ç—ã –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
        if user_id:
            logger.info(f"üí∞ –¢—Ä–∞—Ç–∏–º 30 –º–æ–Ω–µ—Ç –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            async with async_session_maker() as db:
                from app.services.coins_service import CoinsService
                coins_service = CoinsService(db)
                coins_spent = await coins_service.spend_coins_for_photo(user_id)
                if coins_spent:
                    coins_left = await coins_service.get_user_coins(user_id)
                    logger.info(f"[OK] –ü–æ—Ç—Ä–∞—á–µ–Ω–æ 30 –º–æ–Ω–µ—Ç –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –û—Å—Ç–∞–ª–æ—Å—å: {coins_left}")
                else:
                    logger.warning(f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –º–æ–Ω–µ—Ç—ã –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return {
            "image_url": image_url,
            "filename": filename,
            "message": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ"
        }
        
    except Exception as e:
        logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")



if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    uvicorn.run(app, host="0.0.0.0", port=8000)