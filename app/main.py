#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —á–∞—Ç-–±–æ—Ç–∞.
"""

import sys
from pathlib import Path
from datetime import datetime
import logging
import traceback
from contextlib import asynccontextmanager

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ü–ï–†–ï–î –∏–º–ø–æ—Ä—Ç–∞–º–∏
import os
project_root = Path(__file__).parent.parent
os.chdir(str(project_root))

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
app_root = Path(__file__).parent

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±–∞ –ø—É—Ç–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(app_root))

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
try:
    import pydantic
    print(f"‚úÖ Pydantic version: {pydantic.__version__}")
except ImportError as e:
    print(f"‚ùå Pydantic import error: {e}")
    sys.exit(1)

from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, FileResponse, RedirectResponse
from fastapi.exceptions import RequestValidationError
import uvicorn
from loguru import logger
from app.database.db import async_session_maker
from app.chat_bot.create.character_service import character_service

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# text-generation-webui —Ç–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ

async def sync_characters_to_db():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ character_service –≤ –ë–î, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    from app.chat_bot.models.models import CharacterDB
    from sqlalchemy import select
    
    logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é {len(character_service.characters)} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...")
    
    async with async_session_maker() as db:
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        for char_name, char in character_service.characters.items():
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {char_name}")
            
            try:
                result = await db.execute(select(CharacterDB).where(CharacterDB.name == char.name))
                db_char = result.scalar_one_or_none()
                
                if not db_char:
                    logger.info(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ë–î: {char.name}")
                    await character_service.add_to_db(char, db)
                    logger.info(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ {char.name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î")
                else:
                    logger.info(f"‚ÑπÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ {char.name} —É–∂–µ –µ—Å—Ç—å –≤ –ë–î (ID: {db_char.id})")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {char_name}: {e}")
                logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                import traceback
                logger.error(f"Traceback: {traceback.format_exc()}")
        
        logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    logger.info("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å character_service...")
    
    try:
        logger.info(f"‚úÖ character_service –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {len(character_service.characters)}")
        for char_name in character_service.characters.keys():
            logger.info(f"   - {char_name}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ character_service: {e}")
    
    # text-generation-webui –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    logger.info("‚ÑπÔ∏è text-generation-webui –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ")
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...")
    try:
        await sync_characters_to_db()
        logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
    
    logger.info("üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")
    yield
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å lifespan
app = FastAPI(
    title="Stable Diffusion API",
    description="API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é Stable Diffusion",
    version="1.0.0",
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json"
)

@app.on_event("startup")
async def startup_event():
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."""
    logger.info("üîÑ –°–æ–±—ã—Ç–∏–µ startup: –Ω–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...")
    try:
        await sync_characters_to_db()
        logger.info("‚úÖ –°–æ–±—ã—Ç–∏–µ startup: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –°–æ–±—ã—Ç–∏–µ startup: –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
try:
    from app.auth import auth, register
    app.include_router(auth.router)
    app.include_router(register.router)
    logger.info("‚úì –†–æ—É—Ç–µ—Ä—ã auth –∏ register –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
except Exception as e:
    logger.error(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ auth/register: {e}")

try:
    from routers.generation import router as generation_router
    app.include_router(generation_router)
    logger.info("‚úì –†–æ—É—Ç–µ—Ä generation –ø–æ–¥–∫–ª—é—á–µ–Ω")
except Exception as e:
    logger.error(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞ generation: {e}")
    logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
    import traceback
    logger.error(f"Traceback: {traceback.format_exc()}")

try:
    from chat_bot.api import chat_router, character_router
    app.include_router(chat_router)
    app.include_router(character_router)
    logger.info("‚úì –†–æ—É—Ç–µ—Ä—ã chat –∏ character –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
except Exception as e:
    logger.error(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ chat/character: {e}")
    logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
    import traceback
    logger.error(f"Traceback: {traceback.format_exc()}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(
    request: Request, exc: RequestValidationError
):
    error_msg = f"Validation error: {exc.errors()}"
    logger.error(error_msg)
    
    return JSONResponse(
        status_code=422,
        content={"detail": exc.errors()}
    )

@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    error_msg = f"""
Error occurred at {datetime.now()}
Request: {request.url}
Method: {request.method}
Error Type: {type(exc).__name__}
Error Message: {str(exc)}
Traceback:
{traceback.format_exc()}
"""
    logger.error(error_msg)
    
    status_code = 500
    if isinstance(exc, HTTPException):
        status_code = exc.status_code
    
    return JSONResponse(
        status_code=status_code,
        content={
            "detail": str(exc),
            "type": type(exc).__name__
        }
    )

@app.get("/")
async def root():
    return {"message": "API is running"}

@app.get("/docs_app")
async def docs_app():
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é."""
    return RedirectResponse(url="/docs")

@app.get("/chat")
async def chat_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∞—Ç–∞."""
    file_path = Path(__file__).parent / "static" / "chat.html"
    return FileResponse(str(file_path))

@app.get("/health")
async def health():
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

@app.get("/api/characters/")
async def legacy_characters_redirect(request: Request):
    """Legacy endpoint –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º."""
    try:
        from app.chat_bot.create.character_service import character_service
        characters = character_service.list_characters()
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {len(characters)}")
        return characters
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
        return []

@app.post("/api/chat/")
async def legacy_chat_redirect(request: Request):
    return RedirectResponse(url="/api/v1/chat/")

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    uvicorn.run(app, host="0.0.0.0", port=8000)