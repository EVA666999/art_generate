#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —á–∞—Ç-–±–æ—Ç–∞.
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç llama_cpp –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
try:
    import llama_cpp
    print(f"‚úÖ llama_cpp –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ! –í–µ—Ä—Å–∏—è: {llama_cpp.__version__}")
except ImportError as e:
    print("‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ llama_cpp!")
    print("–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ llama-cpp-python –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
    print("\nüîß –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print("   python install_llama_cpp.py")
    print("   –∏–ª–∏")
    print("   install_llama_cpp.bat (–¥–ª—è Windows)")
    print("\nüìã –†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞:")
    print("   –î–ª—è CUDA: pip install llama-cpp-python --force-reinstall --index-url https://jllllll.github.io/llama-cpp-python-cuBLAS-wheels/cu121")
    print("   –î–ª—è CPU: pip install llama-cpp-python")
    sys.exit(1)
except Exception as e:
    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ llama_cpp: {e}")
    print("–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏.")
    print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å llama-cpp-python:")
    print("   python install_llama_cpp.py")
    sys.exit(1)

from datetime import datetime
import logging

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
from app.auth import auth, register
from app.routers import generation
from app.config.settings import settings
from app.utils.logger import setup_logger, Logger
from app.config.logger_config import LoggerConfig
from contextlib import asynccontextmanager
import asyncio
from loguru import logger
from fastapi.responses import JSONResponse
import traceback
from fastapi.exceptions import RequestValidationError
from pydantic import ValidationError
from app.chat_bot.api import chat_endpoints, character_endpoints
from app.users.models import users
from app.database.db import engine
from app.config.cuda_config import configure_cuda

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞
logger_config = LoggerConfig()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
app_logger = setup_logger(
    bot_token=logger_config.TELEGRAM_BOT_TOKEN or "",
    chat_id=logger_config.TELEGRAM_CHAT_ID or "",
    log_level=logger_config.LOG_LEVEL,
    log_file=logger_config.LOG_FILE,
    log_rotation=logger_config.LOG_ROTATION,
    log_retention=logger_config.LOG_RETENTION
)

@asynccontextmanager
async def lifespan(app: FastAPI):
    app_logger.info("Starting up FastAPI application...")
    try:
        configure_cuda()
        app_logger.info("CUDA —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CUDA: {str(e)}")
    yield
    app_logger.info("Shutting down FastAPI application...")

app = FastAPI(
    title="Stable Diffusion API",
    description="API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é Stable Diffusion",
    version="1.0.0",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.include_router(auth.router)
app.include_router(register.router)
app.include_router(generation.router)
app.include_router(chat_endpoints.router)
app.include_router(character_endpoints.router)

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    error_msg = f"Validation error: {exc.errors()}"
    app_logger.error(error_msg)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    await app_logger.send_log(
        f"Validation Error:\nRequest: {request.url}\nMethod: {request.method}\nErrors: {exc.errors()}"
    )
    
    return JSONResponse(
        status_code=422,
        content={"detail": exc.errors()}
    )

@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    error_msg = f"""
Error occurred at {datetime.now()}
Request: {request.url}
Method: {request.method}
Error Type: {type(exc).__name__}
Error Message: {str(exc)}
Traceback:
{traceback.format_exc()}
"""
    app_logger.error(error_msg)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç –≤–∫–ª—é—á–µ–Ω
    if logger_config.TELEGRAM_BOT_ENABLED:
        try:
            if logger_config.TELEGRAM_BOT_TOKEN and logger_config.TELEGRAM_CHAT_ID:
                for _ in range(logger_config.TELEGRAM_BOT_RETRY_COUNT):
                    try:
                        await app_logger.send_log(
                            f"üö® <b>Error {type(exc).__name__}</b>\n"
                            f"Request: {request.url}\n"
                            f"Method: {request.method}\n"
                            f"Error: {str(exc)}\n"
                            f"Time: {datetime.now()}"
                        )
                        break
                    except Exception as retry_error:
                        if _ == logger_config.TELEGRAM_BOT_RETRY_COUNT - 1:
                            raise retry_error
                        await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        except Exception as e:
            app_logger.error(f"Failed to send Telegram notification: {str(e)}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
    status_code = 500
    if isinstance(exc, HTTPException):
        status_code = exc.status_code
    
    return JSONResponse(
        status_code=status_code,
        content={
            "detail": str(exc),
            "type": type(exc).__name__
        }
    )

@app.get("/")
async def root():
    return {"message": "API is running"}

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è 404 –æ—à–∏–±–æ–∫
@app.exception_handler(404)
async def not_found_handler(request: Request, exc: HTTPException):
    error_msg = f"404 Not Found: {request.url}"
    app_logger.error(error_msg)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    await app_logger.send_log(
        f"404 Not Found:\nRequest: {request.url}\nMethod: {request.method}"
    )
    
    return JSONResponse(
        status_code=404,
        content={
            "detail": f"Not Found: {request.url}",
            "type": "not_found"
        }
    )

if __name__ == "__main__":
    uvicorn.run("app.main:app", host="0.0.0.0", port=8000, reload=True)