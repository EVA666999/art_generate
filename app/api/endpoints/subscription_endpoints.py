"""
API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.
"""

from typing import Dict, Any
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.ext.asyncio import AsyncSession

from app.database.db_depends import get_db
from app.auth.dependencies import get_current_user
from app.models.user import Users
from app.services.subscription_service import SubscriptionService
from app.schemas.subscription import (
    SubscriptionStatsResponse, 
    SubscriptionActivateRequest, 
    SubscriptionActivateResponse,
    SubscriptionInfoResponse
)

router = APIRouter()


@router.get("/stats/", response_model=Dict[str, Any])
async def get_subscription_stats(
    current_user: Users = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        service = SubscriptionService(db)
        stats = await service.get_subscription_stats(current_user.id)
        return stats
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}"
        )


@router.post("/activate/", response_model=SubscriptionActivateResponse)
async def activate_subscription(
    request: SubscriptionActivateRequest,
    current_user: Users = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """
    –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    print(f"üîç DEBUG: –ù–∞—á–∞–ª–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.id}")
    try:
        print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∫–∏: {request.subscription_type}")
        service = SubscriptionService(db)
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º base, standard –∏ premium –ø–æ–¥–ø–∏—Å–∫–∏
        if request.subscription_type.lower() not in ["base", "standard", "premium"]:
            print(f"[ERROR] DEBUG: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {request.subscription_type}")
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–∏–ø–∞ 'base', 'standard' –∏ 'premium'"
            )
        
        print(f"[OK] DEBUG: –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {request.subscription_type}")
        
        subscription = await service.create_subscription(current_user.id, request.subscription_type)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        if request.subscription_type.lower() == "base":
            message = "–ü–æ–¥–ø–∏—Å–∫–∞ Base —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ 100 –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏ 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π —Ñ–æ—Ç–æ."
        elif request.subscription_type.lower() == "standard":
            message = "–ü–æ–¥–ø–∏—Å–∫–∞ Standard —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ 2000 –∫—Ä–µ–¥–∏—Ç–æ–≤."
        else:  # premium
            message = "–ü–æ–¥–ø–∏—Å–∫–∞ Premium —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ 6000 –∫—Ä–µ–¥–∏—Ç–æ–≤."
        
        return SubscriptionActivateResponse(
            success=True,
            message=message,
            subscription=SubscriptionStatsResponse(
                subscription_type=subscription.subscription_type.value,
                status=subscription.status.value,
                monthly_credits=subscription.monthly_credits,
                monthly_photos=subscription.monthly_photos,
                used_credits=subscription.used_credits,
                used_photos=subscription.used_photos,
                credits_remaining=subscription.credits_remaining,
                photos_remaining=subscription.photos_remaining,
                days_left=subscription.days_until_expiry,
                is_active=subscription.is_active,
                expires_at=subscription.expires_at,
                last_reset_at=subscription.last_reset_at
            )
        )
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}"
        )


@router.get("/info/", response_model=SubscriptionInfoResponse)
async def get_subscription_info(
    current_user: Users = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        service = SubscriptionService(db)
        subscription_info = await service.get_subscription_info(current_user.id)
        
        if not subscription_info:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
        
        return subscription_info
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ: {str(e)}"
        )


@router.get("/check/message/")
async def check_message_permission(
    current_user: Users = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    try:
        service = SubscriptionService(db)
        can_send = await service.can_user_send_message(current_user.id)
        
        return {
            "can_send_message": can_send,
            "user_id": current_user.id
        }
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {str(e)}"
        )


@router.get("/check/photo/")
async def check_photo_permission(
    current_user: Users = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ.
    """
    try:
        service = SubscriptionService(db)
        can_generate = await service.can_user_generate_photo(current_user.id)
        
        return {
            "can_generate_photo": can_generate,
            "user_id": current_user.id
        }
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {str(e)}"
        )
