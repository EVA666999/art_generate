"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update
from sqlalchemy.orm import selectinload

from app.models.subscription import UserSubscription, SubscriptionType, SubscriptionStatus
from app.models.user import Users
from app.schemas.subscription import SubscriptionStatsResponse, SubscriptionInfoResponse


class SubscriptionService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏."""
    
    def __init__(self, db: AsyncSession):
        self.db = db
    
    async def get_user_subscription(self, user_id: int) -> Optional[UserSubscription]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        query = select(UserSubscription).where(UserSubscription.user_id == user_id)
        result = await self.db.execute(query)
        return result.scalar_one_or_none()
    
    async def create_subscription(self, user_id: int, subscription_type: str) -> UserSubscription:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        print(f"üîç DEBUG: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–∏–ø: {subscription_type}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏
        if subscription_type.lower() == "base":
            monthly_credits = 100
            monthly_photos = 10
            max_message_length = 100
        elif subscription_type.lower() == "standard":
            monthly_credits = 2000
            monthly_photos = 0  # –£–±–∏—Ä–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ
            max_message_length = 200
        elif subscription_type.lower() == "premium":
            monthly_credits = 6000
            monthly_photos = 50  # –î–æ–±–∞–≤–ª—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –¥–ª—è Premium
            max_message_length = 300
        else:
            print(f"[ERROR] DEBUG: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_type}")
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_type}")
        
        print(f"[OK] DEBUG: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏ - –∫—Ä–µ–¥–∏—Ç—ã: {monthly_credits}, —Ñ–æ—Ç–æ: {monthly_photos}, –¥–ª–∏–Ω–∞: {max_message_length}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∫–∞
        existing_subscription = await self.get_user_subscription(user_id)
        if existing_subscription:
            print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {existing_subscription.subscription_type.value}, –∞–∫—Ç–∏–≤–Ω–∞: {existing_subscription.is_active}")
            
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
            if existing_subscription.is_active and existing_subscription.subscription_type.value == subscription_type.lower():
                print(f"[OK] DEBUG: –ü–æ–¥–ø–∏—Å–∫–∞ —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é")
                return existing_subscription
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞)
            print(f"üîÑ DEBUG: –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {subscription_type}")
            existing_subscription.subscription_type = SubscriptionType(subscription_type.lower())
            existing_subscription.status = SubscriptionStatus.ACTIVE
            existing_subscription.monthly_credits = monthly_credits
            existing_subscription.monthly_photos = monthly_photos
            existing_subscription.max_message_length = max_message_length
            existing_subscription.used_credits = 0
            existing_subscription.used_photos = 0
            existing_subscription.activated_at = datetime.utcnow()
            existing_subscription.expires_at = datetime.utcnow() + timedelta(days=30)
            existing_subscription.last_reset_at = datetime.utcnow()
            
            await self.db.commit()
            await self.db.refresh(existing_subscription)
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.add_credits_to_user_balance(user_id, monthly_credits)
            
            return existing_subscription
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
        subscription = UserSubscription(
            user_id=user_id,
            subscription_type=SubscriptionType(subscription_type.lower()),
            status=SubscriptionStatus.ACTIVE,
            monthly_credits=monthly_credits,
            monthly_photos=monthly_photos,
            max_message_length=max_message_length,
            used_credits=0,
            used_photos=0,
            activated_at=datetime.utcnow(),
            expires_at=datetime.utcnow() + timedelta(days=30),
            last_reset_at=datetime.utcnow()
        )
        
        self.db.add(subscription)
        await self.db.commit()
        await self.db.refresh(subscription)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.add_credits_to_user_balance(user_id, monthly_credits)
        
        return subscription
    
    async def add_credits_to_user_balance(self, user_id: int, credits: int) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_query = select(Users).where(Users.id == user_id)
            result = await self.db.execute(user_query)
            user = result.scalar_one_or_none()
            
            if not user:
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.coins += credits
            await self.db.commit()
            await self.db.refresh(user)
            
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å: {e}")
            return False
    
    async def create_base_subscription(self, user_id: int) -> UserSubscription:
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)."""
        return await self.create_subscription(user_id, "base")
    
    async def get_subscription_stats(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        subscription = await self.get_user_subscription(user_id)
        
        if not subscription:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return {
                "subscription_type": "none",
                "status": "inactive",
                "monthly_credits": 0,
                "monthly_photos": 0,
                "used_credits": 0,
                "used_photos": 0,
                "credits_remaining": 0,
                "photos_remaining": 0,
                "days_left": 0,
                "is_active": False,
                "expires_at": None,
                "last_reset_at": None
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –º–µ—Å—è—á–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        if subscription.should_reset_limits():
            subscription.reset_monthly_limits()
            await self.db.commit()
            await self.db.refresh(subscription)
        
        return {
            "subscription_type": subscription.subscription_type.value,
            "status": subscription.status.value,
            "monthly_credits": subscription.monthly_credits,
            "monthly_photos": subscription.monthly_photos,
            "used_credits": subscription.used_credits,
            "used_photos": subscription.used_photos,
            "credits_remaining": subscription.credits_remaining,
            "photos_remaining": subscription.photos_remaining,
            "days_left": subscription.days_until_expiry,
            "is_active": subscription.is_active,
            "expires_at": subscription.expires_at,
            "last_reset_at": subscription.last_reset_at
        }
    
    async def can_user_send_message(self, user_id: int, message_length: int = 0) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        subscription = await self.get_user_subscription(user_id)
        if not subscription:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –º–µ—Å—è—á–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        if subscription.should_reset_limits():
            subscription.reset_monthly_limits()
            await self.db.commit()
            await self.db.refresh(subscription)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if not subscription.can_send_message(message_length):
            return False
        
        # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è 2 –∫—Ä–µ–¥–∏—Ç–∞
        return subscription.can_use_credits(2)
    
    async def can_user_generate_photo(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ."""
        subscription = await self.get_user_subscription(user_id)
        if not subscription:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –º–µ—Å—è—á–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        if subscription.should_reset_limits():
            subscription.reset_monthly_limits()
            await self.db.commit()
            await self.db.refresh(subscription)
        
        return subscription.can_generate_photo()
    
    async def use_message_credits(self, user_id: int) -> bool:
        """–¢—Ä–∞—Ç–∏—Ç –∫—Ä–µ–¥–∏—Ç—ã –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è."""
        subscription = await self.get_user_subscription(user_id)
        if not subscription:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –º–µ—Å—è—á–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        if subscription.should_reset_limits():
            subscription.reset_monthly_limits()
            await self.db.commit()
            await self.db.refresh(subscription)
        
        # –¢—Ä–∞—Ç–∏–º 2 –∫—Ä–µ–¥–∏—Ç–∞ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        success = subscription.use_credits(2)
        if success:
            await self.db.commit()
            await self.db.refresh(subscription)
        
        return success
    
    async def use_photo_generation(self, user_id: int) -> bool:
        """–¢—Ä–∞—Ç–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–æ—Ç–æ."""
        subscription = await self.get_user_subscription(user_id)
        if not subscription:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –º–µ—Å—è—á–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        if subscription.should_reset_limits():
            subscription.reset_monthly_limits()
            await self.db.commit()
            await self.db.refresh(subscription)
        
        success = subscription.use_photo_generation()
        if success:
            await self.db.commit()
            await self.db.refresh(subscription)
        
        return success
    
    async def get_subscription_info(self, user_id: int) -> Optional[SubscriptionInfoResponse]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        subscription = await self.get_user_subscription(user_id)
        if not subscription:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –º–µ—Å—è—á–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        if subscription.should_reset_limits():
            subscription.reset_monthly_limits()
            await self.db.commit()
            await self.db.refresh(subscription)
        
        return SubscriptionInfoResponse(
            id=subscription.id,
            user_id=subscription.user_id,
            subscription_type=subscription.subscription_type.value,
            status=subscription.status.value,
            monthly_credits=subscription.monthly_credits,
            monthly_photos=subscription.monthly_photos,
            used_credits=subscription.used_credits,
            used_photos=subscription.used_photos,
            credits_remaining=subscription.credits_remaining,
            photos_remaining=subscription.photos_remaining,
            activated_at=subscription.activated_at,
            expires_at=subscription.expires_at,
            last_reset_at=subscription.last_reset_at,
            is_active=subscription.is_active,
            days_until_expiry=subscription.days_until_expiry
        )
