"""
API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏.
"""
import asyncio
from typing import List, Optional
from fastapi import APIRouter, HTTPException, Depends
from fastapi.responses import StreamingResponse
from pydantic import BaseModel
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from io import BytesIO
import json

from app.chat_bot.schemas.chat import (
    ChatMessage, 
    CharacterConfig, 
    MessageRole, 
    SimpleChatRequest
)
from app.chat_bot.models.models import CharacterDB, ChatSession, ChatMessageDB

from app.utils.logger import logger
from app.database.db_depends import get_db
from app.schemas.generation import GenerationSettings
from app.services.face_refinement import FaceRefinementService
from app.chat_bot.config.chat_config import chat_config
from app.chat_bot.services.textgen_webui_service import textgen_webui_service

from app.config.settings import settings

router = APIRouter(prefix="/api/v1/chat", tags=["Chat"])


def _ensure_character_filled(character_config: CharacterConfig) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–∑ –ë–î –∏–º–µ–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ Alpaca-–ø–æ–ª—è.
    –ï—Å–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ/–ø—Ä–æ–±–µ–ª—å–Ω—ã–µ, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç HTTPException 422.
    """
    required = {
        "instructions": character_config.instructions or "",
        "system_prompt": character_config.system_prompt or "",
        "response_format": character_config.response_format or "",
    }
    missing = [k for k, v in required.items() if not v.strip()]
    if missing:
        from fastapi import HTTPException
        raise HTTPException(
            status_code=422,
            detail=(
                "–ü–µ—Ä—Å–æ–Ω–∞–∂ –≤ –ë–î –∏–º–µ–µ—Ç –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è: "
                + ", ".join(missing)
            ),
        )


class ChatWithCharacterRequest(BaseModel):
    messages: List[ChatMessage]
    max_tokens: Optional[int] = None
    temperature: Optional[float] = None
    top_p: Optional[float] = None
    top_k: Optional[int] = None
    repeat_penalty: Optional[float] = None


class ImageGenerationRequest(BaseModel):
    prompt: str
    negative_prompt: Optional[str] = None
    use_default_prompts: bool = True
    seed: Optional[int] = None
    steps: Optional[int] = None
    width: Optional[int] = None
    height: Optional[int] = None
    cfg_scale: Optional[float] = None
    sampler_name: Optional[str] = None


async def get_character_from_db(
    db: AsyncSession, 
    character_id: int
) -> Optional[CharacterDB]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –ë–î –ø–æ ID."""
    result = await db.execute(
        select(CharacterDB).where(CharacterDB.id == character_id)
    )
    return result.scalar_one_or_none()


@router.get("/status")
async def get_chat_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–∞—Ç-—Å–µ—Ä–≤–∏—Å–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ text-generation-webui
    webui_connected = await textgen_webui_service.check_connection()
    
    return {
        "connected": webui_connected,
        "webui_enabled": chat_config.TEXTGEN_WEBUI_ENABLED,
        "webui_url": chat_config.TEXTGEN_WEBUI_URL,
        "model_name": chat_config.TEXTGEN_WEBUI_MODEL,
        "cache_enabled": chat_config.ENABLE_CACHE,
        "max_history_length": chat_config.MAX_HISTORY_LENGTH,
        "max_message_length": chat_config.MAX_MESSAGE_LENGTH,
        "message": "–ß–∞—Ç-—Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω" if webui_connected else "text-generation-webui –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    }


@router.post("/webui/chat")
async def chat_with_webui(request: SimpleChatRequest):
    """
    –ß–∞—Ç —Å –º–æ–¥–µ–ª—å—é —á–µ—Ä–µ–∑ text-generation-webui API.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å MythoMax L2 13B.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ text-generation-webui
        if not await textgen_webui_service.check_connection():
            raise HTTPException(
                status_code=503, 
                detail="text-generation-webui –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä text-generation-webui."
            )
        
        # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç –¥–ª—è MythoMax
        system_message = "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
        prompt = textgen_webui_service.build_mythomax_prompt(
            system_message=system_message,
            user_message=request.message,
            history=request.history
        )
        
        logger.info(f"ü§ñ WebUI: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è: {request.message[:50]}...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = await textgen_webui_service.generate_text(
            prompt=prompt,
            max_tokens=request.max_tokens,
            temperature=request.temperature,
            top_p=request.top_p,
            top_k=request.top_k,
            repeat_penalty=request.repeat_penalty
        )
        
        if not response:
            raise HTTPException(
                status_code=500, 
                detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏"
            )
        
        logger.info(f"‚úÖ WebUI: –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ({len(response)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        return {
            "response": response,
            "model": chat_config.TEXTGEN_WEBUI_MODEL,
            "prompt_length": len(prompt),
            "response_length": len(response),
            "webui_connected": True
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå WebUI: –û—à–∏–±–∫–∞ —á–∞—Ç–∞: {e}")
        raise HTTPException(
            status_code=500, 
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )


@router.post("/webui/chat/stream")
async def chat_with_webui_stream(request: SimpleChatRequest):
    """
    –ü–æ—Ç–æ–∫–æ–≤—ã–π —á–∞—Ç —Å –º–æ–¥–µ–ª—å—é —á–µ—Ä–µ–∑ text-generation-webui API.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å MythoMax L2 13B.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ text-generation-webui
        if not await textgen_webui_service.check_connection():
            raise HTTPException(
                status_code=503, 
                detail="text-generation-webui –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä text-generation-webui."
            )
        
        # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç –¥–ª—è MythoMax
        system_message = "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
        prompt = textgen_webui_service.build_mythomax_prompt(
            system_message=system_message,
            user_message=request.message,
            history=request.history
        )
        
        logger.info(f"ü§ñ WebUI Stream: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è: {request.message[:50]}...")
        
        async def generate_stream():
            """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç."""
            try:
                async for chunk in textgen_webui_service.generate_text_stream(
                    prompt=prompt,
                    max_tokens=request.max_tokens,
                    temperature=request.temperature,
                    top_p=request.top_p,
                    top_k=request.top_k,
                    repeat_penalty=request.repeat_penalty
                ):
                    if chunk:
                        yield f"data: {json.dumps({'chunk': chunk, 'model': chat_config.TEXTGEN_WEBUI_MODEL})}\n\n"
                        
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                yield f"data: {json.dumps({'done': True, 'model': chat_config.TEXTGEN_WEBUI_MODEL})}\n\n"
                
            except Exception as e:
                logger.error(f"‚ùå WebUI Stream: –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
                yield f"data: {json.dumps({'error': str(e)})}\n\n"
        
        return StreamingResponse(
            generate_stream(),
            media_type="text/plain",
            headers={
                "Cache-Control": "no-cache",
                "Connection": "keep-alive",
                "X-Model": chat_config.TEXTGEN_WEBUI_MODEL
            }
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå WebUI Stream: –û—à–∏–±–∫–∞ —á–∞—Ç–∞: {e}")
        raise HTTPException(
            status_code=500, 
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )


@router.post("/generate-image")
async def generate_image_in_chat(
    request: ImageGenerationRequest,
    face_refinement_service: FaceRefinementService = Depends(
        lambda: FaceRefinementService(settings.SD_API_URL)
    ),
):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    try:
        logger.info(
            f"üéØ CHAT: –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {request.prompt}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        generation_settings = GenerationSettings(
            prompt=request.prompt,
            negative_prompt=request.negative_prompt,
            use_default_prompts=request.use_default_prompts,
            seed=request.seed,
            steps=request.steps,
            width=request.width,
            height=request.height,
            cfg_scale=request.cfg_scale,
            sampler_name=request.sampler_name,
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            batch_size=1,
            n_iter=1,
            save_grid=False,
            # –û–¢–ö–õ–Æ–ß–ê–ï–ú ADetailer
            use_adetailer=False
        )
        
        logger.info("üéØ CHAT: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result = await face_refinement_service.generate_image(generation_settings)
        
        # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if not result.image_data or len(result.image_data) == 0:
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        
        if len(result.image_data) > 1:
            logger.warning(f"üîß CHAT: –ü–æ–ª—É—á–µ–Ω–æ {len(result.image_data)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ")
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_data = result.image_data[0]
        else:
            # –ë–µ—Ä–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_data = result.image_data[0]
        
        logger.info("‚úÖ CHAT: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        info_dict = {}
        try:
            import json
            info_dict = json.loads(result.info)
        except:
            pass
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –ø–æ—Ç–æ–∫
        return StreamingResponse(
            BytesIO(image_data),
            media_type="image/png",
            headers={
                "X-Prompt": request.prompt,
                "X-Seed": str(info_dict.get("seed", result.seed)),
                "X-Steps": str(info_dict.get("steps", request.steps or 40)),
                "X-CFG-Scale": str(info_dict.get("cfg_scale", request.cfg_scale or 6)),
                "X-Sampler": info_dict.get("sampler_name", request.sampler_name or "DPM++ SDE Karras"),
                "X-Width": str(info_dict.get("width", request.width or 768)),
                "X-Height": str(info_dict.get("height", request.height or 768)),
                "X-Images-Generated": "1"  # –ù–û–í–û–ï: –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            }
        )
        
    except Exception as e:
        logger.error(f"‚ùå CHAT: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
        )

@router.post("/generate-image-base64")
async def generate_image_base64_in_chat(
    request: ImageGenerationRequest,
    face_refinement_service: FaceRefinementService = Depends(lambda: FaceRefinementService(settings.SD_API_URL))
):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ base64 –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    try:
        logger.info(f"üéØ CHAT: –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (base64): {request.prompt}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ú –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º ADetailer
        generation_settings = GenerationSettings(
            prompt=request.prompt,
            negative_prompt=request.negative_prompt,
            use_default_prompts=request.use_default_prompts,
            seed=request.seed,
            steps=request.steps,
            width=request.width,
            height=request.height,
            cfg_scale=request.cfg_scale,
            sampler_name=request.sampler_name,
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –û–î–ù–û–ì–û –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            batch_size=1,
            n_iter=1,
            save_grid=False,
                                # –û–¢–ö–õ–Æ–ß–ê–ï–ú ADETAILER
                    use_adetailer=False
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result = await face_refinement_service.generate_image(generation_settings)
        
        # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if not result.images or len(result.images) == 0:
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        
        if len(result.images) > 1:
            logger.warning(f"üîß CHAT: –ü–æ–ª—É—á–µ–Ω–æ {len(result.images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ")
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_base64 = result.images[0]
        else:
            # –ë–µ—Ä–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_base64 = result.images[0]
        
        logger.info("‚úÖ CHAT: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (base64) —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        info_dict = {}
        try:
            import json
            info_dict = json.loads(result.info)
        except:
            pass
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON —Å base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        return {
            "success": True,
            "image": image_base64,
            "metadata": {
                "prompt": request.prompt,
                "seed": info_dict.get("seed", result.seed),
                "steps": info_dict.get("steps", request.steps or 40),
                "cfg_scale": info_dict.get("cfg_scale", request.cfg_scale or 6),
                "sampler_name": info_dict.get("sampler_name", request.sampler_name or "DPM++ SDE Karras"),
                "width": info_dict.get("width", request.width or 768),
                "height": info_dict.get("height", request.height or 768),
                "images_generated": 1  # –ù–û–í–û–ï: –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå CHAT: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (base64): {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
        )



@router.post("/{character_id}")
async def chat_with_character(
    character_id: int,
    request: SimpleChatRequest,
    db: AsyncSession = Depends(get_db)
):
    """
    –ß–∞—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –≤ –ë–î –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –ø–æ –µ–≥–æ ID.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã !—Ñ–æ—Ç–æ/!photo –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    db_character = await get_character_from_db(db, character_id)
    if db_character is None:
        raise HTTPException(status_code=404, detail="–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    character_config = CharacterConfig.from_orm(db_character)
    _ensure_character_filled(character_config)
    if chat_config.LOG_CHAT_REQUESTS:
        logger.info(
            "[CHAR] DB character loaded: name=%s | has_instr=%s | has_sys=%s | has_fmt=%s",
            character_config.name,
            bool(character_config.instructions and character_config.instructions.strip()),
            bool(character_config.system_prompt and character_config.system_prompt.strip()),
            bool(character_config.response_format and character_config.response_format.strip()),
        )
    message = request.message.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if message.lower().startswith(("!—Ñ–æ—Ç–æ", "!photo")):
        prompt = message.split(" ", 1)[1] if " " in message else "photo"
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        generation_settings = GenerationSettings(
            prompt=prompt,
            use_default_prompts=True
        )
        service = FaceRefinementService(settings.SD_API_URL)
        result = await service.generate_image(generation_settings)
        if not result.images or not result.images[0]:
            return {"response": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."}
        # LLM —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω
        llm_response = "–§–æ—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ."
        return {
            "response": llm_response,
            "image": result.images[0]
        }
    
    # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —á–∞—Ç–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
    messages = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if request.history:
        for msg in request.history:
            if msg.get('role') == 'user':
                messages.append(ChatMessage(
                    role=MessageRole.USER,
                    content=msg['content'],
                    timestamp=None
                ))
            elif msg.get('role') == 'assistant':
                messages.append(ChatMessage(
                    role=MessageRole.ASSISTANT,
                    content=msg['content'],
                    timestamp=None
                ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_message = ChatMessage(
        role=MessageRole.USER,
        content=message,
        timestamp=None
    )
    messages.append(user_message)
    
    # LLM —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω
    return {
        "response": f"–ü—Ä–∏–≤–µ—Ç! –Ø {character_config.name}. –°–µ—Ä–≤–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω.",
        "status": "LLM —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω"
    }


@router.post("/character/{character_name}")
async def chat_with_character_by_name(
    character_name: str,
    request: SimpleChatRequest,
    db: AsyncSession = Depends(get_db)
):
    """
    –ß–∞—Ç —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –ø–æ –∏–º–µ–Ω–∏ (–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö).
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã !—Ñ–æ—Ç–æ/!photo –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    from sqlalchemy import select
    from app.chat_bot.models.models import CharacterDB
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –∏–º–µ–Ω–∏
    result = await db.execute(
        select(CharacterDB).where(CharacterDB.name == character_name)
    )
    db_character = result.scalar_one_or_none()
    
    if db_character is None:
        raise HTTPException(status_code=404, detail="–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    character_config = CharacterConfig.from_orm(db_character)
    _ensure_character_filled(character_config)
    if chat_config.LOG_CHAT_REQUESTS:
        logger.info(
            "[CHAR] DB character loaded: name=%s | has_instr=%s | has_sys=%s | has_fmt=%s",
            character_config.name,
            bool(character_config.instructions and character_config.instructions.strip()),
            bool(character_config.system_prompt and character_config.system_prompt.strip()),
            bool(character_config.response_format and character_config.response_format.strip()),
        )
    message = request.message.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if message.lower().startswith(("!—Ñ–æ—Ç–æ", "!photo")):
        prompt = message.split(" ", 1)[1] if " " in message else "photo"
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        generation_settings = GenerationSettings(
            prompt=prompt,
            use_default_prompts=True
        )
        service = FaceRefinementService(settings.SD_API_URL)
        result = await service.generate_image(generation_settings)
        if not result.images or not result.images[0]:
            return {"response": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."}
        # LLM —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω
        llm_response = "–§–æ—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ."
        return {
            "response": llm_response,
            "image": result.images[0]
        }
    
    # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —á–∞—Ç–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
    messages = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if request.history:
        for msg in request.history:
            if msg.get('role') == 'user':
                messages.append(ChatMessage(
                    role=MessageRole.USER,
                    content=msg['content'],
                    timestamp=None
                ))
            elif msg.get('role') == 'assistant':
                messages.append(ChatMessage(
                    role=MessageRole.ASSISTANT,
                    content=msg['content'],
                    timestamp=None
                ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_message = ChatMessage(
        role=MessageRole.USER,
        content=message,
        timestamp=None
    )
    messages.append(user_message)
    
    # LLM —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω
    return {
        "response": f"–ü—Ä–∏–≤–µ—Ç! –Ø {character_config.name}. –°–µ—Ä–≤–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω.",
        "status": "LLM —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω"
    }


@router.post("/file-character/{character_name}")
async def chat_with_file_character(
    character_name: str,
    request: SimpleChatRequest
):
    """
    –ß–∞—Ç —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –∏–∑ —Ñ–∞–π–ª–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ app/chat_bot/models/characters/{character_name}.py
    """
    import os
    import importlib.util
    from typing import Dict, Any
    
    try:
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        characters_dir = "app/chat_bot/models/characters"
        file_path = os.path.join(characters_dir, f"{character_name}.py")
        
        if not os.path.exists(file_path):
            raise HTTPException(
                status_code=404, 
                detail=f"–§–∞–π–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
            )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        spec = importlib.util.spec_from_file_location(character_name, file_path)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if not hasattr(module, 'get_character_data'):
            raise HTTPException(
                status_code=500,
                detail=f"–§—É–Ω–∫—Ü–∏—è get_character_data() –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {character_name}.py"
            )
        
        character_data = module.get_character_data()
        
        # –°–æ–∑–¥–∞–µ–º CharacterConfig –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞
        character_config = CharacterConfig(
            name=character_data.get('name', character_name),
            instructions=(
                character_data.get('instructions')
                or "\n".join(
                    [
                        part for part in [
                            character_data.get('behavior'),
                            character_data.get('rules'),
                            character_data.get('speaking_style'),
                            character_data.get('mood')
                        ] if part
                    ]
                )
            ),
            system_prompt=(
                character_data.get('system_prompt')
                or "\n".join(
                    [
                        part for part in [
                            character_data.get('context'),
                            character_data.get('additional_context')
                            if isinstance(character_data.get('additional_context'), str)
                            else None
                        ] if part
                    ]
                )
            ),
            response_format=(
                character_data.get('response_format')
                or f"Answer strictly as {character_data.get('name', character_name)} in first person, without name prefixes."
            )
        )
        
        message = request.message.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if message.lower().startswith(("!—Ñ–æ—Ç–æ", "!photo")):
            prompt = message.split(" ", 1)[1] if " " in message else "photo"
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            generation_settings = GenerationSettings(
                prompt=prompt,
                use_default_prompts=True
            )
            service = FaceRefinementService(settings.SD_API_URL)
            result = await service.generate_image(generation_settings)
            if not result.images or not result.images[0]:
                return {"response": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."}
            # LLM —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω
            llm_response = "–§–æ—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ."
            return {
                "response": llm_response,
                "image": result.images[0]
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ text-generation-webui
        if not await textgen_webui_service.check_connection():
            return {
                "response": f"–ü—Ä–∏–≤–µ—Ç! –Ø {character_config.name}. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä–≤–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ text-generation-webui –∑–∞–ø—É—â–µ–Ω.",
                "status": "text-generation-webui –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            }
        
        # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        history = request.history or []
        prompt = textgen_webui_service.build_character_prompt(
            character_data=character_data,
            user_message=message,
            history=history
        )
        
        logger.info(f"ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_name}: {message[:50]}...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ text-generation-webui
        response = await textgen_webui_service.generate_text(
            prompt=prompt,
            max_tokens=chat_config.MYTHOMAX_MAX_TOKENS,
            temperature=chat_config.MYTHOMAX_TEMPERATURE,
            top_p=chat_config.MYTHOMAX_TOP_P,
            top_k=chat_config.MYTHOMAX_TOP_K,
            repeat_penalty=chat_config.MYTHOMAX_REPEAT_PENALTY,
            presence_penalty=chat_config.MYTHOMAX_PRESENCE_PENALTY
        )
        
        if response:
            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_name} ({len(response)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return {
                "response": response,
                "character": character_config.name,
                "model": chat_config.TEXTGEN_WEBUI_MODEL,
                "prompt_length": len(prompt),
                "response_length": len(response)
            }
        else:
            return {
                "response": f"–ü—Ä–∏–≤–µ—Ç! –Ø {character_config.name}. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                "status": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
            }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ —Å —Ñ–∞–π–ª–æ–≤—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º {character_name}: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {str(e)}"
        )


@router.post("/stream/file-character/{character_name}")
async def chat_with_file_character_stream(
    character_name: str,
    request: SimpleChatRequest
):
    """
    Streaming —á–∞—Ç —Å —Ñ–∞–π–ª–æ–≤—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º - –æ—Ç–≤–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø–æ –º–µ—Ä–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if character_name.lower() == "anna":
            from app.chat_bot.models.characters.anna import get_character_data
            character_data = get_character_data()
        else:
            raise HTTPException(
                status_code=404, 
                detail=f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {character_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        character_config = CharacterConfig(
            name=character_data.get("name", character_name),
            instructions=(
                character_data.get("instructions")
                or "\n".join(
                    [
                        part for part in [
                            character_data.get("behavior"),
                            character_data.get("rules"),
                            character_data.get("speaking_style"),
                            character_data.get("mood"),
                        ] if part
                    ]
                )
            ),
            system_prompt=(
                character_data.get("system_prompt")
                or "\n".join(
                    [
                        part for part in [
                            character_data.get("context"),
                            character_data.get("additional_context")
                            if isinstance(character_data.get("additional_context"), str)
                            else None,
                        ] if part
                    ]
                )
            ),
            response_format=(
                character_data.get("response_format")
                or f"Answer strictly as {character_data.get('name', character_name)} in first person, without name prefixes."
            ),
        )
        
        message = request.message.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ text-generation-webui
        if not await textgen_webui_service.check_connection():
            async def generate_stream():
                """Streaming –æ—Ç–≤–µ—Ç –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LLM —Å–µ—Ä–≤–∏—Å–∞."""
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                    yield f"data: {json.dumps({'chunk': '', 'done': False, 'start': True})}\n\n"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                    message = f"–ü—Ä–∏–≤–µ—Ç! –Ø {character_config.name}. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä–≤–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ text-generation-webui –∑–∞–ø—É—â–µ–Ω."
                    chunk_data = {
                        'chunk': message, 
                        'done': False, 
                        'chunk_count': 1
                    }
                    yield f"data: {json.dumps(chunk_data)}\n\n"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    final_data = {
                        'chunk': '', 
                        'done': True, 
                        'total_chunks': 1,
                        'success': True
                    }
                    yield f"data: {json.dumps(final_data)}\n\n"
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ streaming —á–∞—Ç–∞: {e}")
                    error_data = json.dumps({
                        'error': str(e),
                        'done': True,
                        'success': False
                    })
                    yield f"data: {error_data}\n\n"
            
            return StreamingResponse(
                generate_stream(),
                media_type="text/event-stream",
                headers={
                    "Cache-Control": "no-cache",
                    "Connection": "keep-alive"
                }
            )
        
        # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        history = request.history or []
        prompt = textgen_webui_service.build_character_prompt(
            character_data=character_data,
            user_message=message,
            history=history
        )
        
        logger.info(f"ü§ñ Streaming: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_name}: {message[:50]}...")
        
        async def generate_stream():
            """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç LLM —Å–µ—Ä–≤–∏—Å–∞."""
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                yield f"data: {json.dumps({'chunk': '', 'done': False, 'start': True})}\n\n"
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ—Ç–æ–∫–æ–º
                async for chunk in textgen_webui_service.generate_text_stream(
                    prompt=prompt,
                    max_tokens=chat_config.MYTHOMAX_MAX_TOKENS,
                    temperature=chat_config.MYTHOMAX_TEMPERATURE,
                    top_p=chat_config.MYTHOMAX_TOP_P,
                    top_k=chat_config.MYTHOMAX_TOP_K,
                    repeat_penalty=chat_config.MYTHOMAX_REPEAT_PENALTY,
                    presence_penalty=chat_config.MYTHOMAX_PRESENCE_PENALTY
                ):
                    if chunk:
                        chunk_data = {
                            'chunk': chunk, 
                            'done': False, 
                            'chunk_count': 1
                        }
                        yield f"data: {json.dumps(chunk_data)}\n\n"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                final_data = {
                    'chunk': '', 
                    'done': True, 
                    'total_chunks': 1,
                    'success': True
                }
                yield f"data: {json.dumps(final_data)}\n\n"
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ streaming —á–∞—Ç–∞: {e}")
                error_data = json.dumps({
                    'error': str(e),
                    'done': True,
                    'success': False
                })
                yield f"data: {error_data}\n\n"
        
        return StreamingResponse(
            generate_stream(),
            media_type="text/event-stream",
            headers={
                "Cache-Control": "no-cache",
                "Connection": "keep-alive"
            }
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ streaming —á–∞—Ç–µ —Å —Ñ–∞–π–ª–æ–≤—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º {character_name}: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {str(e)}"
        )


@router.post("/stream_legacy/{character_id}")
async def chat_with_character_stream(
    character_id: int,
    request: SimpleChatRequest,
    db: AsyncSession = Depends(get_db)
):
    """
    Streaming —á–∞—Ç —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º - –æ—Ç–≤–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø–æ –º–µ—Ä–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
    """
    db_character = await get_character_from_db(db, character_id)
    if db_character is None:
        raise HTTPException(status_code=404, detail="–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    character_config = CharacterConfig.from_orm(db_character)
    message = request.message.strip()
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    messages = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if request.history:
        for msg in request.history:
            if msg.get('role') == 'user':
                messages.append(ChatMessage(
                    role=MessageRole.USER,
                    content=msg['content'],
                    timestamp=None
                ))
            elif msg.get('role') == 'assistant':
                messages.append(ChatMessage(
                    role=MessageRole.ASSISTANT,
                    content=msg['content'],
                    timestamp=None
                ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_message = ChatMessage(
        role=MessageRole.USER,
        content=message,
        timestamp=None
    )
    messages.append(user_message)
    
    async def generate_stream():
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è streaming –æ—Ç–≤–µ—Ç–∞ - LLM —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            message = f"–ü—Ä–∏–≤–µ—Ç! –Ø {character_config.name}. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LLM —Å–µ—Ä–≤–∏—Å–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
            yield f"data: {json.dumps({'chunk': message, 'done': False})}\n\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            yield f"data: {json.dumps({'chunk': '', 'done': True})}\n\n"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ streaming —á–∞—Ç–∞: {e}")
            yield f"data: {json.dumps({'error': str(e), 'done': True})}\n\n"
    
    return StreamingResponse(
        generate_stream(),
        media_type="text/event-stream",
        headers={
            "Cache-Control": "no-cache",
            "Connection": "keep-alive"
        }
    ) 


@router.post("/stream/name/{character_name}")
async def chat_with_character_stream_by_name(
    character_name: str,
    request: SimpleChatRequest,
    db: AsyncSession = Depends(get_db),
):
    """Streaming —á–∞—Ç –ø–æ –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.

    –ü–æ–≤–µ–¥–µ–Ω–∏–µ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:
    - –ï—Å–ª–∏ request.session_id –∑–∞–¥–∞–Ω ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º/—Å–æ–∑–¥–∞—ë–º persistent-—Å–µ—Å—Å–∏—é (DB),
      –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    - –ï—Å–ª–∏ request.session_id –Ω–µ –∑–∞–¥–∞–Ω ‚Üí —Ä–∞–±–æ—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏ (ephemeral):
      –ë–î –Ω–µ —á–∏—Ç–∞–µ–º –∏ –Ω–µ –ø–∏—à–µ–º, –∏—Å—Ç–æ—Ä–∏—è –±–µ—Ä—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ request.history.
    """
    # –ü–µ—Ä—Å–æ–Ω–∞–∂ -> –∫–æ–Ω—Ñ–∏–≥ –ø–æ –∏–º–µ–Ω–∏
    result = await db.execute(select(CharacterDB).where(CharacterDB.name == character_name))
    db_character = result.scalar_one_or_none()
    if not db_character:
        raise HTTPException(status_code=404, detail="–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    character_config = CharacterConfig.from_orm(db_character)
    _ensure_character_filled(character_config)
    if chat_config.LOG_CHAT_REQUESTS:
        logger.info(
            f"[CHAR] DB character loaded by name: name={character_config.name} | "
            f"has_instr={bool(character_config.instructions and character_config.instructions.strip())} | "
            f"has_sys={bool(character_config.system_prompt and character_config.system_prompt.strip())} | "
            f"has_fmt={bool(character_config.response_format and character_config.response_format.strip())}"
        )
    
    messages: List[ChatMessage] = []
    session: ChatSession | None = None
    character_id = db_character.id

    if request.session_id:
        # –ü–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É session_id –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é persistent-—Å–µ—Å—Å–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
        result = await db.execute(
            select(ChatSession).where(
                (ChatSession.character_id == character_id)
                & (ChatSession.user_id == request.session_id)
            )
        )
        session = result.scalar_one_or_none()
        if session is None:
            session = ChatSession(character_id=character_id, user_id=request.session_id)
            db.add(session)
            await db.commit()
            await db.refresh(session)
        if chat_config.LOG_CHAT_REQUESTS:
            logger.info(
                f"[CHAR] Using persistent session: character_id={character_id}, user_id={request.session_id}"
            )

        # –ì—Ä—É–∑–∏–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è persistent-—Å–µ—Å—Å–∏–∏
        result = await db.execute(
            select(ChatMessageDB)
            .where(ChatMessageDB.session_id == session.id)
            .order_by(ChatMessageDB.id.asc())
        )
        history_rows = result.scalars().all()
        for row in history_rows:
            role = MessageRole.USER if row.role == "user" else MessageRole.ASSISTANT
            messages.append(ChatMessage(role=role, content=row.content, timestamp=None))
    else:
        # –ù–µ—Ç session_id: –≤—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é (–ø—É—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è), –∏—Å–ø–æ–ª—å–∑—É–µ–º –ë–î
        session = ChatSession(character_id=character_id, user_id=None)
        db.add(session)
        await db.commit()
        await db.refresh(session)
        if chat_config.LOG_CHAT_REQUESTS:
            logger.info(
                f"[CHAR] Created fresh session without user_id for character_id={character_id}"
            )

    # –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_text = request.message.strip()
    if not user_text:
        raise HTTPException(status_code=400, detail="–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

    messages.append(ChatMessage(role=MessageRole.USER, content=user_text, timestamp=None))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.add(ChatMessageDB(session_id=session.id, role="user", content=user_text))
    await db.commit()

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ text-generation-webui
    try:
        from app.chat_bot.services.textgen_webui_service import TextGenWebUIService
        
        async with TextGenWebUIService() as webui_service:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if not await webui_service.check_connection():
                fallback_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ text-generation-webui –∑–∞–ø—É—â–µ–Ω."
                db.add(ChatMessageDB(session_id=session.id, role="assistant", content=fallback_response))
                await db.commit()
                
                async def generate_stream():
                    """Streaming –æ—Ç–≤–µ—Ç –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LLM —Å–µ—Ä–≤–∏—Å–∞."""
                    yield f"data: {json.dumps({'chunk': fallback_response, 'done': True})}\n\n"
                    return
                
                return StreamingResponse(
                    generate_stream(),
                    media_type="text/plain",
                    headers={"Cache-Control": "no-cache", "Connection": "keep-alive"}
                )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º build_character_prompt –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
            history = [{"role": msg.role.value, "content": msg.content} for msg in messages[:-1]]
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º CharacterConfig –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è build_character_prompt
            character_dict = {
                "name": character_config.name,
                "system_prompt": character_config.system_prompt or "",
                "instructions": character_config.instructions,
                "response_format": character_config.response_format or ""
            }
            
            alpaca_prompt = webui_service.build_character_prompt(
                character_dict, 
                user_text, 
                history=history
            )
            
            if chat_config.LOG_CHAT_REQUESTS:
                logger.info(f"ü§ñ Streaming: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_name}: {user_text[:50]}...")
                logger.info(f"üìù Alpaca prompt length: {len(alpaca_prompt)} chars")
                logger.info(f"üìö History messages: {len(history)}")

            # ============================================================================
            # ‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –ö–û–î - –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨! ‚ö†Ô∏è
            # ============================================================================
            # –≠—Ç–æ—Ç –±–ª–æ–∫ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ streaming —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —á–∞—Ç-–±–æ—Ç–∞.
            # –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–¥–µ—Å—å –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É streaming —á–∞—Ç–∞.
            # 
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–∞ webui_service.generate_stream() –¥–æ–ª–∂–Ω—ã —Ç–æ—á–Ω–æ
            # —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞—Ç—É—Ä–µ –º–µ—Ç–æ–¥–∞ –≤ TextGenWebUIService.
            # 
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´:
            # - max_tokens (–ù–ï max_new_tokens!)
            # - temperature, top_p, top_k, repeat_penalty
            # - –ù–ï –¥–æ–±–∞–≤–ª—è—Ç—å stream=True (—ç—Ç–æ —É–∂–µ streaming –º–µ—Ç–æ–¥)
            # ============================================================================
            
            async def generate_stream():
                try:
                    async for chunk in webui_service.generate_stream(
                        prompt=alpaca_prompt,
                        max_tokens=request.max_tokens or 512,
                        temperature=request.temperature or 0.7,
                        top_p=request.top_p or 0.9,
                        top_k=request.top_k or 40,
                        repeat_penalty=request.repeat_penalty or 1.1
                    ):
                        if chunk and chunk.strip():
                            yield f"data: {json.dumps({'chunk': chunk, 'done': False})}\n\n"
                    
                    # –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    yield f"data: {json.dumps({'chunk': '', 'done': True})}\n\n"
                    
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ streaming —á–∞—Ç–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º {character_name}: {str(e)}")
                    yield f"data: {json.dumps({'error': error_msg, 'done': True})}\n\n"
                finally:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ë–î
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ —Å—Ç—Ä–∏–º–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                        pass
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
            
            # ============================================================================
            # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –ö–û–î –ó–ê–í–ï–†–®–ï–ù
            # ============================================================================

            return StreamingResponse(
                generate_stream(),
                media_type="text/plain",
                headers={"Cache-Control": "no-cache", "Connection": "keep-alive"}
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ streaming —á–∞—Ç–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º {character_name}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")


@router.post("/stream/{character_id}")
async def chat_with_character_stream(
    character_id: int,
    request: SimpleChatRequest,
    db: AsyncSession = Depends(get_db),
):
    """Streaming —á–∞—Ç.

    –ü–æ–≤–µ–¥–µ–Ω–∏–µ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:
    - –ï—Å–ª–∏ request.session_id –∑–∞–¥–∞–Ω ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º/—Å–æ–∑–¥–∞—ë–º persistent-—Å–µ—Å—Å–∏—é (DB),
      –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    - –ï—Å–ª–∏ request.session_id –Ω–µ –∑–∞–¥–∞–Ω ‚Üí —Ä–∞–±–æ—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏ (ephemeral):
      –ë–î –Ω–µ —á–∏—Ç–∞–µ–º –∏ –Ω–µ –ø–∏—à–µ–º, –∏—Å—Ç–æ—Ä–∏—è –±–µ—Ä—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ request.history.
    """
    # –ü–µ—Ä—Å–æ–Ω–∞–∂ -> –∫–æ–Ω—Ñ–∏–≥
    result = await db.execute(select(CharacterDB).where(CharacterDB.id == character_id))
    db_character = result.scalar_one_or_none()
    if not db_character:
        raise HTTPException(status_code=404, detail="–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    character_config = CharacterConfig.from_orm(db_character)
    _ensure_character_filled(character_config)
    if chat_config.LOG_CHAT_REQUESTS:
        logger.info(
            f"[CHAR] DB character loaded: name={character_config.name} | "
            f"has_instr={bool(character_config.instructions and character_config.instructions.strip())} | "
            f"has_sys={bool(character_config.system_prompt and character_config.system_prompt.strip())} | "
            f"has_fmt={bool(character_config.response_format and character_config.response_format.strip())}"
        )
    
    messages: List[ChatMessage] = []
    session: ChatSession | None = None

    if request.session_id:
        # –ü–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É session_id –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é persistent-—Å–µ—Å—Å–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
        result = await db.execute(
            select(ChatSession).where(
                (ChatSession.character_id == character_id)
                & (ChatSession.user_id == request.session_id)
            )
        )
        session = result.scalar_one_or_none()
        if session is None:
            session = ChatSession(character_id=character_id, user_id=request.session_id)
            db.add(session)
            await db.commit()
            await db.refresh(session)
        if chat_config.LOG_CHAT_REQUESTS:
            logger.info(
                f"[CHAR] Using persistent session: character_id={character_id}, user_id={request.session_id}"
            )

        # –ì—Ä—É–∑–∏–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è persistent-—Å–µ—Å—Å–∏–∏
        result = await db.execute(
            select(ChatMessageDB)
            .where(ChatMessageDB.session_id == session.id)
            .order_by(ChatMessageDB.id.asc())
        )
        history_rows = result.scalars().all()
        for row in history_rows:
            role = MessageRole.USER if row.role == "user" else MessageRole.ASSISTANT
            messages.append(ChatMessage(role=role, content=row.content, timestamp=None))
    else:
        # –ù–µ—Ç session_id: –≤—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é (–ø—É—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è), –∏—Å–ø–æ–ª—å–∑—É–µ–º –ë–î
        session = ChatSession(character_id=character_id, user_id=None)
        db.add(session)
        await db.commit()
        await db.refresh(session)
        if chat_config.LOG_CHAT_REQUESTS:
            logger.info(
                f"[CHAR] Created fresh session without user_id for character_id={character_id}"
            )

    # –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_text = request.message.strip()
    if not user_text:
        raise HTTPException(status_code=400, detail="–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

    messages.append(ChatMessage(role=MessageRole.USER, content=user_text, timestamp=None))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.add(ChatMessageDB(session_id=session.id, role="user", content=user_text))
    await db.commit()

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ text-generation-webui
    try:
        from app.chat_bot.services.textgen_webui_service import TextGenWebUIService
        
        async with TextGenWebUIService() as webui_service:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if not await webui_service.check_connection():
                fallback_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ text-generation-webui –∑–∞–ø—É—â–µ–Ω."
                db.add(ChatMessageDB(session_id=session.id, role="assistant", content=fallback_response))
                await db.commit()
                
                async def generate_stream():
                    """Streaming –æ—Ç–≤–µ—Ç –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LLM —Å–µ—Ä–≤–∏—Å–∞."""
                    try:
                        message = f"–ü—Ä–∏–≤–µ—Ç! –Ø {character_config.name}. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä–≤–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
                        yield f"data: {json.dumps({'chunk': message, 'done': True}, ensure_ascii=False)}\n\n"
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ streaming —á–∞—Ç–∞: {e}")
                        yield f"data: {json.dumps({'error': str(e), 'done': True}, ensure_ascii=False)}\n\n"
                
                return StreamingResponse(
                    generate_stream(),
                    media_type="text/event-stream",
                    headers={"Cache-Control": "no-cache", "Connection": "keep-alive"}
                )
            
            # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç –¥–ª—è MythoMax —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º build_character_prompt
            history = [{"role": msg.role.value, "content": msg.content} for msg in messages[:-1]]
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º CharacterConfig –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è build_character_prompt
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –∏–∑ CharacterConfig
            character_dict = {
                "name": character_config.name,
                "system_prompt": character_config.system_prompt or "",
                "instructions": character_config.instructions,
                "response_format": character_config.response_format or ""
            }
            
            prompt = webui_service.build_character_prompt(
                character_dict, 
                user_text, 
                history=history
            )
            
            # ============================================================================
            # ‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –ö–û–î - –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨! ‚ö†Ô∏è
            # ============================================================================
            # –≠—Ç–æ—Ç –±–ª–æ–∫ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ MythoMax streaming —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.
            # –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–¥–µ—Å—å –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É streaming —á–∞—Ç–∞.
            # 
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–∞ webui_service.generate_text_stream() –¥–æ–ª–∂–Ω—ã —Ç–æ—á–Ω–æ
            # —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞—Ç—É—Ä–µ –º–µ—Ç–æ–¥–∞ –≤ TextGenWebUIService.
            # 
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´:
            # - max_tokens (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MYTHOMAX_*)
            # - temperature, top_p, top_k, repeat_penalty, presence_penalty
            # - –ù–ï –¥–æ–±–∞–≤–ª—è—Ç—å stream=True (—ç—Ç–æ —É–∂–µ streaming –º–µ—Ç–æ–¥)
            # ============================================================================
            
            async def generate_stream():
                """–ù–∞—Å—Ç–æ—è—â–∏–π streaming –æ—Ç–≤–µ—Ç –æ—Ç LLM —Å–µ—Ä–≤–∏—Å–∞."""
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π —Å—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç text-generation-webui
                    full_response = ""
                    async for chunk in webui_service.generate_text_stream(
                         prompt=prompt,
                         max_tokens=chat_config.MYTHOMAX_MAX_TOKENS,
                         temperature=chat_config.MYTHOMAX_TEMPERATURE,
                         top_p=chat_config.MYTHOMAX_TOP_P,
                         top_k=chat_config.MYTHOMAX_TOP_K,
                         repeat_penalty=chat_config.MYTHOMAX_REPEAT_PENALTY,
                         presence_penalty=chat_config.MYTHOMAX_PRESENCE_PENALTY
                     ):
                         if chunk:
                             full_response += chunk
                             # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                             logger.info(f"üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞–Ω–∫: {len(chunk)} —Å–∏–º–≤–æ–ª–æ–≤: {chunk[:50]}...")
                             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                             yield f"data: {json.dumps({'chunk': chunk, 'done': False}, ensure_ascii=False)}\n\n"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    yield f"data: {json.dumps({'chunk': '', 'done': True}, ensure_ascii=False)}\n\n"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ë–î
                    if full_response:
                        db.add(ChatMessageDB(session_id=session.id, role="assistant", content=full_response))
                        await db.commit()
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ streaming —á–∞—Ç–∞: {e}")
                    yield f"data: {json.dumps({'error': str(e), 'done': True}, ensure_ascii=False)}\n\n"
            
            # ============================================================================
            # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –ö–û–î –ó–ê–í–ï–†–®–ï–ù
            # ============================================================================
            
            return StreamingResponse(
                generate_stream(),
                media_type="text/event-stream",
                headers={"Cache-Control": "no-cache", "Connection": "keep-alive"}
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ text-generation-webui: {e}")
        fallback_response = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        db.add(ChatMessageDB(session_id=session.id, role="assistant", content=fallback_response))
        await db.commit()
        
        async def generate_stream():
            """Streaming –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
            try:
                message = f"–ü—Ä–∏–≤–µ—Ç! –Ø {character_config.name}. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."
                yield f"data: {json.dumps({'chunk': message, 'done': True}, ensure_ascii=False)}\n\n"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ streaming —á–∞—Ç–∞: {e}")
                yield f"data: {json.dumps({'error': str(e), 'done': True}, ensure_ascii=False)}\n\n"
        
        return StreamingResponse(
            generate_stream(),
            media_type="text/event-stream",
            headers={"Cache-Control": "no-cache", "Connection": "keep-alive"}
        ) 


@router.post("/load-file-character/{character_name}")
async def load_file_character_to_db(
    character_name: str,
    db: AsyncSession = Depends(get_db)
):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∞–π–ª–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —á–∞—Ç–∞.
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if character_name.lower() == "anna":
            from app.chat_bot.models.characters.anna import get_character_data
            character_data = get_character_data()
        else:
            raise HTTPException(
                status_code=404, 
                detail=f"–§–∞–π–ª–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ {character_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤ –ë–î
        existing_character = await db.execute(
            select(CharacterDB).where(CharacterDB.name == character_data["name"])
        )
        existing_character = existing_character.scalar_one_or_none()
        
        if existing_character:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            existing_character.instructions = character_data["instructions"]
            existing_character.system_prompt = character_data["system_prompt"]
            existing_character.response_format = character_data["response_format"]
                            # existing_character.description = character_data.get("description", "")  # –£–±–∏—Ä–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—è description –Ω–µ—Ç
            existing_character.personality = character_data.get("personality", "")
            existing_character.scenario = character_data.get("scenario", "")
            existing_character.first_mes = character_data.get("first_mes", "")
            
            await db.commit()
            await db.refresh(existing_character)
            
            logger.info(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ {character_name} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î")
            
            return {
                "message": f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {character_name} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                "character": {
                    "id": existing_character.id,
                    "name": existing_character.name,
                    "instructions": existing_character.instructions,
                    "system_prompt": existing_character.system_prompt,
                    "response_format": existing_character.response_format
                }
            }
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            new_character = CharacterDB(
                name=character_data["name"],
                instructions=character_data["instructions"],
                system_prompt=character_data["system_prompt"],
                response_format=character_data["response_format"],
                description=character_data.get("description", ""),
                personality=character_data.get("personality", ""),
                scenario=character_data.get("scenario", ""),
                first_mes=character_data.get("first_mes", ""),
                is_active=True
            )
            
            db.add(new_character)
            await db.commit()
            await db.refresh(new_character)
            
            logger.info(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ {character_name} –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ë–î —Å ID {new_character.id}")
            
            return {
                "message": f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {character_name} –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
                "character": {
                    "id": new_character.id,
                    "name": new_character.name,
                    "instructions": new_character.instructions,
                    "system_prompt": new_character.system_prompt,
                    "response_format": new_character.response_format
                }
            }
            
    except HTTPException:
        raise
    except Exception as e:
        await db.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_name}: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {str(e)}"
        ) 