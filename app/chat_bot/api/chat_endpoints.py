#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ chat endpoints - —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω endpoint –¥–ª—è —á–∞—Ç–∞
"""

import json
import logging
from typing import List, Dict, Optional
from fastapi import APIRouter, Depends, HTTPException
from fastapi.responses import StreamingResponse
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from app.chat_bot.config.chat_config import chat_config
from app.chat_bot.schemas.chat import SimpleChatRequest, ChatMessage
from app.chat_bot.services.textgen_webui_service import textgen_webui_service
from app.chat_bot.schemas.chat import CharacterConfig
from app.database.db_depends import get_db
from app.chat_bot.models.models import CharacterDB, ChatSession, ChatMessageDB
logger = logging.getLogger(__name__)


def _ensure_character_filled(character_config: CharacterConfig) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–∑ –ë–î –∏–º–µ–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ Alpaca-–ø–æ–ª—è.
    –ï—Å–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ/–ø—Ä–æ–±–µ–ª—å–Ω—ã–µ, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç HTTPException 422.
    """
    required = {
        "prompt": character_config.prompt or "",
    }
    missing = [k for k, v in required.items() if not v.strip()]
    if missing:
        from fastapi import HTTPException
        raise HTTPException(
            status_code=422,
            detail=(
                "–ü–µ—Ä—Å–æ–Ω–∞–∂ –≤ –ë–î –∏–º–µ–µ—Ç –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è: "
                + ", ".join(missing)
            ),
        )

router = APIRouter(prefix="/api/v1/chat", tags=["Chat"])

# Post-processor —É–¥–∞–ª–µ–Ω - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è


@router.get("/status")
async def get_chat_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞."""
    try:
        is_connected = await textgen_webui_service.check_connection()
        return {
            "status": "ok" if is_connected else "error",
            "textgen_webui_connected": is_connected,
            "message": "–°–µ—Ä–≤–∏—Å —á–∞—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç" if is_connected else "–°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return {
            "status": "error",
            "textgen_webui_connected": False,
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ /api/v1/generate-image/ –≤ main.py


@router.post("/stream/name/{character_name}")
async def chat_with_character_stream_by_name(
    character_name: str,
    request: SimpleChatRequest,
    db: AsyncSession = Depends(get_db),
):
    """–ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô streaming endpoint –¥–ª—è —á–∞—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.

    –ü–æ–≤–µ–¥–µ–Ω–∏–µ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:
    - –ï—Å–ª–∏ request.session_id –∑–∞–¥–∞–Ω ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º/—Å–æ–∑–¥–∞—ë–º persistent-—Å–µ—Å—Å–∏—é (DB),
      –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    - –ï—Å–ª–∏ request.session_id –Ω–µ –∑–∞–¥–∞–Ω ‚Üí —Ä–∞–±–æ—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏ (ephemeral):
      –ë–î –Ω–µ —á–∏—Ç–∞–µ–º –∏ –Ω–µ –ø–∏—à–µ–º, –∏—Å—Ç–æ—Ä–∏—è –±–µ—Ä—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ request.history.
    """
    # –ü–µ—Ä—Å–æ–Ω–∞–∂ -> –∫–æ–Ω—Ñ–∏–≥ –ø–æ –∏–º–µ–Ω–∏ (–ø–æ–∏—Å–∫ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    result = await db.execute(select(CharacterDB).where(CharacterDB.name.ilike(character_name)))
    db_character = result.scalar_one_or_none()
    if not db_character:
        raise HTTPException(status_code=404, detail="–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    character_config = CharacterConfig.from_orm(db_character)
    _ensure_character_filled(character_config)
    
    messages: List[ChatMessage] = []
    session: ChatSession | None = None
    character_id = db_character.id

    if request.session_id:
        # –ü–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É session_id –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é persistent-—Å–µ—Å—Å–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
        result = await db.execute(
            select(ChatSession).where(
                (ChatSession.character_id == character_id)
                & (ChatSession.user_id == request.session_id)
            )
        )
        session = result.scalar_one_or_none()
        if session is None:
            session = ChatSession(character_id=character_id, user_id=request.session_id)
            db.add(session)
            await db.commit()
            await db.refresh(session)

        # –ì—Ä—É–∑–∏–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è persistent-—Å–µ—Å—Å–∏–∏
        if session:
            result = await db.execute(
                select(ChatMessageDB)
                .where(ChatMessageDB.session_id == session.id)
                .order_by(ChatMessageDB.timestamp.asc())
                .limit(chat_config.MAX_HISTORY_LENGTH)
            )
            db_messages = result.scalars().all()
            messages = [
                ChatMessage(role=msg.role, content=msg.content)
                for msg in db_messages
            ]
    else:
        # –î–ª—è ephemeral-—Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ request.history
        messages = request.history or []

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    messages.append(ChatMessage(role="user", content=request.message))

    # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç
    message = request.message
    history = messages[:-1]  # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞

    # –°–æ–∑–¥–∞–µ–º Alpaca –ø—Ä–æ–º–ø—Ç
    character_data = {
        "prompt": character_config.prompt
    }
    alpaca_prompt = textgen_webui_service.build_character_prompt(
        character_data=character_data,
        user_message=message,
        history=history
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ text-generation-webui
    if not await textgen_webui_service.check_connection():
        fallback_response = f"–ü—Ä–∏–≤–µ—Ç! –Ø {character_config.name}. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä–≤–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º fallback-–æ—Ç–≤–µ—Ç –≤ –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Å—Å–∏—è
        if session:
            db.add(ChatMessageDB(session_id=session.id, role="assistant", content=fallback_response))
            await db.commit()
            
        async def generate_stream():
            """Streaming –æ—Ç–≤–µ—Ç –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LLM —Å–µ—Ä–≤–∏—Å–∞."""
            yield f"data: {json.dumps({'chunk': fallback_response, 'done': True})}\n\n"
            return
        
        return StreamingResponse(
            generate_stream(),
            media_type="text/plain",
            headers={"Cache-Control": "no-cache", "Connection": "keep-alive"}
        )

    # –≠—Ç–æ—Ç –±–ª–æ–∫ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ streaming —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —á–∞—Ç-–±–æ—Ç–∞.
    # –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–¥–µ—Å—å –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É streaming —á–∞—Ç–∞.
    # 
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–∞ webui_service.generate_stream() –¥–æ–ª–∂–Ω—ã —Ç–æ—á–Ω–æ
    # —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞—Ç—É—Ä–µ –º–µ—Ç–æ–¥–∞ –≤ TextGenWebUIService.
    # 
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´:
    # - –ù–ï –¥–æ–±–∞–≤–ª—è—Ç—å stream=True (—ç—Ç–æ —É–∂–µ streaming –º–µ—Ç–æ–¥)
    # ============================================================================
    
    async def generate_stream():
        """–£–õ–£–ß–®–ï–ù–ù–´–ô streaming –æ—Ç–≤–µ—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏."""
        try:
            # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
            is_continue_story = message.lower().strip() == "continue the story briefly"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
            last_response_complete = True
            if is_continue_story and history:
                last_assistant_msg = None
                for msg in reversed(history):
                    if msg.get('role') == 'assistant':
                        last_assistant_msg = msg.get('content', '')
                        break
                
                if last_assistant_msg:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    last_response_complete = _is_response_complete(last_assistant_msg)
                    if not last_response_complete:
                        logger.info(f"üìñ Continue the story: –ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")
            
            # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç
            full_response = ""
            
            async for chunk in textgen_webui_service.generate_text_stream(
                prompt=alpaca_prompt,
                max_tokens=request.max_tokens or chat_config.DEFAULT_MAX_TOKENS,
                temperature=request.temperature or chat_config.DEFAULT_TEMPERATURE,
                top_p=request.top_p or chat_config.DEFAULT_TOP_P,
                top_k=request.top_k or chat_config.DEFAULT_TOP_K,
                repeat_penalty=request.repeat_penalty or chat_config.DEFAULT_REPEAT_PENALTY,
                presence_penalty=chat_config.DEFAULT_PRESENCE_PENALTY
            ):
                if chunk:
                    full_response += chunk
            
            # –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ—Ç–≤–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ
            final_response = _ensure_response_completion(full_response, is_continue_story, last_response_complete)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ —á–∞—Å—Ç—è–º
            buffer = ""
            for char in final_response:
                buffer += char
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä, –∫–æ–≥–¥–∞ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –ø—Ä–æ–±–µ–ª/–∑–Ω–∞–∫ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
                if len(buffer) > 20 or ' ' in buffer or '\n' in buffer or '.' in buffer or ',' in buffer or '!' in buffer or '?' in buffer:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä
                    yield f"data: {json.dumps({'chunk': buffer, 'done': False}, ensure_ascii=False)}\n\n"
                    buffer = ""  # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –±—É—Ñ–µ—Ä
            if buffer:
                yield f"data: {json.dumps({'chunk': buffer, 'done': False}, ensure_ascii=False)}\n\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            yield f"data: {json.dumps({'chunk': '', 'done': True}, ensure_ascii=False)}\n\n"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ë–î
            if session:
                db.add(ChatMessageDB(session_id=session.id, role="assistant", content=final_response))
                await db.commit()
            
            logger.info(f"[OK] Streaming: –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º")
            
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –≤ streaming –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            error_data = json.dumps({'error': str(e), 'done': True}, ensure_ascii=False)
            yield f"data: {error_data}\n\n"
    
    def _is_response_complete(response: str) -> bool:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.
        
        Args:
            response: –û—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
        """
        if not response or not response.strip():
            return False
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        response = response.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è–º–∏
        natural_endings = ['.', '!', '?', '...', '‚Äî', '‚Äì', '~', '*']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        for ending in natural_endings:
            if response.endswith(ending):
                return True
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ù–ï –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—É–Ω–∫—Ç—É–∞—Ü–∏–µ–π, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º
        words = response.split()
        if len(words) > 0:
            last_word = words[-1]
            
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—É–Ω–∫—Ç—É–∞—Ü–∏–µ–π, —ç—Ç–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            if not any(last_word.endswith(p) for p in natural_endings):
                # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: –µ—Å–ª–∏ —ç—Ç–æ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–ª–æ–≤–æ (1-2 —Å–∏–º–≤–æ–ª–∞), –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –∞—Ä—Ç–∏–∫–ª—å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–≥
                if len(last_word) <= 2:
                    return False
                # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: –µ—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 's' (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –ø—Ä–∏—Ç—è–∂–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂)
                elif last_word.endswith('s') and len(last_word) <= 4:
                    return False
                else:
                    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ —Å—á–∏—Ç–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏
                    return False
        
        return True
    
    def _ensure_response_completion(response: str, is_continue_story: bool, last_response_complete: bool) -> str:
        """
        –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞.
        
        Args:
            response: –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
            is_continue_story: –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
            last_response_complete: –ë—ã–ª –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
            
        Returns:
            –û—Ç–≤–µ—Ç —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
        """
        if not response or not response.strip():
            return response
        
        response = response.strip()
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if _is_response_complete(response):
            return response
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if is_continue_story and not last_response_complete:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
            if not response.endswith('...'):
                response += "..."
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if not response.endswith(('.', '!', '?')):
                response += "."
        
        return response
    
    # ============================================================================
    
    return StreamingResponse(
        generate_stream(),
        media_type="text/event-stream",
        headers={"Cache-Control": "no-cache", "Connection": "keep-alive"}
    )


@router.post("/clear_chat")
async def clear_chat(request: SimpleChatRequest):
    """
    –ü—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –ë–ï–ó –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∏ –ø–æ—Å—Ç-–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞.
    –¢–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π –æ—Ç–≤–µ—Ç –æ—Ç textgen-webui.
    """
    try:
        logger.info(f"üîç CLEAR CHAT: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {request.message}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (Anna)
        async with get_db() as db:
            character = await db.execute(
                select(CharacterDB).where(CharacterDB.name == "Anna")
            )
            character = character.scalar_one_or_none()
            
            if not character:
                raise HTTPException(status_code=404, detail="–ü–µ—Ä—Å–æ–Ω–∞–∂ Anna –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            character_config = CharacterConfig(
                id=character.id,
                name=character.name,
                prompt=character.prompt,
                character_appearance=character.character_appearance,
                location=character.location
            )
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ –≤—Å–µ—Ö –Ω–∞—à–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        simple_prompt = f"{character_config.prompt}\n\n### Instruction:\n{request.message}\n\n### Response:\n"
        
        logger.info(f"üîç CLEAR CHAT: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ textgen-webui: {simple_prompt[:200]}...")
        
        # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ textgen-webui –ë–ï–ó –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        generation_params = {
            "prompt": simple_prompt,
            "max_new_tokens": request.max_tokens or 800,
            "temperature": request.temperature or 0.7,
            "top_p": request.top_p or 0.95,
            "top_k": request.top_k or 50,
            "repeat_penalty": request.repeat_penalty or 1.05,
            "stop": ["</s>"],  # –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π —Å—Ç–æ–ø-—Ç–æ–∫–µ–Ω
            "stream": False,   # –ë–ï–ó —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
            "frequency_penalty": 0.0,
            "presence_penalty": 0.0
        }
        
        # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞
        raw_response = await textgen_webui_service.generate_text(generation_params)
        
        logger.info(f"üîç CLEAR CHAT: –ü–æ–ª—É—á–µ–Ω —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {raw_response[:200]}...")
        
        return {
            "raw_response": raw_response,
            "prompt_sent": simple_prompt,
            "generation_params": generation_params,
            "character_name": character_config.name,
            "message": "–ü—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"
        }
        
    except Exception as e:
        logger.error(f"[ERROR] CLEAR CHAT: –û—à–∏–±–∫–∞: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ clear_chat: {str(e)}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —É–±—Ä–∞–Ω–∞ - APIRouter –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç exception_handler