"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –ë–î.
"""
import asyncio
import sys
import os
import argparse

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))))

from app.chat_bot.utils.character_importer import character_importer
from app.database.db import async_session_maker


async def update_character(character_name: str, overwrite: bool = True):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Ñ–∞–π–ª–∞ –≤ –ë–î.
    
    Args:
        character_name: –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .py)
        overwrite: –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    """
    print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ '{character_name}'...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    characters_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), "models/characters")
    file_path = os.path.join(characters_dir, f"{character_name}.py")
    
    if not os.path.exists(file_path):
        print(f"[ERROR] –§–∞–π–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return False
    
    print(f"üìÅ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    async with async_session_maker() as db:
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            db_char = await character_importer.import_character_to_db(
                character_name, db, overwrite=overwrite
            )
            
            if db_char:
                print(f"[OK] –ü–µ—Ä—Å–æ–Ω–∞–∂ '{db_char.name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                print(f"   ID: {db_char.id}")
                return True
            else:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ '{character_name}'")
                return False
                
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞: {str(e)}")
            return False


async def list_available_characters():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."""
    print("üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:")
    
    characters = character_importer.list_available_characters()
    
    if not characters:
        print("   –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
        return
    
    for i, char in enumerate(characters, 1):
        print(f"   {i}. {char}")
    
    print(f"\n–í—Å–µ–≥–æ: {len(characters)} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –ë–î")
    parser.add_argument(
        "character_name", 
        nargs="?", 
        help="–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .py)"
    )
    parser.add_argument(
        "--list", "-l", 
        action="store_true", 
        help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"
    )
    parser.add_argument(
        "--no-overwrite", 
        action="store_true", 
        help="–ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
    )
    
    args = parser.parse_args()
    
    if args.list:
        await list_available_characters()
        return
    
    if not args.character_name:
        print("[ERROR] –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞")
        print("\n–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print("  python update_character.py anna")
        print("  python update_character.py --list")
        print("  python update_character.py new_char --no-overwrite")
        return
    
    success = await update_character(
        args.character_name, 
        overwrite=not args.no_overwrite
    )
    
    if success:
        print("üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("üí• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main()) 