"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å text-generation-webui API.
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–æ–¥–µ–ª–∏ MythoMax-L2-13B-GGUF.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Alpaca prompt template. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä–æ–ª–µ–≤—ã—Ö –∏–≥—Ä.
"""

import asyncio
import aiohttp
import json
import logging
from typing import Dict, List, Optional, Any, AsyncGenerator
from pydantic import BaseModel, Field
from app.chat_bot.config.chat_config import chat_config
from app.utils.logger import logger
from app.chat_bot.config.chat_config import ChatConfig

class TextGenWebUIService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å text-generation-webui API."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.base_url = chat_config.TEXTGEN_WEBUI_URL
        # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        self.timeout = aiohttp.ClientTimeout(
            total=300,  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 5 –º–∏–Ω—É—Ç –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            connect=10,  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            sock_read=120,  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 2 –º–∏–Ω—É—Ç –Ω–∞ —á—Ç–µ–Ω–∏–µ
            sock_connect=10
        )
        self.model_name = chat_config.TEXTGEN_WEBUI_MODEL
        self._session: Optional[aiohttp.ClientSession] = None
        self._is_connected = False
        self._connector: Optional[aiohttp.TCPConnector] = None
        
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥."""
        await self.connect()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥."""
        await self.disconnect()
        
    async def connect(self) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å text-generation-webui."""
        if self._session is None:
            # –ë–´–°–¢–†–´–ô TCP –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API
            self._connector = aiohttp.TCPConnector(
                limit=10,  # –£–ú–ï–ù–¨–®–ï–ù–û - –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API –Ω–µ –Ω—É–∂–Ω–æ –º–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                limit_per_host=5,  # –£–ú–ï–ù–¨–®–ï–ù–û –¥–ª—è localhost
                ttl_dns_cache=60,  # –£–ú–ï–ù–¨–®–ï–ù–û - localhost –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
                use_dns_cache=False,  # –û–¢–ö–õ–Æ–ß–ï–ù–û –¥–ª—è localhost
                enable_cleanup_closed=True,
                force_close=True  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ (–±–µ–∑ keepalive_timeout!)
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            self._session = aiohttp.ClientSession(
                timeout=self.timeout,
                connector=self._connector,
                connector_owner=True  # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏
            )
            logger.info(f"üîå –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è {self.base_url}")
            
    async def disconnect(self) -> None:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å text-generation-webui."""
        try:
            if self._session and not self._session.closed:
                await self._session.close()
                # –î–æ–∂–¥–µ–º—Å—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                await asyncio.sleep(0.1)
                logger.info("üîå –°–µ—Å—Å–∏—è HTTP –∑–∞–∫—Ä—ã—Ç–∞")
                
            # –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å —Å–µ—Å—Å–∏–µ–π (connector_owner=True)
            self._is_connected = False
            
        except Exception as e:
            logger.warning(f"[WARNING] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        finally:
            self._session = None
            self._connector = None
            self._is_connected = False
            
    # ============================================================================
    # [WARNING]  –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –ö–û–î - –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨! [WARNING]
    # ============================================================================
    # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ text-generation-webui API.
    # –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–¥–µ—Å—å –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LLM —Å–µ—Ä–≤–∏—Å—É.
    # 
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –≠–õ–ï–ú–ï–ù–¢–´:
    # - URL endpoint: /v1/models
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å–∞ 200
    # - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ _is_connected
    # - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ JSON –ø–∞—Ä—Å–∏–Ω–≥–∞
    # ============================================================================
    
    async def check_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å text-generation-webui API."""
        response = None
        try:
            if not self._session:
                await self.connect()
                
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {self.base_url}/v1/models")
            
            response = await self._session.get(f"{self.base_url}/v1/models")
            if response.status == 200:
                try:
                    result = await response.json()
                    models_count = len(result.get("data", []))
                    logger.info(f"[OK] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å text-generation-webui —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {models_count}")
                    self._is_connected = True
                    return True
                except Exception as json_err:
                    logger.warning(f"[WARNING] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç 200, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON: {json_err}")
                    self._is_connected = True
                    return True
            else:
                error_text = await response.text()
                logger.warning(f"[WARNING] text-generation-webui –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP {response.status}, –æ—Ç–≤–µ—Ç: {error_text}")
                self._is_connected = False
                return False
                
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ text-generation-webui: {e}")
            self._is_connected = False
            return False
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º response
            if response:
                try:
                    response.close()
                except Exception as e:
                    logger.warning(f"[WARNING] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ response –≤ check_connection: {e}")
    
    # ============================================================================
    # [OK] –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –ö–û–î –ó–ê–í–ï–†–®–ï–ù
    # ============================================================================
            
    async def load_model(self, model_name: Optional[str] = None) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –≤ text-generation-webui."""
        response = None
        try:
            if not self._session:
                await self.connect()
                
            model_to_load = model_name or self.model_name
            payload = {"action": "load", "model_name": model_to_load}
            
            response = await self._session.post(f"{self.base_url}/v1/model/load", json=payload)
            if response.status == 200:
                result = await response.json()
                if result.get("result") == "success":
                    logger.info(f"[OK] –ú–æ–¥–µ–ª—å {model_to_load} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {result}")
                    return False
            else:
                logger.error(f"[ERROR] HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {response.status}")
                return False
                
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            return False
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º response
            if response:
                try:
                    response.close()
                except Exception as e:
                    logger.warning(f"[WARNING] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ response –≤ load_model: {e}")
            
    async def get_available_models(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π."""
        response = None
        try:
            if not self._session:
                await self.connect()
                
            response = await self._session.get(f"{self.base_url}/v1/models")
            if response.status == 200:
                data = await response.json()
                return data.get("data", [])
            else:
                logger.error(f"[ERROR] HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {response.status}")
                return []
                
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
            return []
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º response
            if response:
                try:
                    response.close()
                except Exception as e:
                    logger.warning(f"[WARNING] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ response –≤ get_available_models: {e}")
            
    def build_alpaca_prompt(self, system_message: str, user_message: str, history: List[Dict[str, str]] = None) -> str:
        """
        –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Alpaca –¥–ª—è –º–æ–¥–µ–ª–∏ MythoMax-L2-13B.
        
        Args:
            system_message: –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ/–æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Alpaca
        """
        try:
            # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Alpaca
            prompt = f"{system_message}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if history:
                recent_history = history[-20:] if len(history) > 20 else history
                
                for i, msg in enumerate(recent_history):
                    if isinstance(msg, dict):
                        role = msg.get("role", "user")
                        content = msg.get("content", "")
                    elif isinstance(msg, (tuple, list)) and len(msg) >= 2:
                        role = str(msg[0]) if msg[0] else "user"
                        content = str(msg[1]) if msg[1] else ""
                    else:
                        logger.warning(f"[WARNING] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏: {msg}")
                        continue
                        
                    if role and content:
                        if role.lower() in ["user"]:
                            prompt += f"### Instruction:\n{content}\n\n"
                        elif role.lower() in ["assistant"]:
                            prompt += f"### Response:\n{content}\n\n"
                        
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            prompt += f"### Instruction:\n{user_message}\n\n"
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
            prompt += "### Response:\n"
            
            return prompt
            
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π fallback –ø—Ä–æ–º–ø—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return f"{system_message}\n\n### Instruction:\n{user_message}\n\n### Response:\n"

    def build_character_prompt(
        self,
        character_data: Dict[str, Any],
        user_message: str,
        chat_history: List[Dict[str, str]] = None,
        history: List[Dict[str, str]] = None,
        chat_config: ChatConfig = None
    ) -> str:
        """
        –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Alpaca –¥–ª—è MythoMax-L2-13B.
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ä–æ–ª–µ–≤—ã—Ö –∏–≥—Ä –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –ø–∏—Å—å–º–∞.
        """
        if not character_data:
            return self._build_fallback_prompt(user_message, chat_config)
            
        character_prompt = character_data.get("prompt", "")
        if not character_prompt:
            return self._build_fallback_prompt(user_message, chat_config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø—Ä–æ–º–ø—Ç placeholder –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        if "{user_message}" in character_prompt:
            # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç placeholder, –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ
            return character_prompt.replace("{user_message}", user_message)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç placeholder, —Å—Ç—Ä–æ–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Alpaca –ø—Ä–æ–º–ø—Ç
        prompt = f"{character_prompt}\n\n"
        
        # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è MythoMax
        history_to_use = history or chat_history
        if history_to_use:
            recent_history = history_to_use[-20:]  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è 8192 –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            for i, msg in enumerate(recent_history):
                role = msg.get("role", "user")
                content = msg.get("content", "")[:1000]  # –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è 13B –º–æ–¥–µ–ª–∏
                if content.strip():
                    if role == "user":
                        prompt += f"### Instruction:\n{content}\n\n"
                    elif role == "assistant":
                        prompt += f"### Response:\n{content}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Alpaca —Ñ–æ—Ä–º–∞—Ç–µ
        prompt += f"### Instruction:\n{user_message}\n\n"
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        prompt += "### Response:\n"
        
        return prompt

    def _clean_generation_artifacts(self, text: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ —Ä–æ–ª–∏.
        
        Args:
            text: –°—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –æ—Ç –º–æ–¥–µ–ª–∏
            
        Returns:
            –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        import re
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–º—è–≥—á–µ–Ω–Ω–∞—è –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ HTML-—Å—Å—ã–ª–∫–∏ –∏ —Ç–µ–≥–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
        text = re.sub(r'<a\s+href\s*=\s*[^>]*>.*?</a>', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'<[^>]+>', '', text)  # –£–¥–∞–ª—è–µ–º –≤—Å–µ HTML —Ç–µ–≥–∏
        text = re.sub(r'https?://[^\s<>"]+', '', text)  # –£–¥–∞–ª—è–µ–º URL —Å—Å—ã–ª–∫–∏
        text = re.sub(r'www\.[^\s<>"]+', '', text)  # –£–¥–∞–ª—è–µ–º www —Å—Å—ã–ª–∫–∏
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
        text = re.sub(r'\]\]>0</p>\s*</pre>', '', text)  # –£–¥–∞–ª—è–µ–º HTML –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
        text = re.sub(r'<h1>[^<]*</h1>', '', text)  # –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        text = re.sub(r'<br\s*/?>', '', text)  # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text = re.sub(r'</i>', '', text)  # –£–¥–∞–ª—è–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏
        
        # –£–¥–∞–ª—è–µ–º ID –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∏ —á–∏—Å–ª–æ–≤—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
        text = re.sub(r'/Cluster ID[^/]*/', '', text)
        text = re.sub(r'cid_[a-f0-9]+', '', text)
        text = re.sub(r'\d{8,}', '', text)  # –î–ª–∏–Ω–Ω—ã–µ —á–∏—Å–ª–∞
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
        text = re.sub(r'[^\w\s\.,!?;:()\[\]{}"\'-~*<>]', '', text)  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —ç–º–æ–¥–∑–∏ (–º–∞–∫—Å–∏–º—É–º 3 –ø–æ–¥—Ä—è–¥)
        text = re.sub(r'([\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-\U0001F6FF\U0001F1E0-\U0001F1FF])\1{3,}', r'\1\1\1', text)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã (–º–∞–∫—Å–∏–º—É–º 5 –ø–æ–¥—Ä—è–¥)
        text = re.sub(r'(.)\1{5,}', r'\1\1\1\1\1', text)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        text = re.sub(r'\n{3,}', '\n\n', text)
        text = re.sub(r' {3,}', ' ', text)
        
        # –£–¥–∞–ª—è–µ–º –º–µ—Ç–∞-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∫–æ–Ω—Ü–µ
        text = re.sub(r'\s*\([^)]*meta[^)]*\)\s*$', '', text, flags=re.IGNORECASE)
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤—ã—Ö–æ–¥ –∏–∑ —Ä–æ–ª–∏
        text = re.sub(r'\s*Remember:.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*CORE BEHAVIOR:.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*PERSONALITY:.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*RESPONSE FORMAT:.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*CRITICAL RULES:.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*NEVER BREAK.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*ALWAYS respond.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*You are designed.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*You are Anna.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*Stay in character.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*meta-commentary.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*self-referential.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*break character.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*following instructions.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        
        # –£–¥–∞–ª—è–µ–º Alpaca —Ñ–æ—Ä–º–∞—Ç –º–∞—Ä–∫–µ—Ä—ã
        text = re.sub(r'\s*### Instruction:.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*### Response:.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        
        # –£–¥–∞–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        text = re.sub(r'\s*I need to remember:.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*I\'ll be sure not answer.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*Thanks for asking me this.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*How would I assist further.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*What\'s next.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*Tell me everything.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*my curiosity is piqued.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*Also tell me if.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*I\'m all ears now.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*Please go ahead.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*If there were any requests.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*Let\'s have some fun together.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*Basically.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
        text = re.sub(r'\s*Go here.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*if want more interaction.*$', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'\s*;-?\)\s*$', '', text)  # –£–¥–∞–ª—è–µ–º —Å–º–∞–π–ª–∏–∫–∏ –≤ –∫–æ–Ω—Ü–µ
        
        # üïí –ê–ì–†–ï–°–°–ò–í–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ù–´–• –ú–ï–¢–û–ö
        # –†–∞–¥–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - —É–¥–∞–ª—è–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
        
        # 1. –£–¥–∞–ª—è–µ–º –í–°–ï –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤—Ä–µ–º–µ–Ω–∏ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Ç–µ–∫—Å—Ç–∞
        aggressive_time_patterns = [
            r'\d{1,2}:\d{2}(?::\d{2})?(?:\.\d+)?\s*(?:AM|PM|am|pm)?',  # 12:34, 12:34:56, 12:34 PM
            r'\d{1,2}:\d{2}(?::\d{2})?(?:,\d+)?\s*(?:AM|PM|am|pm)?',  # —Å –∑–∞–ø—è—Ç–æ–π
            r'\d{1,2}:\d{2}(?::\d{2})?(?:\.\d{6})?\s*(?:AM|PM|am|pm)?',  # —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏
            r'\d{1,2}:\d{2}(?::\d{2})?(?:\.\d+)?',  # 12:34, 12:34:56 –±–µ–∑ AM/PM
            r'\d{1,2}:\d{2}(?::\d{2})?(?:,\d+)?',  # —Å –∑–∞–ø—è—Ç–æ–π –±–µ–∑ AM/PM
            r'\d{1,2}:\d{2}(?::\d{2})?(?:\.\d{6})?',  # —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏ –±–µ–∑ AM/PM
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
            r'\d{1,2}:\d{2}(?::\d{2})?(?:\.\d+)?\d+',  # 14:20:3314:17:04
            r'\d{1,2}:\d{2}(?::\d{2})?(?:\.\d+)?\d{1,2}:\d{2}',  # —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
        ]
        
        for pattern in aggressive_time_patterns:
            text = re.sub(pattern, '', text, flags=re.IGNORECASE)
        
        # 2. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º—è –≤ —Å–∫–æ–±–∫–∞—Ö, –∫–∞–≤—ã—á–∫–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö
        context_patterns = [
            r'\(\d{1,2}:\d{2}(?::\d{2})?(?:\.\d+)?\s*(?:AM|PM|am|pm)?\)',  # (12:34)
            r'\[\d{1,2}:\d{2}(?::\d{2})?(?:\.\d+)?\s*(?:AM|PM|am|pm)?\]',  # [12:34]
            r'"\d{1,2}:\d{2}(?::\d{2})?(?:\.\d+)?\s*(?:AM|PM|am|pm)?"',  # "12:34"
            r"'\d{1,2}:\d{2}(?::\d{2})?(?:\.\d+)?\s*(?:AM|PM|am|pm)?'",  # '12:34'
            r'at\s+\d{1,2}:\d{2}(?::\d{2})?(?:\.\d+)?',  # at 12:34
            r'@\s*\d{1,2}:\d{2}(?::\d{2})?(?:\.\d+)?',  # @12:34
            r'time\s*:\s*\d{1,2}:\d{2}(?::\d{2})?(?:\.\d+)?',  # time: 12:34
        ]
        
        for pattern in context_patterns:
            text = re.sub(pattern, '', text, flags=re.IGNORECASE)
        
        # 3. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º—è –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ)
        end_patterns = [
            r'[.!?]?\s*\d{1,2}:\d{2}(?::\d{2})?(?:\.\d+)?\s*(?:AM|PM|am|pm)?\s*$',
            r'[.!?]?\s*\d{1,2}:\d{2}(?::\d{2})?(?:,\d+)?\s*(?:AM|PM|am|pm)?\s*$',
            r'[.!?]?\s*\d{1,2}:\d{2}(?::\d{2})?(?:\.\d{6})?\s*(?:AM|PM|am|pm)?\s*$',
        ]
        
        for pattern in end_patterns:
            text = re.sub(pattern, '', text, flags=re.MULTILINE | re.IGNORECASE)
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
        text = re.sub(r'\s+', ' ', text)  # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'\s+([.!?])', r'\1', text)  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        text = re.sub(r'\.\.\.\s+$', '...', text)  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –º–Ω–æ–≥–æ—Ç–æ—á–∏—è
        
        return text.strip()

    def _get_enhanced_stop_tokens(self, base_stop_tokens: list, chat_config) -> list:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–æ–ø-—Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏.
        
        Args:
            base_stop_tokens: –ë–∞–∑–æ–≤—ã–µ —Å—Ç–æ–ø-—Ç–æ–∫–µ–Ω—ã
            chat_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–∞—Ç–∞
            
        Returns:
            –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Ç–æ–∫–µ–Ω–æ–≤
        """
        enhanced_tokens = list(base_stop_tokens) if base_stop_tokens else []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ø-—Ç–æ–∫–µ–Ω—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
        if chat_config and hasattr(chat_config, 'TIME_STOP_TOKENS'):
            enhanced_tokens.extend(chat_config.TIME_STOP_TOKENS)
            logger.info(f"üïí –î–æ–±–∞–≤–ª–µ–Ω–æ {len(chat_config.TIME_STOP_TOKENS)} —Å—Ç–æ–ø-—Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏")
        
        return enhanced_tokens

    def _contains_time_patterns(self, text: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã.
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        """
        time_patterns = [
            r'\d{1,2}:\d{2}(?::\d{2})?(?:\.\d+)?\s*(?:AM|PM|am|pm)?',
            r'\d{1,2}:\d{2}(?::\d{2})?(?:,\d+)?\s*(?:AM|PM|am|pm)?',
            r'\d{1,2}:\d{2}(?::\d{2})?(?:\.\d{6})?\s*(?:AM|PM|am|pm)?',
        ]
        
        for pattern in time_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                return True
        return False

    def _aggressive_time_cleanup(self, text: str) -> str:
        """
        –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤.
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            
        Returns:
            –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        # –£–¥–∞–ª—è–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
        patterns = [
            r'\d{1,2}:\d{2}(?::\d{2})?(?:\.\d+)?\s*(?:AM|PM|am|pm)?',
            r'\d{1,2}:\d{2}(?::\d{2})?(?:,\d+)?\s*(?:AM|PM|am|pm)?',
            r'\d{1,2}:\d{2}(?::\d{2})?(?:\.\d{6})?\s*(?:AM|PM|am|pm)?',
            r'\d{1,2}:\d{2}(?::\d{2})?(?:\.\d+)?',
            r'\d{1,2}:\d{2}(?::\d{2})?(?:,\d+)?',
            r'\d{1,2}:\d{2}(?::\d{2})?(?:\.\d{6})?',
        ]
        
        for pattern in patterns:
            text = re.sub(pattern, '', text, flags=re.IGNORECASE)
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        text = re.sub(r'\s+', ' ', text)
        text = re.sub(r'\s+([.!?])', r'\1', text)
        
        return text.strip()

    def _final_time_cleanup(self, text: str) -> str:
        """
        –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ - —É–¥–∞–ª—è–µ—Ç –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏.
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            
        Returns:
            –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        # –£–¥–∞–ª—è–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ - –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
        patterns = [
            r'\d{1,2}:\d{2}(?::\d{2})?(?:\.\d+)?\s*(?:AM|PM|am|pm)?',  # 12:34, 12:34:56, 12:34 PM
            r'\d{1,2}:\d{2}(?::\d{2})?(?:,\d+)?\s*(?:AM|PM|am|pm)?',  # —Å –∑–∞–ø—è—Ç–æ–π
            r'\d{1,2}:\d{2}(?::\d{2})?(?:\.\d{6})?\s*(?:AM|PM|am|pm)?',  # —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏
            r'\d{1,2}:\d{2}(?::\d{2})?(?:\.\d+)?',  # 12:34, 12:34:56 –±–µ–∑ AM/PM
            r'\d{1,2}:\d{2}(?::\d{2})?(?:,\d+)?',  # —Å –∑–∞–ø—è—Ç–æ–π –±–µ–∑ AM/PM
            r'\d{1,2}:\d{2}(?::\d{2})?(?:\.\d{6})?',  # —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏ –±–µ–∑ AM/PM
            r'\d{1,2}:\d{2}(?::\d{2})?(?:\.\d+)?\s*$',  # –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
            r'\d{1,2}:\d{2}(?::\d{2})?(?:,\d+)?\s*$',  # —Å –∑–∞–ø—è—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ
            r'\d{1,2}:\d{2}(?::\d{2})?(?:\.\d{6})?\s*$',  # —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏ –≤ –∫–æ–Ω—Ü–µ
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
            r'\d{1,2}:\d{2}(?::\d{2})?(?:\.\d+)?\d+',  # 14:20:3314:17:04
            r'\d{1,2}:\d{2}(?::\d{2})?(?:\.\d+)?\d{1,2}:\d{2}',  # —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
        ]
        
        for pattern in patterns:
            text = re.sub(pattern, '', text, flags=re.IGNORECASE | re.MULTILINE)
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        text = re.sub(r'\s+', ' ', text)
        text = re.sub(r'\s+([.!?])', r'\1', text)
        text = re.sub(r'\s+$', '', text)  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ
        
        return text.strip()

    def _build_fallback_prompt(self, user_message: str, chat_config: ChatConfig = None) -> str:
        """
        –°—Ç—Ä–æ–∏—Ç fallback –ø—Ä–æ–º–ø—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Alpaca –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–∞—Ç–∞
            
        Returns:
            Fallback –ø—Ä–æ–º–ø—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Alpaca
        """
        fallback_system = "You are a helpful and friendly assistant. Always respond directly to what the user says and use context from previous messages when available."
        
        return f"{fallback_system}\n\n### Instruction:\n{user_message}\n\n### Response:\n"

    async def generate_text(
        self, 
        prompt: str, 
        max_tokens: Optional[int] = None,
        temperature: Optional[float] = None,
        top_p: Optional[float] = None,
        top_k: Optional[int] = None,
        min_p: Optional[float] = None,  # –î–û–ë–ê–í–õ–ï–ù–û: min_p
        repeat_penalty: Optional[float] = None,
        presence_penalty: Optional[float] = None,
        force_completion: bool = False
    ) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ text-generation-webui API.
        
        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            max_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            top_p: Top-p –ø–∞—Ä–∞–º–µ—Ç—Ä
            top_k: Top-k –ø–∞—Ä–∞–º–µ—Ç—Ä
            repeat_penalty: –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            presence_penalty: Presence penalty
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        response = None
        try:
            if not self._session:
                await self.connect()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–º–ø—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            if not prompt or not prompt.strip():
                logger.error("[ERROR] –ü—É—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                return None
                
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º API
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            generation_params = chat_config.sample_generation_params(
                seed=chat_config.SEED,
                force_completion=force_completion
            )
            
            # –ü–†–ê–í–ò–õ–¨–ù–´–ô API –¥–ª—è text-generation-webui
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º n_predict –¥–ª—è llama.cpp –º–æ–¥–µ–ª–µ–π
            target_tokens = max_tokens or generation_params["max_tokens"]
            openai_payload = {
                "model": self.model_name,
                "messages": [{"role": "user", "content": prompt}],
                "max_tokens": target_tokens,
                "n_predict": target_tokens,  # –î–ª—è llama.cpp –º–æ–¥–µ–ª–µ–π
                "temperature": temperature or generation_params["temperature"],
                "top_p": top_p or generation_params["top_p"],
                "top_k": top_k or generation_params["top_k"],
                "min_p": min_p or generation_params.get("min_p", 0.05),  # –î–û–ë–ê–í–õ–ï–ù–û: min_p
                "stream": False,
                
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–ö–ï–ù–ò–ó–ê–¶–ò–ò: –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏
                "skip_special_tokens": True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
                "add_bos_token": False,  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º BOS —Ç–æ–∫–µ–Ω (—É–∂–µ –≤ –ø—Ä–æ–º–ø—Ç–µ)
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–∫–ª—é—á–∞–µ–º penalty –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —É–º–µ—Ä–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                "repetition_penalty": repeat_penalty or generation_params.get("repeat_penalty", 1.05),
                "frequency_penalty": 0.1,   # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–∫–ª—é—á–∞–µ–º —Å —É–º–µ—Ä–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                "presence_penalty": 0.1,    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–∫–ª—é—á–∞–µ–º —Å —É–º–µ—Ä–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                "stop": self._get_enhanced_stop_tokens(generation_params.get("stop", []), chat_config)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ + –≤—Ä–µ–º—è
            }
            
            # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ API
            logger.info(f"üîç API Payload - max_tokens: {openai_payload['max_tokens']}")
            if "stop" in openai_payload and openai_payload["stop"]:
                logger.info(f"üîç API Payload - stop tokens: {openai_payload['stop']}")
            else:
                logger.info(f"üîç API Payload - stop tokens: –ù–ï–¢ (—ç—Ç–æ —Ö–æ—Ä–æ—à–æ!)")
            logger.info(f"üîç API Payload - min_tokens: {openai_payload.get('min_tokens', '–ù–ï–¢')}")
            logger.info(f"üîç API Payload - ban_eos_token: {openai_payload.get('ban_eos_token', False)}")
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º min_tokens - –æ–Ω –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
            # if chat_config.ENFORCE_MIN_TOKENS and chat_config.MIN_NEW_TOKENS > 0:
            #     openai_payload["min_tokens"] = chat_config.MIN_NEW_TOKENS
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º ban_eos_token –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            openai_payload["ban_eos_token"] = False
            
            logger.info(f"üöÄ –ë–´–°–¢–†–´–ô –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (–ø—Ä–æ–º–ø—Ç: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            response = await self._session.post(f"{self.base_url}/v1/chat/completions", json=openai_payload)
            if response.status == 200:
                result = await response.json()
                # OpenAI API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ choices[0].message.content
                choices = result.get("choices", [])
                if choices:
                    generated_text = choices[0].get("message", {}).get("content", "")
                else:
                    generated_text = ""
                
                # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API
                logger.info(f"üîç Raw API Response: {generated_text[-100:]}...")  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                
                # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–æ–¥–µ–ª–∏
                logger.info(f"üîç Full Prompt Sent to Model: {prompt[-500:]}...")  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ–º–ø—Ç–∞
                
                # üîç –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.info("=" * 80)
                logger.info("üîç –ü–û–õ–ù–´–ô –ü–†–û–ú–ü–¢, –û–¢–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–û–î–ï–õ–ò:")
                logger.info("=" * 80)
                logger.info(prompt)
                logger.info("=" * 80)
                
                if generated_text:
                    # –ü–†–Ø–ú–û–ô –û–¢–í–ï–¢ –û–¢ –ú–û–î–ï–õ–ò –ë–ï–ó –ü–û–°–¢-–û–ë–†–ê–ë–û–¢–ö–ò
                    logger.info(f"[OK] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({len(generated_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    logger.info(f"üîç Raw Response: {generated_text[-100:]}...")  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                    return generated_text.strip()
                else:
                    logger.warning("[WARNING] –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API")
                    return None
            else:
                error_text = await response.text()
                logger.error(f"[ERROR] HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status}, –æ—Ç–≤–µ—Ç: {error_text}")
                return None
                
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            return None
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º response
            if response:
                try:
                    response.close()
                except Exception as e:
                    logger.warning(f"[WARNING] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ response –≤ generate_text: {e}")
            
    # ============================================================================
    # [WARNING]  –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –ö–û–î - –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨! [WARNING]
    # ============================================================================
    # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ streaming –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ text-generation-webui API.
    # –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–¥–µ—Å—å –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É streaming —á–∞—Ç–∞.
    # 
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –≠–õ–ï–ú–ï–ù–¢–´:
    # - –°–∏–≥–Ω–∞—Ç—É—Ä–∞ –º–µ—Ç–æ–¥–∞ (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å)
    # - OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π payload —Ñ–æ—Ä–º–∞—Ç
    # - –û–±—Ä–∞–±–æ—Ç–∫–∞ streaming –æ—Ç–≤–µ—Ç–∞
    # - –ü–∞—Ä—Å–∏–Ω–≥ JSON —á–∞–Ω–∫–æ–≤
    # - –ù–ï –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä "stream": True
    # ============================================================================
    
    async def generate_text_stream(
        self, 
        prompt: str, 
        max_tokens: Optional[int] = None,
        temperature: Optional[float] = None,
        top_p: Optional[float] = None,
        top_k: Optional[int] = None,
        repeat_penalty: Optional[float] = None,
        presence_penalty: Optional[float] = None,
        force_completion: bool = False
    ) -> AsyncGenerator[str, None]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Ç–æ–∫–æ–º —á–µ—Ä–µ–∑ text-generation-webui API.
        
        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            max_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            top_p: Top-p –ø–∞—Ä–∞–º–µ—Ç—Ä
            top_k: Top-k –ø–∞—Ä–∞–º–µ—Ç—Ä
            repeat_penalty: –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            presence_penalty: Presence penalty
            
        Yields:
            –ß–∞—Å—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        """
        try:
            if not self._session:
                await self.connect()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–º–ø—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            if not prompt or not prompt.strip():
                logger.error("[ERROR] –ü—É—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                return
                
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º API
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            generation_params = chat_config.sample_generation_params(
                seed=chat_config.SEED,
                force_completion=force_completion
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
            openai_payload = {
                "model": self.model_name,
                "messages": [{"role": "user", "content": prompt}],
                "max_tokens": max_tokens or generation_params["max_tokens"],
                "temperature": temperature or generation_params["temperature"],
                "top_p": top_p or generation_params["top_p"],
                "top_k": top_k or generation_params["top_k"],
                "stop": generation_params.get("stop", []),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                "stream": True,
                "seed": generation_params["seed"],  # Seed –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                
                # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º auto_max_new_tokens
                "auto_max_new_tokens": False,
                
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–ö–ï–ù–ò–ó–ê–¶–ò–ò: –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏
                "skip_special_tokens": True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
                "add_bos_token": False,  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º BOS —Ç–æ–∫–µ–Ω (—É–∂–µ –≤ –ø—Ä–æ–º–ø—Ç–µ)
                
                # [OK] –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –ò–ó chat_config.py
                "min_p": chat_config.DEFAULT_MIN_P,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º min_tokens –≤ streaming - –æ–Ω –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
                # "min_tokens": chat_config.MIN_NEW_TOKENS if chat_config.ENFORCE_MIN_TOKENS else None,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
                
                # [OK] –¢–û–õ–¨–ö–û –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è text-generation-webui
                # –ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
                # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è text-generation-webui API
            }
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º ban_eos_token –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            openai_payload["ban_eos_token"] = False
            
            # –£–±–∏—Ä–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ payload
            openai_payload = {k: v for k, v in openai_payload.items() if v is not None}
            
            # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º streaming payload
            logger.info(f"üöÄ STREAMING API Payload - max_tokens: {openai_payload.get('max_tokens', '–ù–ï–¢')}")
            if "stop" in openai_payload and openai_payload["stop"]:
                logger.info(f"üîç STREAMING API Payload - stop tokens: {openai_payload['stop']}")
            else:
                logger.info(f"üîç STREAMING API Payload - stop tokens: –ù–ï–¢ (—ç—Ç–æ —Ö–æ—Ä–æ—à–æ!)")
            logger.info(f"üîç STREAMING API Payload - min_tokens: {openai_payload.get('min_tokens', '–ù–ï–¢')}")
            logger.info(f"üîç STREAMING API Payload - ban_eos_token: {openai_payload.get('ban_eos_token', False)}")
            
            logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ (–ø—Ä–æ–º–ø—Ç: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º try-finally –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
            response = None
            try:
                response = await self._session.post(f"{self.base_url}/v1/chat/completions", json=openai_payload)
                
                if response.status == 200:
                    logger.info("[OK] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç text-generation-webui, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç—Ä–∏–º–∞")
                    buffer = ""
                    
                    async for line in response.content:
                        if line:
                            try:
                                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –±—É—Ñ–µ—Ä—É
                                buffer += line.decode('utf-8')
                                
                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                                lines = buffer.split('\n')
                                buffer = lines.pop() or ""  # –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –±—É—Ñ–µ—Ä–µ
                                
                                for line_text in lines:
                                    line_text = line_text.strip()
                                    if not line_text or not line_text.startswith('data: '):
                                        continue
                                        
                                    data_str = line_text[6:]  # –£–±–∏—Ä–∞–µ–º 'data: '
                                    if data_str == '[DONE]':
                                        logger.info("üèÅ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∞")
                                        return
                                        
                                    try:
                                        data = json.loads(data_str)
                                        if 'choices' in data and len(data['choices']) > 0:
                                            delta = data['choices'][0].get('delta', {})
                                            if 'content' in delta and delta['content']:
                                                # –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
                                                original_chunk = delta['content']
                                                cleaned_chunk = self._clean_generation_artifacts(delta['content'])
                                                if original_chunk != cleaned_chunk:
                                                    logger.info(f"üïí STREAMING: –£–¥–∞–ª–µ–Ω–æ –≤—Ä–µ–º—è –∏–∑ '{original_chunk}' -> '{cleaned_chunk}'")
                                                yield cleaned_chunk
                                                
                                    except json.JSONDecodeError as json_err:
                                        logger.warning(f"[WARNING] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ —Å—Ç—Ä–∏–º–µ: {json_err}, –¥–∞–Ω–Ω—ã–µ: {data_str}")
                                        continue
                                        
                            except Exception as e:
                                logger.warning(f"[WARNING] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∏–º–∞: {e}")
                                continue
                else:
                    error_text = await response.text()
                    logger.error(f"[ERROR] HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status}, –æ—Ç–≤–µ—Ç: {error_text}")
                    
            finally:
                # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º response
                if response:
                    try:
                        response.close()
                    except Exception as e:
                        logger.warning(f"[WARNING] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ response: {e}")
                        
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            yield f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}"
    
    # ============================================================================
    # [OK] –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –ö–û–î –ó–ê–í–ï–†–®–ï–ù
    # ============================================================================
            
    async def get_model_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏."""
        response = None
        try:
            if not self._session:
                await self.connect()
                
            response = await self._session.get(f"{self.base_url}/v1/model")
            if response.status == 200:
                return await response.json()
            else:
                logger.error(f"[ERROR] HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏: {response.status}")
                return {}
                
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏: {e}")
            return {}
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º response
            if response:
                try:
                    response.close()
                except Exception as e:
                    logger.warning(f"[WARNING] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ response –≤ get_model_status: {e}")
            
    @property
    def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."""
        return self._is_connected
        
    @property
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞."""
        return self._is_connected and self._session is not None
    
    def get_config_for_bat_file(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ bat-—Ñ–∞–π–ª–∞—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ text-generation-webui.
        –¢–û–õ–¨–ö–û –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç text-generation-webui —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É.
        """
        return {
            # [OK] –ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ text-generation-webui —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
            "ctx_size": chat_config.N_CTX,              # --ctx-size
            "gpu_layers": chat_config.N_GPU_LAYERS,     # --gpu-layers  
            "threads": chat_config.N_THREADS,           # --threads
            "threads_batch": chat_config.N_THREADS_BATCH, # --threads-batch
            "batch_size": chat_config.N_BATCH,          # --batch-size
            "f16_kv": chat_config.F16_KV,              # --f16-kv
            "use_mmap": chat_config.USE_MMAP,          # --mmap
            "use_mlock": chat_config.USE_MLOCK,        # --mlock
            "verbose": chat_config.VERBOSE,            # --verbose
            
            # [ERROR] –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—É–±—Ä–∞–Ω—ã):
            # - –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ (smartness, dynamic_sampling –∏ —Ç.–¥.)
            # - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –¥–ª–∏–Ω—ã (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)  
            # - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
            # - mul_mat_q, offload_kqv, n_keep, n_draft –∏ –¥—Ä—É–≥–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è llama.cpp –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        }
        
    # ============================================================================
    # [WARNING]  –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –ö–û–î - –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨! [WARNING]
    # ============================================================================
    # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —è–≤–ª—è–µ—Ç—Å—è –∞–ª–∏–∞—Å–æ–º –¥–ª—è generate_text_stream.
    # –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–¥–µ—Å—å –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å.
    # 
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –≠–õ–ï–ú–ï–ù–¢–´:
    # - –î–æ–ª–∂–µ–Ω —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ generate_text_stream
    # - –ù–ï –∏–∑–º–µ–Ω—è—Ç—å –ª–æ–≥–∏–∫—É - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
    # - –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–∏–≥–Ω–∞—Ç—É—Ä—É AsyncGenerator[str, None]
    # ============================================================================
    
    async def generate_stream(self, *args, **kwargs) -> AsyncGenerator[str, None]:
        """
        –ê–ª–∏–∞—Å –¥–ª—è generate_text_stream –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
        
        Args:
            *args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è generate_text_stream
            **kwargs: –ö–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è generate_text_stream
            
        Yields:
            –ß–∞—Å—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        """
        async for chunk in self.generate_text_stream(*args, **kwargs):
            yield chunk
    
    def _fix_tokenization_artifacts(self, text: str) -> str:
        """
        –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã - —Ä–∞–∑—Ä—ã–≤–Ω—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–Ω–∏–∫–∞—é—Ç
        –ø—Ä–∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ –∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–µ.
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏
            
        Returns:
            –¢–µ–∫—Å—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏
        """
        import re
        
        # üîß –ê–ì–†–ï–°–°–ò–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–ö–ï–ù–ò–ó–ê–¶–ò–û–ù–ù–´–• –ê–†–¢–ï–§–ê–ö–¢–û–í
        
        # 1. –ò–°–ü–†–ê–í–õ–Ø–ï–ú –†–ê–ó–†–´–í–ù–´–ï –°–õ–û–í–ê (–æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞)
        # –ü–∞—Ç—Ç–µ—Ä–Ω: "wal ks" -> "walks", "catch es" -> "catches"
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–∏—Ç–Ω—ã–º–∏
        
        # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑—Ä—ã–≤–Ω—ã—Ö —Å–ª–æ–≤
        patterns = [
            # –ü–∞—Ç—Ç–µ—Ä–Ω 1: "c rot ch" -> "crotch" (3+ —á–∞—Å—Ç–∏)
            (r'\b([a-zA-Z])\s+([a-zA-Z])\s+([a-zA-Z]+)\b', r'\1\2\3'),
            # –ü–∞—Ç—Ç–µ—Ä–Ω 2: "tou ch ing" -> "touching" (3 —á–∞—Å—Ç–∏)
            (r'\b([a-zA-Z]+)\s+([a-zA-Z])\s+([a-zA-Z]+)\b', r'\1\2\3'),
            # –ü–∞—Ç—Ç–µ—Ä–Ω 3: "tou ch" -> "touch" (2 —á–∞—Å—Ç–∏)
            (r'\b([a-zA-Z]+)\s+([a-zA-Z]+)\b', r'\1\2'),
            # –ü–∞—Ç—Ç–µ—Ä–Ω 4: "c rot" -> "crot" (2 —á–∞—Å—Ç–∏)
            (r'\b([a-zA-Z])\s+([a-zA-Z]+)\b', r'\1\2'),
            # –ü–∞—Ç—Ç–µ—Ä–Ω 5: "n aked" -> "naked" (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π)
            (r'\b([a-zA-Z])\s+([a-zA-Z]+)\b', r'\1\2'),
            # –ü–∞—Ç—Ç–µ—Ä–Ω 6: "she er" -> "sheer" (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π)
            (r'\b([a-zA-Z]+)\s+([a-zA-Z]+)\b', r'\1\2'),
            # –ü–∞—Ç—Ç–µ—Ä–Ω 7: "p ant ies" -> "panties" (3 —á–∞—Å—Ç–∏)
            (r'\b([a-zA-Z])\s+([a-zA-Z]+)\s+([a-zA-Z]+)\b', r'\1\2\3'),
            # –ü–∞—Ç—Ç–µ—Ä–Ω 8: "ob liv ious" -> "oblivious" (3 —á–∞—Å—Ç–∏)
            (r'\b([a-zA-Z]+)\s+([a-zA-Z]+)\s+([a-zA-Z]+)\b', r'\1\2\3'),
            # –ü–∞—Ç—Ç–µ—Ä–Ω 9: "reve aling" -> "revealing" (2 —á–∞—Å—Ç–∏)
            (r'\b([a-zA-Z]+)\s+([a-zA-Z]+)\b', r'\1\2'),
        ]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        for _ in range(3):  # 3 –∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            for pattern, replacement in patterns:
                text = re.sub(pattern, replacement, text)
        
        # 2. –ò–°–ü–†–ê–í–õ–Ø–ï–ú –°–õ–ò–¢–´–ï –°–õ–û–í–ê (–æ–±—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞)
        # –ü–∞—Ç—Ç–µ—Ä–Ω: "As Ibegantomeasure" -> "As I began to measure"
        text = re.sub(r'\b([a-zA-Z]+)([A-Z][a-zA-Z]+)\b', r'\1 \2', text)
        
        # 3. –ò–°–ü–†–ê–í–õ–Ø–ï–ú –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –°–õ–£–ß–ê–ò
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–ª–∏—Ç—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω—ã
        special_cases = [
            (r'\b(coffee)(grounds)\b', r'\1 \2'),
            (r'\b(black)(panties)\b', r'\1 \2'),
            (r'\b(T)(shirt)\b', r'\1-\2'),
            (r'\b(half)(naked)\b', r'\1 \2'),
        ]
        
        for pattern, replacement in special_cases:
            text = re.sub(pattern, replacement, text)
        
        # 4. –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ê–ü–û–°–¢–†–û–§–´ –ò –°–û–ö–†–ê–©–ï–ù–ò–Ø
        # "I ' m" -> "I'm", "don ' t" -> "don't"
        text = re.sub(r"(\w)\s+'\s+(\w)", r"\1'\2", text)
        
        # 5. –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ü–£–ù–ö–¢–£–ê–¶–ò–Æ
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        text = re.sub(r'\s+([,.!?;:])', r'\1', text)
        
        # 6. –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ü–†–û–ë–ï–õ–û–í
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'\s+', ' ', text)
        text = text.strip()
        
        return text
    
    # ============================================================================
    # [OK] –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –ö–û–î –ó–ê–í–ï–†–®–ï–ù
    # ============================================================================

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
textgen_webui_service = TextGenWebUIService()
