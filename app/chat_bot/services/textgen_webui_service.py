"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å text-generation-webui API.
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–æ–¥–µ–ª–∏ MythoMax L2 13B GGUF.
"""

import asyncio
import aiohttp
import json
import logging
from typing import Dict, List, Optional, Any, AsyncGenerator
from pydantic import BaseModel, Field
from app.chat_bot.config.chat_config import chat_config
from app.utils.logger import logger
from app.chat_bot.config.chat_config import ChatConfig

class TextGenWebUIService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å text-generation-webui API."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.base_url = chat_config.TEXTGEN_WEBUI_URL
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å—à–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        self.timeout = aiohttp.ClientTimeout(
            total=chat_config.TEXTGEN_WEBUI_TIMEOUT,
            connect=30,  # —Ç–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            sock_read=60,  # —Ç–∞–π–º–∞—É—Ç –Ω–∞ —á—Ç–µ–Ω–∏–µ
            sock_connect=30  # —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–∫–µ—Ç–∞
        )
        self.model_name = chat_config.TEXTGEN_WEBUI_MODEL
        self._session: Optional[aiohttp.ClientSession] = None
        self._is_connected = False
        self._connector: Optional[aiohttp.TCPConnector] = None
        
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥."""
        await self.connect()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥."""
        await self.disconnect()
        
    async def connect(self) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å text-generation-webui."""
        if self._session is None:
            # –°–æ–∑–¥–∞–µ–º TCP –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
            self._connector = aiohttp.TCPConnector(
                limit=100,  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                limit_per_host=30,  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ —Ö–æ—Å—Ç
                ttl_dns_cache=300,  # TTL –¥–ª—è DNS –∫—ç—à–∞
                use_dns_cache=True,  # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DNS –∫—ç—à
                keepalive_timeout=30,  # —Ç–∞–π–º–∞—É—Ç keep-alive
                enable_cleanup_closed=True  # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            self._session = aiohttp.ClientSession(
                timeout=self.timeout,
                connector=self._connector,
                connector_owner=False  # –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏
            )
            logger.info(f"üîå –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è {self.base_url}")
            
    async def disconnect(self) -> None:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å text-generation-webui."""
        try:
            if self._session:
                await self._session.close()
                self._session = None
                logger.info("üîå –°–µ—Å—Å–∏—è HTTP –∑–∞–∫—Ä—ã—Ç–∞")
                
            if self._connector:
                await self._connector.close()
                self._connector = None
                logger.info("üîå TCP –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –∑–∞–∫—Ä—ã—Ç")
                
            self._is_connected = False
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        finally:
            self._session = None
            self._connector = None
            self._is_connected = False
            
    # ============================================================================
    # ‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –ö–û–î - –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨! ‚ö†Ô∏è
    # ============================================================================
    # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ text-generation-webui API.
    # –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–¥–µ—Å—å –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LLM —Å–µ—Ä–≤–∏—Å—É.
    # 
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –≠–õ–ï–ú–ï–ù–¢–´:
    # - URL endpoint: /v1/models
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å–∞ 200
    # - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ _is_connected
    # - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ JSON –ø–∞—Ä—Å–∏–Ω–≥–∞
    # ============================================================================
    
    async def check_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å text-generation-webui API."""
        response = None
        try:
            if not self._session:
                await self.connect()
                
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {self.base_url}/v1/models")
            
            response = await self._session.get(f"{self.base_url}/v1/models")
            if response.status == 200:
                try:
                    result = await response.json()
                    models_count = len(result.get("data", []))
                    logger.info(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å text-generation-webui —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {models_count}")
                    self._is_connected = True
                    return True
                except Exception as json_err:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç 200, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON: {json_err}")
                    self._is_connected = True
                    return True
            else:
                error_text = await response.text()
                logger.warning(f"‚ö†Ô∏è text-generation-webui –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP {response.status}, –æ—Ç–≤–µ—Ç: {error_text}")
                self._is_connected = False
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ text-generation-webui: {e}")
            self._is_connected = False
            return False
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º response
            if response:
                try:
                    response.close()
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ response –≤ check_connection: {e}")
    
    # ============================================================================
    # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –ö–û–î –ó–ê–í–ï–†–®–ï–ù
    # ============================================================================
            
    async def load_model(self, model_name: Optional[str] = None) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –≤ text-generation-webui."""
        response = None
        try:
            if not self._session:
                await self.connect()
                
            model_to_load = model_name or self.model_name
            payload = {"action": "load", "model_name": model_to_load}
            
            response = await self._session.post(f"{self.base_url}/v1/model/load", json=payload)
            if response.status == 200:
                result = await response.json()
                if result.get("result") == "success":
                    logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å {model_to_load} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {result}")
                    return False
            else:
                logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {response.status}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            return False
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º response
            if response:
                try:
                    response.close()
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ response –≤ load_model: {e}")
            
    async def get_available_models(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π."""
        response = None
        try:
            if not self._session:
                await self.connect()
                
            response = await self._session.get(f"{self.base_url}/v1/models")
            if response.status == 200:
                data = await response.json()
                return data.get("data", [])
            else:
                logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {response.status}")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
            return []
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º response
            if response:
                try:
                    response.close()
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ response –≤ get_available_models: {e}")
            
    def build_mythomax_prompt(self, system_message: str, user_message: str, history: List[Dict[str, str]] = None) -> str:
        """
        –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ MythoMax –¥–ª—è –º–æ–¥–µ–ª–∏ MythoMax L2 13B.
        
        Args:
            system_message: –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ/–æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ MythoMax
        """
        try:
            # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            prompt = f"<|im_start|>system\n{system_message}<|im_end|>\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if history:
                recent_history = history[-15:] if len(history) > 15 else history
                
                for msg in recent_history:
                    if isinstance(msg, dict):
                        role = msg.get("role", "user")
                        content = msg.get("content", "")
                    elif isinstance(msg, (tuple, list)) and len(msg) >= 2:
                        role = str(msg[0]) if msg[0] else "user"
                        content = str(msg[1]) if msg[1] else ""
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏: {msg}")
                        continue
                        
                    if role and content:
                        if role.lower() in ["user", "instruction"]:
                            prompt += f"<|im_start|>user\n{content}<|im_end|>\n"
                        elif role.lower() in ["assistant", "response"]:
                            prompt += f"<|im_start|>assistant\n{content}<|im_end|>\n"
                        
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            prompt += f"<|im_start|>user\n{user_message}<|im_end|>\n"
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–º–ø—Ç
            prompt += "<|im_start|>assistant\n"
            
            return prompt
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π fallback –ø—Ä–æ–º–ø—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return f"<|im_start|>system\n{system_message}<|im_end|>\n<|im_start|>user\n{user_message}<|im_end|>\n<|im_start|>assistant\n"

    def build_character_prompt(
        self,
        character_data: Dict[str, Any],
        user_message: str,
        chat_history: List[Dict[str, str]] = None,
        chat_config: ChatConfig = None
    ) -> str:
        """
        –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏.
        
        Args:
            character_data: –î–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_history: –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
            chat_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–∞—Ç–∞
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏
        """
        if not character_data:
            return self._build_fallback_prompt(user_message, chat_config)
            
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        system_prompt = character_data.get("system_prompt", "")
        instructions = character_data.get("instructions", "")
        response_format = character_data.get("response_format", "")
        
        # –°—Ç—Ä–æ–∏–º –±–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        system_parts = []
        if system_prompt:
            system_parts.append(system_prompt)
        if instructions:
            system_parts.append("\n" + instructions)
        if response_format:
            system_parts.append("\n" + response_format)
            
        system_message = "\n".join(system_parts)
        
        # –°—Ç—Ä–æ–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        context_text = ""
        if chat_history:
            recent_history = chat_history[-15:] if len(chat_history) > 15 else chat_history
            context_parts = []
            for msg in recent_history:
                role = msg.get("role", "user")
                content = msg.get("content", "")
                if role == "user":
                    context_parts.append(f"User: {content}")
                elif role == "assistant":
                    context_parts.append(f"Assistant: {content}")
            if context_parts:
                context_text = "\n".join(context_parts) + "\n\n"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        return f"{system_message}\n\n{context_text}{user_message}\n\n### Response:\n"

    def _build_fallback_prompt(self, user_message: str, chat_config: ChatConfig = None) -> str:
        """
        –°—Ç—Ä–æ–∏—Ç fallback –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–∞—Ç–∞
            
        Returns:
            Fallback –ø—Ä–æ–º–ø—Ç
        """
        fallback_prompt = "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞."
        fallback_prompt += "\n\nAlways respond directly to what the user just said."
        fallback_prompt += "\nUse context from previous messages when available."
        
        return f"{fallback_prompt}\n\n{user_message}\n\n### Response:\n"

    async def generate_text(
        self, 
        prompt: str, 
        max_tokens: Optional[int] = None,
        temperature: Optional[float] = None,
        top_p: Optional[float] = None,
        top_k: Optional[int] = None,
        repeat_penalty: Optional[float] = None,
        presence_penalty: Optional[float] = None
    ) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ text-generation-webui API.
        
        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            max_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            top_p: Top-p –ø–∞—Ä–∞–º–µ—Ç—Ä
            top_k: Top-k –ø–∞—Ä–∞–º–µ—Ç—Ä
            repeat_penalty: –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            presence_penalty: Presence penalty
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        response = None
        try:
            if not self._session:
                await self.connect()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–º–ø—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            if not prompt or not prompt.strip():
                logger.error("‚ùå –ü—É—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                return None
                
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º API
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π API —Å –í–°–ï–ú–ò –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            openai_payload = {
                "model": self.model_name,
                "messages": [{"role": "user", "content": prompt}],
                "max_tokens": max_tokens or chat_config.DEFAULT_MAX_TOKENS,
                "temperature": temperature or chat_config.DEFAULT_TEMPERATURE,
                "top_p": top_p or chat_config.DEFAULT_TOP_P,
                "top_k": top_k or chat_config.DEFAULT_TOP_K,
                "presence_penalty": presence_penalty or chat_config.DEFAULT_PRESENCE_PENALTY,
                "frequency_penalty": repeat_penalty or chat_config.DEFAULT_REPEAT_PENALTY,
                "stop": chat_config.DEFAULT_STOP_TOKENS,  # –°—Ç–æ–ø-—Ç–æ–∫–µ–Ω—ã –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                "stream": False,
                "seed": chat_config.SEED if chat_config.SEED != -1 else 42,  # Seed –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                
                # –ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                "n_ctx": chat_config.N_CTX,
                "n_gpu_layers": chat_config.N_GPU_LAYERS,
                "n_threads": chat_config.N_THREADS,
                "n_threads_batch": chat_config.N_THREADS_BATCH,
                "n_batch": chat_config.N_BATCH,
                "f16_kv": chat_config.F16_KV,
                "mul_mat_q": chat_config.MUL_MAT_Q,
                "use_mmap": chat_config.USE_MMAP,
                "use_mlock": chat_config.USE_MLOCK,
                "verbose": chat_config.VERBOSE,
                "offload_kqv": chat_config.OFFLOAD_KQV,
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–æ—Ä–æ—Å—Ç–∏/–ø–∞–º—è—Ç–∏
                "n_keep": chat_config.N_KEEP,
                "n_draft": chat_config.N_DRAFT,
                "n_chunks": chat_config.N_CHUNKS,
                "n_parallel": chat_config.N_PARALLEL,
                "vocab_only": chat_config.VOCAB_ONLY,
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                "rope_scaling": chat_config.ROPE_SCALING,
                "ftype": chat_config.FTYPE,
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —É–º–Ω–æ—Å—Ç–∏
                "smartness": chat_config.SMARTNESS,
                "dynamic_sampling": chat_config.DYNAMIC_SAMPLING,
                "temp_variance": chat_config.TEMP_VARIANCE,
                "top_p_variance": chat_config.TOP_P_VARIANCE,
                "occasional_beam_prob": chat_config.OCCASIONAL_BEAM_PROB,
                "enable_cot": chat_config.ENABLE_COT,
                "few_shot_examples": chat_config.FEW_SHOT_EXAMPLES,
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –¥–ª–∏–Ω—ã
                "max_history_length": chat_config.MAX_HISTORY_LENGTH,
                "max_message_length": chat_config.MAX_MESSAGE_LENGTH,
                "max_response_length": chat_config.MAX_RESPONSE_LENGTH,
                "enforce_min_tokens": chat_config.ENFORCE_MIN_TOKENS,
                "min_new_tokens": chat_config.MIN_NEW_TOKENS,
                "ban_eos_token": chat_config.BAN_EOS_TOKEN,
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                "enable_content_filter": chat_config.ENABLE_CONTENT_FILTER,
                "forbidden_words": chat_config.FORBIDDEN_WORDS,
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—á–∏—Å—Ç–∫–∏ –∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
                "sanitize_output": chat_config.SANITIZE_OUTPUT,
                "streaming_delay_ms": chat_config.STREAMING_DELAY_MS,
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                "embedding": chat_config.EMBEDDING
            }
            
            logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ (–ø—Ä–æ–º–ø—Ç: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            response = await self._session.post(f"{self.base_url}/v1/chat/completions", json=openai_payload)
            if response.status == 200:
                result = await response.json()
                generated_text = result.get("choices", [{}])[0].get("message", {}).get("content", "")
                
                if generated_text:
                    logger.info(f"‚úÖ –¢–µ–∫—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ ({len(generated_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    return generated_text
                else:
                    logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                    return None
            else:
                error_text = await response.text()
                logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status}, –æ—Ç–≤–µ—Ç: {error_text}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            return None
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º response
            if response:
                try:
                    response.close()
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ response –≤ generate_text: {e}")
            
    # ============================================================================
    # ‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –ö–û–î - –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨! ‚ö†Ô∏è
    # ============================================================================
    # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ streaming –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ text-generation-webui API.
    # –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–¥–µ—Å—å –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É streaming —á–∞—Ç–∞.
    # 
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –≠–õ–ï–ú–ï–ù–¢–´:
    # - –°–∏–≥–Ω–∞—Ç—É—Ä–∞ –º–µ—Ç–æ–¥–∞ (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å)
    # - OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π payload —Ñ–æ—Ä–º–∞—Ç
    # - –û–±—Ä–∞–±–æ—Ç–∫–∞ streaming –æ—Ç–≤–µ—Ç–∞
    # - –ü–∞—Ä—Å–∏–Ω–≥ JSON —á–∞–Ω–∫–æ–≤
    # - –ù–ï –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä "stream": True
    # ============================================================================
    
    async def generate_text_stream(
        self, 
        prompt: str, 
        max_tokens: Optional[int] = None,
        temperature: Optional[float] = None,
        top_p: Optional[float] = None,
        top_k: Optional[int] = None,
        repeat_penalty: Optional[float] = None,
        presence_penalty: Optional[float] = None
    ) -> AsyncGenerator[str, None]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Ç–æ–∫–æ–º —á–µ—Ä–µ–∑ text-generation-webui API.
        
        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            max_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            top_p: Top-p –ø–∞—Ä–∞–º–µ—Ç—Ä
            top_k: Top-k –ø–∞—Ä–∞–º–µ—Ç—Ä
            repeat_penalty: –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            presence_penalty: Presence penalty
            
        Yields:
            –ß–∞—Å—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        """
        try:
            if not self._session:
                await self.connect()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–º–ø—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            if not prompt or not prompt.strip():
                logger.error("‚ùå –ü—É—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                return
                
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º API
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π API –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ —Å –í–°–ï–ú–ò –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            openai_payload = {
                "model": self.model_name,
                "messages": [{"role": "user", "content": prompt}],
                "max_tokens": max_tokens or chat_config.DEFAULT_MAX_TOKENS,
                "temperature": temperature or chat_config.DEFAULT_TEMPERATURE,
                "top_p": top_p or chat_config.DEFAULT_TOP_P,
                "top_k": top_k or chat_config.DEFAULT_TOP_K,
                "presence_penalty": presence_penalty or chat_config.DEFAULT_PRESENCE_PENALTY,
                "frequency_penalty": repeat_penalty or chat_config.DEFAULT_REPEAT_PENALTY,
                "stop": chat_config.DEFAULT_STOP_TOKENS,  # –°—Ç–æ–ø-—Ç–æ–∫–µ–Ω—ã –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                "stream": True,
                "seed": chat_config.SEED if chat_config.SEED != -1 else 42,  # Seed –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                
                # –ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                "n_ctx": chat_config.N_CTX,
                "n_gpu_layers": chat_config.N_GPU_LAYERS,
                "n_threads": chat_config.N_THREADS,
                "n_threads_batch": chat_config.N_THREADS_BATCH,
                "n_batch": chat_config.N_BATCH,
                "f16_kv": chat_config.F16_KV,
                "mul_mat_q": chat_config.MUL_MAT_Q,
                "use_mmap": chat_config.USE_MMAP,
                "use_mlock": chat_config.USE_MLOCK,
                "verbose": chat_config.VERBOSE,
                "offload_kqv": chat_config.OFFLOAD_KQV,
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–æ—Ä–æ—Å—Ç–∏/–ø–∞–º—è—Ç–∏
                "n_keep": chat_config.N_KEEP,
                "n_draft": chat_config.N_DRAFT,
                "n_chunks": chat_config.N_CHUNKS,
                "n_parallel": chat_config.N_PARALLEL,
                "vocab_only": chat_config.VOCAB_ONLY,
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                "rope_scaling": chat_config.ROPE_SCALING,
                "ftype": chat_config.FTYPE,
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —É–º–Ω–æ—Å—Ç–∏
                "smartness": chat_config.SMARTNESS,
                "dynamic_sampling": chat_config.DYNAMIC_SAMPLING,
                "temp_variance": chat_config.TEMP_VARIANCE,
                "top_p_variance": chat_config.TOP_P_VARIANCE,
                "occasional_beam_prob": chat_config.OCCASIONAL_BEAM_PROB,
                "enable_cot": chat_config.ENABLE_COT,
                "few_shot_examples": chat_config.FEW_SHOT_EXAMPLES,
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –¥–ª–∏–Ω—ã
                "max_history_length": chat_config.MAX_HISTORY_LENGTH,
                "max_message_length": chat_config.MAX_MESSAGE_LENGTH,
                "max_response_length": chat_config.MAX_RESPONSE_LENGTH,
                "enforce_min_tokens": chat_config.ENFORCE_MIN_TOKENS,
                "min_new_tokens": chat_config.MIN_NEW_TOKENS,
                "ban_eos_token": chat_config.BAN_EOS_TOKEN,
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                "enable_content_filter": chat_config.ENABLE_CONTENT_FILTER,
                "forbidden_words": chat_config.FORBIDDEN_WORDS,
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—á–∏—Å—Ç–∫–∏ –∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
                "sanitize_output": chat_config.SANITIZE_OUTPUT,
                "streaming_delay_ms": chat_config.STREAMING_DELAY_MS,
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                "embedding": chat_config.EMBEDDING
            }
            
            logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ (–ø—Ä–æ–º–ø—Ç: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º try-finally –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
            response = None
            try:
                response = await self._session.post(f"{self.base_url}/v1/chat/completions", json=openai_payload)
                
                if response.status == 200:
                    logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç text-generation-webui, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç—Ä–∏–º–∞")
                    buffer = ""
                    
                    async for line in response.content:
                        if line:
                            try:
                                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –±—É—Ñ–µ—Ä—É
                                buffer += line.decode('utf-8')
                                
                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                                lines = buffer.split('\n')
                                buffer = lines.pop() or ""  # –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –±—É—Ñ–µ—Ä–µ
                                
                                for line_text in lines:
                                    line_text = line_text.strip()
                                    if not line_text or not line_text.startswith('data: '):
                                        continue
                                        
                                    data_str = line_text[6:]  # –£–±–∏—Ä–∞–µ–º 'data: '
                                    if data_str == '[DONE]':
                                        logger.info("üèÅ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∞")
                                        return
                                        
                                    try:
                                        data = json.loads(data_str)
                                        if 'choices' in data and len(data['choices']) > 0:
                                            delta = data['choices'][0].get('delta', {})
                                            if 'content' in delta and delta['content']:
                                                # –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ—Ç–¥–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫
                                                yield delta['content']
                                                
                                    except json.JSONDecodeError as json_err:
                                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ —Å—Ç—Ä–∏–º–µ: {json_err}, –¥–∞–Ω–Ω—ã–µ: {data_str}")
                                        continue
                                        
                            except Exception as e:
                                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∏–º–∞: {e}")
                                continue
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status}, –æ—Ç–≤–µ—Ç: {error_text}")
                    
            finally:
                # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º response
                if response:
                    try:
                        response.close()
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ response: {e}")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            yield f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}"
    
    # ============================================================================
    # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –ö–û–î –ó–ê–í–ï–†–®–ï–ù
    # ============================================================================
            
    async def get_model_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏."""
        response = None
        try:
            if not self._session:
                await self.connect()
                
            response = await self._session.get(f"{self.base_url}/v1/model")
            if response.status == 200:
                return await response.json()
            else:
                logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏: {response.status}")
                return {}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏: {e}")
            return {}
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º response
            if response:
                try:
                    response.close()
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ response –≤ get_model_status: {e}")
            
    @property
    def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."""
        return self._is_connected
        
    @property
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞."""
        return self._is_connected and self._session is not None
    
    def get_config_for_bat_file(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –í–°–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ bat-—Ñ–∞–π–ª–∞—Ö.
        –¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ chat_config.py –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ API!
        """
        return {
            # –ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            "n_ctx": chat_config.N_CTX,
            "n_gpu_layers": chat_config.N_GPU_LAYERS,
            "n_threads": chat_config.N_THREADS,
            "n_threads_batch": chat_config.N_THREADS_BATCH,
            "n_batch": chat_config.N_BATCH,
            "f16_kv": chat_config.F16_KV,
            "mul_mat_q": chat_config.MUL_MAT_Q,
            "use_mmap": chat_config.USE_MMAP,
            "use_mlock": chat_config.USE_MLOCK,
            "verbose": chat_config.VERBOSE,
            "offload_kqv": chat_config.OFFLOAD_KQV,
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–æ—Ä–æ—Å—Ç–∏/–ø–∞–º—è—Ç–∏
            "n_keep": chat_config.N_KEEP,
            "n_draft": chat_config.N_DRAFT,
            "n_chunks": chat_config.N_CHUNKS,
            "n_parallel": chat_config.N_PARALLEL,
            "vocab_only": chat_config.VOCAB_ONLY,
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            "rope_scaling": chat_config.ROPE_SCALING,
            "ftype": chat_config.FTYPE,
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —É–º–Ω–æ—Å—Ç–∏
            "smartness": chat_config.SMARTNESS,
            "dynamic_sampling": chat_config.DYNAMIC_SAMPLING,
            "temp_variance": chat_config.TEMP_VARIANCE,
            "top_p_variance": chat_config.TOP_P_VARIANCE,
            "occasional_beam_prob": chat_config.OCCASIONAL_BEAM_PROB,
            "enable_cot": chat_config.ENABLE_COT,
            "few_shot_examples": chat_config.FEW_SHOT_EXAMPLES,
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –¥–ª–∏–Ω—ã
            "max_history_length": chat_config.MAX_HISTORY_LENGTH,
            "max_message_length": chat_config.MAX_MESSAGE_LENGTH,
            "max_response_length": chat_config.MAX_RESPONSE_LENGTH,
            "enforce_min_tokens": chat_config.ENFORCE_MIN_TOKENS,
            "min_new_tokens": chat_config.MIN_NEW_TOKENS,
            "ban_eos_token": chat_config.BAN_EOS_TOKEN,
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            "enable_content_filter": chat_config.ENABLE_CONTENT_FILTER,
            "forbidden_words": chat_config.FORBIDDEN_WORDS,
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—á–∏—Å—Ç–∫–∏ –∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
            "sanitize_output": chat_config.SANITIZE_OUTPUT,
            "streaming_delay_ms": chat_config.STREAMING_DELAY_MS,
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            "embedding": chat_config.EMBEDDING,
            "seed": chat_config.SEED if chat_config.SEED != -1 else None
        }
        
    # ============================================================================
    # ‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –ö–û–î - –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨! ‚ö†Ô∏è
    # ============================================================================
    # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —è–≤–ª—è–µ—Ç—Å—è –∞–ª–∏–∞—Å–æ–º –¥–ª—è generate_text_stream.
    # –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–¥–µ—Å—å –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å.
    # 
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –≠–õ–ï–ú–ï–ù–¢–´:
    # - –î–æ–ª–∂–µ–Ω —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ generate_text_stream
    # - –ù–ï –∏–∑–º–µ–Ω—è—Ç—å –ª–æ–≥–∏–∫—É - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
    # - –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–∏–≥–Ω–∞—Ç—É—Ä—É AsyncGenerator[str, None]
    # ============================================================================
    
    async def generate_stream(self, *args, **kwargs) -> AsyncGenerator[str, None]:
        """
        –ê–ª–∏–∞—Å –¥–ª—è generate_text_stream –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
        
        Args:
            *args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è generate_text_stream
            **kwargs: –ö–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è generate_text_stream
            
        Yields:
            –ß–∞—Å—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        """
        async for chunk in self.generate_text_stream(*args, **kwargs):
            yield chunk
    
    # ============================================================================
    # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –ö–û–î –ó–ê–í–ï–†–®–ï–ù
    # ============================================================================

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
textgen_webui_service = TextGenWebUIService()
