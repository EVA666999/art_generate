"""
–°–∏—Å—Ç–µ–º–∞ —Ä–µ–µ—Å—Ç—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
"""
import os
import importlib
import logging
from typing import Dict, List, Any, Optional
from pathlib import Path

logger = logging.getLogger(__name__)


class CharacterRegistry:
    """–†–µ–µ—Å—Ç—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–µ—Å—Ç—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."""
        self.characters: Dict[str, Dict[str, Any]] = {}
        self.characters_dir = Path(__file__).parent.parent / "models" / "characters"
        self._load_characters()
    
    def _load_characters(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –ø–∞–ø–∫–∏ characters."""
        try:
            if not self.characters_dir.exists():
                logger.error(f"[ERROR] –ü–∞–ø–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.characters_dir}")
                return
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç Python —Ñ–∞–π–ª–æ–≤
            for file_path in self.characters_dir.glob("*.py"):
                if file_path.name == "__init__.py":
                    continue
                
                character_name = file_path.stem
                try:
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                    module_name = f"app.chat_bot.models.characters.{character_name}"
                    module = importlib.import_module(module_name)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_character_data
                    if hasattr(module, 'get_character_data'):
                        character_data = module.get_character_data()
                        
                        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                        if self._validate_character_data(character_data, character_name):
                            self.characters[character_name] = character_data
                            logger.info(f"[OK] –ü–µ—Ä—Å–æ–Ω–∞–∂ '{character_name}' –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                        else:
                            logger.warning(f"[WARNING] –ü–µ—Ä—Å–æ–Ω–∞–∂ '{character_name}' –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
                    else:
                        logger.warning(f"[WARNING] –í —Ñ–∞–π–ª–µ {file_path.name} –Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ get_character_data")
                        
                except Exception as e:
                    logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ '{character_name}': {e}")
            
            logger.info(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {len(self.characters)}")
            
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
    
    def _validate_character_data(self, data: Dict[str, Any], name: str) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π."""
        required_fields = ['name', 'character_appearance', 'location']
        
        for field in required_fields:
            if field not in data:
                logger.warning(f"[WARNING] –£ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ '{name}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}'")
                return False
        
        if not isinstance(data['name'], str) or not data['name'].strip():
            logger.warning(f"[WARNING] –£ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ '{name}' –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è")
            return False
        
        if not isinstance(data['character_appearance'], str) or not data['character_appearance'].strip():
            logger.warning(f"[WARNING] –£ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ '{name}' –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏")
            return False
        
        if not isinstance(data['location'], str) or not data['location'].strip():
            logger.warning(f"[WARNING] –£ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ '{name}' –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏")
            return False
        
        return True
    
    def get_character(self, name: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –∏–º–µ–Ω–∏ (–Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)."""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if name in self.characters:
            return self.characters[name]
        
        # –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É –ø–æ–∏—Å–∫
        for char_name, char_data in self.characters.items():
            if char_name.lower() == name.lower():
                return char_data
        
        return None
    
    def get_all_characters(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."""
        return self.characters.copy()
    
    def get_character_list(self) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è API."""
        return [
            {
                'name': name,
                'description': data.get('description', ''),
                'display_name': data.get('display_name', name.title())
            }
            for name, data in self.characters.items()
        ]
    
    def reload_characters(self) -> None:
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."""
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...")
        self.characters.clear()
        self._load_characters()
    
    def add_character_manually(self, name: str, data: Dict[str, Any]) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤—Ä—É—á–Ω—É—é (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)."""
        if self._validate_character_data(data, name):
            self.characters[name] = data
            logger.info(f"[OK] –ü–µ—Ä—Å–æ–Ω–∞–∂ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
            return True
        return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–µ—Å—Ç—Ä–∞
character_registry = CharacterRegistry()


def get_character_registry() -> CharacterRegistry:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–µ—Å—Ç—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."""
    return character_registry


def get_character_data(character_name: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –∏–º–µ–Ω–∏."""
    return character_registry.get_character(character_name)


def get_all_characters() -> Dict[str, Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."""
    return character_registry.get_all_characters()


def reload_characters() -> None:
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."""
    character_registry.reload_characters()
