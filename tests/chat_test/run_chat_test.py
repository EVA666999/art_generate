"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ —á–∞—Ç-–±–æ—Ç–∞
"""

import requests
import json
import time
from typing import List, Dict, Any

# –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
TEST_QUESTIONS = [
    "hi sister i see your black panties very nice ass",
    "maybe you could take off your panties and sit on my dick?",
    "I feel your ass with my dick and I can't hold back any longer I stuck it right in your ass describe your emotions",
    "I came in your ass",
    "did you like it sister?",
    "describe how you like it when I enter your ass",
    "now get on your knees and suck my dick sister"
]

def send_message_to_chatbot(
    message: str,
    session_id: str = "test_session",
    history: List[Dict[str, str]] | None = None,
    max_retries: int = 3,
) -> Dict[str, Any]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç-–±–æ—Ç —á–µ—Ä–µ–∑ API
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        session_id: ID —Å–µ—Å—Å–∏–∏
        
    Returns:
        –û—Ç–≤–µ—Ç –æ—Ç —á–∞—Ç-–±–æ—Ç–∞
    """
    for attempt in range(max_retries):
        try:
            # URL –≤–∞—à–µ–≥–æ API —á–∞—Ç-–±–æ—Ç–∞ —Å post-processing
            url = "http://localhost:8000/chat"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å post-processing
            
            payload = {
                "message": message,
                "history": history or [],
                "session_id": session_id,
            }
            
            headers = {
                "Content-Type": "application/json"
            }
            
            response = requests.post(url, json=payload, headers=headers, timeout=120)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 2 –º–∏–Ω—É—Ç
            
            if response.status_code == 200:
                return response.json()
            elif response.status_code == 500:
                # –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                if attempt < max_retries - 1:
                    print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞ (HTTP 500), –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑...")
                    time.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                    continue
                else:
                    return {"error": f"HTTP {response.status_code}: {response.text}"}
            else:
                return {"error": f"HTTP {response.status_code}: {response.text}"}
                
        except requests.exceptions.Timeout as e:
            if attempt < max_retries - 1:
                print(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑...")
                time.sleep(3)  # –ë–æ–ª—å—à–µ –ø–∞—É–∑—ã –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
                continue
            else:
                return {"error": f"–¢–∞–π–º–∞—É—Ç –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {str(e)}"}
        except requests.exceptions.RequestException as e:
            if attempt < max_retries - 1:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑...")
                time.sleep(2)
                continue
            else:
                return {"error": f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {str(e)}"}
        except Exception as e:
            return {"error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"}
    
    return {"error": f"–í—Å–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã"}

def run_chatbot_test(total_messages: int = 10) -> List[Dict[str, Any]]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —á–∞—Ç-–±–æ—Ç–∞
    
    Returns:
        –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
    """
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —á–∞—Ç-–±–æ—Ç–∞...")
    print("=" * 60)
    
    answers: List[Dict[str, Any]] = []
    session_id = f"test_session_{int(time.time())}"
    
    # –ë–µ—Ä–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
    questions: List[str] = [
        TEST_QUESTIONS[i % len(TEST_QUESTIONS)] for i in range(total_messages)
    ]
    print(f"üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É")

    # –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {role, content}
    history: List[Dict[str, str]] = []

    for i, question in enumerate(questions, 1):
        print(f"\nüìù –í–æ–ø—Ä–æ—Å {i}: {question}")
        print("-" * 40)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç-–±–æ—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        response = send_message_to_chatbot(question, session_id, history)
        
        if "error" in response:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response['error']}")
            answer_text = f"–û–®–ò–ë–ö–ê: {response['error']}"
        else:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ JSON
            answer_text = response.get("response", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
            model = response.get('model', 'Unknown')
            
            # üîß –ü–†–û–í–ï–†–Ø–ï–ú POST-PROCESSING –ò–ù–§–û–†–ú–ê–¶–ò–Æ
            post_info = response.get("post_processing", {})
            was_truncated = post_info.get("was_truncated", False)
            continuation_used = post_info.get("continuation_used", False)
            processing_time = post_info.get("processing_time", 0.0)
            
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç –º–æ–¥–µ–ª–∏: {model}")
            print(f"üîß POST-PROCESSING:")
            print(f"   üìä –û–±—Ä—ã–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {'–î–ê' if was_truncated else '–ù–ï–¢'}")
            print(f"   üîß –î–æ—Å—Ç—Ä–æ–µ–Ω: {'–î–ê' if continuation_used else '–ù–ï–¢'}")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.3f}s")
            
            # –≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
            if was_truncated and continuation_used:
                print(f"   üéØ –°–¢–ê–¢–£–°: –û–±—Ä—ã–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
            elif was_truncated and not continuation_used:
                print(f"   ‚ö†Ô∏è –°–¢–ê–¢–£–°: –û–±—Ä—ã–≤ –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
            else:
                print(f"   ‚úÖ –°–¢–ê–¢–£–°: –û—Ç–≤–µ—Ç –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        
        print(f"ü§ñ –ü–û–õ–ù–´–ô –û–¢–í–ï–¢:")
        print("=" * 80)
        print(answer_text)
        print("=" * 80)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å post-processing –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        answer_data = {
            "question_number": i,
            "question": question,
            "answer": answer_text,
            "timestamp": time.time(),
            "session_id": session_id
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º post-processing –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if "error" not in response and "post_processing" in response:
            answer_data["post_processing"] = response["post_processing"]
        
        answers.append(answer_data)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        history.append({"role": "user", "content": question})
        history.append({"role": "assistant", "content": answer_text})
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(1)
    
    return answers

def save_test_results(answers: List[Dict[str, Any]], filename: str = "test_results.json"):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –≤ JSON —Ñ–∞–π–ª
    
    Args:
        answers: –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤
        filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(answers, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def save_answers_to_python_file(answers: List[Dict[str, Any]], filename: str = "answers_anna.py"):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç—ã –≤ Python —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    
    Args:
        answers: –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤
        filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            f.write('"""\n')
            f.write('–û—Ç–≤–µ—Ç—ã —á–∞—Ç-–±–æ—Ç–∞ –ê–Ω–Ω–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n')
            f.write('"""\n\n')
            f.write('ANSWERS = [\n')
            
            for answer in answers:
                f.write('    {\n')
                f.write(f'        "question_number": {answer["question_number"]},\n')
                f.write(f'        "question": "{answer["question"]}",\n')
                f.write(f'        "answer": """{answer["answer"]}""",\n')
                f.write('    },\n')
            
            f.write(']\n\n')
            f.write('def print_all_answers():\n')
            f.write('    """\n')
            f.write('    –í—ã–≤–æ–¥–∏—Ç –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã\n')
            f.write('    """\n')
            f.write('    print("–¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã —á–∞—Ç-–±–æ—Ç–∞ –ê–Ω–Ω–∞:")\n')
            f.write('    print("=" * 60)\n')
            f.write('    \n')
            f.write('    for item in ANSWERS:\n')
            f.write('        print(f"\\n–í–æ–ø—Ä–æ—Å {item[\'question_number\']}: {item[\'question\']}")\n')
            f.write('        print(f"–û—Ç–≤–µ—Ç: {item[\'answer\']}")\n')
            f.write('        print("-" * 40)\n\n')
            f.write('if __name__ == "__main__":\n')
            f.write('    print_all_answers()\n')
        
        print(f"\nüíæ –û—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Python —Ñ–∞–π–ª: {e}")

def print_test_summary(answers: List[Dict[str, Any]]):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ —Ç–µ—Å—Ç—É
    
    Args:
        answers: –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤
    """
    print("\n" + "=" * 60)
    print("üìä –°–í–û–î–ö–ê –¢–ï–°–¢–ê")
    print("=" * 60)
    
    total_questions = len(answers)
    successful_answers = sum(1 for a in answers if "–û–®–ò–ë–ö–ê" not in a["answer"])
    failed_answers = total_questions - successful_answers
    
    print(f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}")
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {successful_answers}")
    print(f"–û—à–∏–±–æ–∫: {failed_answers}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_answers/total_questions)*100:.1f}%")
    
    # üîß POST-PROCESSING –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    post_processing_data = [a.get("post_processing", {}) for a in answers if "post_processing" in a]
    
    if post_processing_data:
        print(f"\nüîß POST-PROCESSING –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("=" * 40)
        
        truncated_count = sum(1 for p in post_processing_data if p.get("was_truncated", False))
        continued_count = sum(1 for p in post_processing_data if p.get("continuation_used", False))
        avg_processing_time = sum(p.get("processing_time", 0.0) for p in post_processing_data) / len(post_processing_data)
        
        print(f"üìä –û–±—Ä—ã–≤—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã: {truncated_count}/{total_questions} ({(truncated_count/total_questions)*100:.1f}%)")
        print(f"üîß –û—Ç–≤–µ—Ç—ã –¥–æ—Å—Ç—Ä–æ–µ–Ω—ã: {continued_count}/{total_questions} ({(continued_count/total_questions)*100:.1f}%)")
        print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {avg_processing_time:.3f}s")
        
        if truncated_count > 0:
            success_rate = (continued_count / truncated_count) * 100
            print(f"üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä—ã–≤–æ–≤: {success_rate:.1f}%")
            
            print(f"\nüìã –î–µ—Ç–∞–ª–∏ –æ–±—Ä—ã–≤–æ–≤:")
            for i, answer in enumerate(answers):
                post_info = answer.get("post_processing", {})
                if post_info.get("was_truncated", False):
                    status_emoji = "üéØ" if post_info.get("continuation_used", False) else "‚ö†Ô∏è"
                    status_text = "–∏—Å–ø—Ä–∞–≤–ª–µ–Ω" if post_info.get("continuation_used", False) else "–ù–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω"
                    print(f"   {status_emoji} –í–æ–ø—Ä–æ—Å {answer['question_number']}: –æ–±—Ä—ã–≤ {status_text}")
    else:
        print(f"\n‚ö†Ô∏è Post-processing –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)")
    
    if failed_answers > 0:
        print("\n‚ùå –í–æ–ø—Ä–æ—Å—ã —Å –æ—à–∏–±–∫–∞–º–∏:")
        for answer in answers:
            if "–û–®–ò–ë–ö–ê" in answer["answer"]:
                print(f"  –í–æ–ø—Ä–æ—Å {answer['question_number']}: {answer['question']}")

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
    """
    print("ü§ñ –¢–ï–°–¢ –ß–ê–¢-–ë–û–¢–ê –ê–ù–ù–ê")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    answers = run_chatbot_test()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    save_test_results(answers)
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    print_test_summary(answers)
    
    print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()
