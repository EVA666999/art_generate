#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
"""

import sys
import json
import tempfile
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from app.utils.generation_logger import GenerationLogger
from app.config.default_prompts import get_default_positive_prompts, get_default_negative_prompts

def test_prompt_deduplication():
    """–¢–µ—Å—Ç —á—Ç–æ –ø—Ä–æ–º–ø—Ç—ã –Ω–µ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è –≤ –ª–æ–≥–∞—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
    with tempfile.TemporaryDirectory() as temp_dir:
        logger = GenerationLogger(logs_dir=temp_dir)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_prompt = "beautiful girl"
        user_negative_prompt = "ugly"
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
        default_positive = get_default_positive_prompts()
        default_negative = get_default_negative_prompts()
        
        enhanced_prompt = f"{user_prompt}, {default_positive}"
        enhanced_negative_prompt = f"{user_negative_prompt}, {default_negative}"
        
        settings = {
            "width": 512,
            "height": 853,
            "steps": 30,
            "cfg_scale": 8,
            "sampler_name": "DPM++ 2M Karras",
            "use_default_prompts": True,
            "prompt": enhanced_prompt,  # –£–∂–µ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
            "negative_prompt": enhanced_negative_prompt  # –£–∂–µ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.log_generation(
            prompt=user_prompt,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            negative_prompt=user_negative_prompt,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            character="anna",
            settings=settings,
            generation_time=45.5,
            image_url="test_url",
            success=True,
            enhanced_prompt=enhanced_prompt,  # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            enhanced_negative_prompt=enhanced_negative_prompt  # –£–ª—É—á—à–µ–Ω–Ω—ã–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ª–æ–≥
        log_files = list(Path(temp_dir).glob("generation_*.jsonl"))
        assert len(log_files) == 1, f"–û–∂–∏–¥–∞–ª—Å—è 1 –ª–æ–≥ —Ñ–∞–π–ª, –Ω–∞–π–¥–µ–Ω–æ {len(log_files)}"
        
        with open(log_files[0], 'r', encoding='utf-8') as f:
            log_content = f.read()
            log_entry = json.loads(log_content.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ª–æ–≥–∞
        print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ª–æ–≥–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–ø—Ç—ã
        assert "prompts" in log_entry, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è prompts"
        prompts = log_entry["prompts"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ user_prompt - —ç—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        assert prompts["user_prompt"] == user_prompt, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user_prompt: {prompts['user_prompt']}"
        assert prompts["user_negative_prompt"] == user_negative_prompt, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user_negative_prompt: {prompts['user_negative_prompt']}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ enhanced_prompt —Å–æ–¥–µ—Ä–∂–∏—Ç –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
        assert prompts["enhanced_prompt"] == enhanced_prompt, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π enhanced_prompt: {prompts['enhanced_prompt']}"
        assert prompts["enhanced_negative_prompt"] == enhanced_negative_prompt, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π enhanced_negative_prompt: {prompts['enhanced_negative_prompt']}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ enhanced_prompt —Å–æ–¥–µ—Ä–∂–∏—Ç user_prompt
        assert user_prompt in prompts["enhanced_prompt"], "enhanced_prompt –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç user_prompt"
        assert user_negative_prompt in prompts["enhanced_negative_prompt"], "enhanced_negative_prompt –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç user_negative_prompt"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ enhanced_prompt —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
        assert default_positive in prompts["enhanced_prompt"], "enhanced_prompt –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã"
        assert default_negative in prompts["enhanced_negative_prompt"], "enhanced_negative_prompt –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—ã
        assert prompts["prompt_length"] == len(enhanced_prompt), f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {prompts['prompt_length']} != {len(enhanced_prompt)}"
        assert prompts["negative_prompt_length"] == len(enhanced_negative_prompt), f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {prompts['negative_prompt_length']} != {len(enhanced_negative_prompt)}"
        
        print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print(f"üìä –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç: '{user_prompt}'")
        print(f"üìä –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: '{enhanced_prompt[:100]}...'")
        print(f"üìä –î–ª–∏–Ω–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {len(enhanced_prompt)}")
        print(f"üìä –°–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã: {default_positive in enhanced_prompt}")
        
        return True

def test_no_duplication_in_enhanced_prompts():
    """–¢–µ—Å—Ç —á—Ç–æ –≤ enhanced_prompts –Ω–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ enhanced_prompts...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    user_prompt = "1girl, solo"  # –£–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
    user_negative_prompt = "low quality"  # –£–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
    
    default_positive = get_default_positive_prompts()
    default_negative = get_default_negative_prompts()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ –∂–µ —Å–ª–æ–≤–∞
    assert "1girl" in default_positive, "1girl –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–∞—Ö"
    assert "solo" in default_positive, "solo –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–∞—Ö"
    assert "low quality" in default_negative, "low quality –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–∞—Ö"
    
    # –°–æ–∑–¥–∞–µ–º enhanced –ø—Ä–æ–º–ø—Ç—ã
    enhanced_prompt = f"{user_prompt}, {default_positive}"
    enhanced_negative_prompt = f"{user_negative_prompt}, {default_negative}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞)
    print(f"üìä User prompt: '{user_prompt}'")
    print(f"üìä Default positive: '{default_positive[:50]}...'")
    print(f"üìä Enhanced prompt: '{enhanced_prompt[:100]}...'")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π
    user_words = user_prompt.split(", ")
    for word in user_words:
        count = enhanced_prompt.count(word)
        if count > 1:
            print(f"‚ö†Ô∏è  –°–ª–æ–≤–æ '{word}' –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è {count} —Ä–∞–∑ –≤ enhanced_prompt")
        else:
            print(f"‚úÖ –°–ª–æ–≤–æ '{word}' –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è {count} —Ä–∞–∑ –≤ enhanced_prompt")
    
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    return True

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤...")
    
    try:
        test_prompt_deduplication()
        test_no_duplication_in_enhanced_prompts()
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ü—Ä–æ–º–ø—Ç—ã –Ω–µ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è –≤ –ª–æ–≥–∞—Ö!")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
