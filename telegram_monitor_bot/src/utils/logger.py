"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏
"""
import json
from datetime import datetime
from typing import Dict, List, Any
from pathlib import Path
import aiofiles
from loguru import logger

async def read_generation_stats(file_path: Path) -> List[Dict[str, Any]]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        
    Returns:
        List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    try:
        async with aiofiles.open(file_path, 'r', encoding='utf-8') as f:
            content = await f.read()
            if not content:
                return []
            return json.loads(content)
    except FileNotFoundError:
        logger.warning(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    except json.JSONDecodeError:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON –∏–∑ —Ñ–∞–π–ª–∞ {file_path}")
        return []

def format_generation_message(stats: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    
    Args:
        stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    timestamp = datetime.fromisoformat(stats["timestamp"]).strftime("%Y-%m-%d %H:%M:%S")
    settings = stats.get("settings", {})
    
    message = (
        f"üñº –ù–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è\n"
        f"‚è∞ –í—Ä–µ–º—è: {timestamp}\n"
        f"üìè –†–∞–∑–º–µ—Ä: {settings.get('width', 'N/A')}x{settings.get('height', 'N/A')}\n"
        f"‚öôÔ∏è –®–∞–≥–∏: {settings.get('steps', 'N/A')}\n"
        f"üéØ Sampler: {settings.get('sampler_name', 'N/A')}\n"
        f"‚ö°Ô∏è CFG Scale: {settings.get('cfg_scale', 'N/A')}\n"
        f"‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats.get('execution_time', 'N/A'):.2f} —Å–µ–∫\n"
    )
    
    if "prompt" in settings:
        message += f"\nüìù –ü—Ä–æ–º–ø—Ç:\n{settings['prompt']}\n"
    
    if "negative_prompt" in settings:
        message += f"\n‚ùå –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n{settings['negative_prompt']}\n"
    
    return message 