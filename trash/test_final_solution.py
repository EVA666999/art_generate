#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.chat_bot.services.textgen_webui_service import TextGenWebUIService
from app.chat_bot.schemas.chat import ChatMessage, MessageRole, CharacterConfig
from app.chat_bot.config.chat_config import chat_config


async def test_final_solution():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ"""
    
    print("üß™ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
    print(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"   ‚Ä¢ ENFORCE_MIN_TOKENS: {chat_config.ENFORCE_MIN_TOKENS}")
    print(f"   ‚Ä¢ MIN_NEW_TOKENS: {chat_config.MIN_NEW_TOKENS}")
    print(f"   ‚Ä¢ DEFAULT_MAX_TOKENS: {chat_config.DEFAULT_MAX_TOKENS}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å –æ—á–µ–Ω—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    test_character = CharacterConfig(
        name="TestAnna",
        instructions=(
            "You are Anna, a shy but curious young woman. "
            "CRITICAL: You MUST write responses that are AT LEAST 200-300 characters long. "
            "NEVER give short answers. Always elaborate, add details, describe feelings, "
            "include physical reactions, and ask follow-up questions. "
            "Your responses should be substantial and engaging. "
            "Continue writing until you reach at least 200 characters."
        ),
        system_prompt=(
            "You are having a conversation with your brother. "
            "IMPORTANT: Write detailed, long responses. "
            "Minimum 200 characters per response. "
            "Use descriptive language and include emotions."
        ),
        response_format=(
            "Respond naturally and in detail. "
            "Always write at least 200 characters. "
            "Include emotions, physical sensations, and detailed descriptions. "
            "Ask questions to continue the conversation."
        )
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —è–≤–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –¥–ª–∏–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    test_message = ChatMessage(
        role=MessageRole.USER, 
        content=(
            "Hello! I want you to tell me about your day in great detail. "
            "Please write a long, detailed response with at least 200 characters. "
            "Describe everything you did, how you felt, what you thought about, "
            "and include specific details about your experiences. "
            "Make sure your response is at least 200 characters long."
        )
    )
    
    try:
        async with TextGenWebUIService() as service:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if not await service.check_connection():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ text-generation-webui")
                return
            
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ text-generation-webui —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            print()
            
            # –¢–µ—Å—Ç 1: –° –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            print("üîÑ –¢–µ—Å—Ç 1: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (min_tokens + ban_eos_token)")
            response1, meta1 = await service.generate_response(
                messages=[test_message],
                character_config=test_character,
                max_tokens=600,
                temperature=0.7,
                top_p=0.9,
                top_k=40,
                repeat_penalty=1.1
            )
            print(f"   ‚Ä¢ –û—Ç–≤–µ—Ç: {response1[:150]}...")
            print(f"   ‚Ä¢ –î–ª–∏–Ω–∞: {len(response1)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   ‚Ä¢ –¢–æ–∫–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {meta1.get('tokens_used', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"   ‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {meta1.get('generation_params', {})}")
            print()
            
            # –¢–µ—Å—Ç 2: –° –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–º max_tokens
            print("üîÑ –¢–µ—Å—Ç 2: –í—ã—Å–æ–∫–∏–π max_tokens (800) + –Ω–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")
            response2, meta2 = await service.generate_response(
                messages=[test_message],
                character_config=test_character,
                max_tokens=800,
                temperature=0.3,
                top_p=0.95,
                top_k=30,
                repeat_penalty=1.05
            )
            print(f"   ‚Ä¢ –û—Ç–≤–µ—Ç: {response2[:150]}...")
            print(f"   ‚Ä¢ –î–ª–∏–Ω–∞: {len(response2)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   ‚Ä¢ –¢–æ–∫–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {meta2.get('tokens_used', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print()
            
            # –¢–µ—Å—Ç 3: –° –æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π
            print("üîÑ –¢–µ—Å—Ç 3: –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (0.1) –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏")
            response3, meta3 = await service.generate_response(
                messages=[test_message],
                character_config=test_character,
                max_tokens=700,
                temperature=0.1,
                top_p=0.98,
                top_k=20,
                repeat_penalty=1.02
            )
            print(f"   ‚Ä¢ –û—Ç–≤–µ—Ç: {response3[:150]}...")
            print(f"   ‚Ä¢ –î–ª–∏–Ω–∞: {len(response3)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   ‚Ä¢ –¢–æ–∫–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {meta3.get('tokens_used', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print()
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            print("üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
            lengths = [len(response1), len(response2), len(response3)]
            print(f"   ‚Ä¢ –î–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤: {lengths}")
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {sum(lengths) / len(lengths):.1f}")
            print(f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {min(lengths)}")
            print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {max(lengths)}")
            
            if min(lengths) < 100:
                print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞: –û—Ç–≤–µ—Ç—ã –≤—Å–µ –µ—â–µ –∫–æ—Ä–æ—Ç–∫–∏–µ")
                print("üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print("   ‚Ä¢ –ú–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç min_tokens")
                print("   ‚Ä¢ –ù—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
                print("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ –≤ –≤–µ—Ä—Å–∏–∏ text-generation-webui")
            elif min(lengths) < 200:
                print("‚ö†Ô∏è  –û—Ç–≤–µ—Ç—ã –ª—É—á—à–µ, –Ω–æ –≤—Å–µ –µ—â–µ –∫–æ—Ä–æ—Ç–∫–∏–µ")
                print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
                print("   ‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å max_tokens –µ—â–µ –±–æ–ª—å—à–µ")
                print("   ‚Ä¢ –ü–æ–Ω–∏–∑–∏—Ç—å temperature –¥–æ 0.1")
                print("   ‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å stop_sequence")
            else:
                print("‚úÖ –í—Å–µ –æ—Ç–≤–µ—Ç—ã –∏–º–µ—é—Ç —Ö–æ—Ä–æ—à—É—é –¥–ª–∏–Ω—É!")
                print("üéâ –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞!")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
    print("=" * 50)
    
    asyncio.run(test_final_solution())
    
    print("\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
