#!/usr/bin/env python3
"""
–¢–ï–°–¢ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò ADETAILER
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ ADetailer –≤–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
"""
import asyncio
import httpx
import json
import time
from pathlib import Path
from datetime import datetime

class ADetailerTest:
    """–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ADetailer"""
    
    def __init__(self):
        self.api_url = "http://localhost:8000"
        self.output_dir = Path("trash/test_adetailer")
        self.output_dir.mkdir(parents=True, exist_ok=True)
    
    def log_test(self, message: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {message}")
    
    async def test_adetailer_generation(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å ADetailer"""
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ADETAILER")
        print("=" * 50)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ª–∏—Ü–æ–º
        test_data = {
            "prompt": "beautiful woman portrait, close up face, high quality, photorealistic, detailed eyes, perfect skin, ultra detailed, 8k resolution, professional photography",
            "negative_prompt": "worst quality, low quality, blurry, ugly, deformed, bad anatomy, low resolution, pixelated",
            "use_default_prompts": False,
            "steps": 60,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è ADetailer
            "cfg_scale": 9.0,  # –í—ã—Å–æ–∫–∏–π CFG –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
            "width": 512,
            "height": 512,
            "seed": 42,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–¥ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
            "use_adetailer": True  # –Ø–≤–Ω–æ –≤–∫–ª—é—á–∞–µ–º ADetailer
        }
        
        self.log_test("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å ADetailer...")
        self.log_test(f"üìù –ü—Ä–æ–º–ø—Ç: {test_data['prompt']}")
        self.log_test(f"‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: steps={test_data['steps']}, cfg={test_data['cfg_scale']}")
        
        try:
            async with httpx.AsyncClient(timeout=60.0) as client:
                start_time = time.time()
                
                response = await client.post(
                    f"{self.api_url}/api/generation/generate",
                    json=test_data,
                    headers={"Content-Type": "application/json"}
                )
                
                generation_time = time.time() - start_time
                
                if response.status_code == 200:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    image_data = response.content
                    filename = f"adetailer_test_{int(time.time())}.png"
                    filepath = self.output_dir / filename
                    
                    with open(filepath, "wb") as f:
                        f.write(image_data)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                    headers = response.headers
                    
                    print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                    print(f"‚è±Ô∏è –í—Ä–µ–º—è: {generation_time:.1f} —Å–µ–∫")
                    print(f"üìè –†–∞–∑–º–µ—Ä: {len(image_data)} –±–∞–π—Ç")
                    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
                    
                    print(f"\nüìä –ó–ê–ì–û–õ–û–í–ö–ò –û–¢–í–ï–¢–ê:")
                    print(f"   - Seed: {headers.get('X-Seed', 'N/A')}")
                    print(f"   - Steps: {headers.get('X-Steps', 'N/A')}")
                    print(f"   - CFG: {headers.get('X-CFG-Scale', 'N/A')}")
                    print(f"   - Sampler: {headers.get('X-Sampler', 'N/A')}")
                    print(f"   - Images: {headers.get('X-Images-Generated', 'N/A')}")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if len(image_data) > 50000:
                        print(f"\nüéØ –ê–ù–ê–õ–ò–ó:")
                        print(f"   ‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π: {len(image_data)} –±–∞–π—Ç")
                        print(f"   ‚úÖ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–µ–º–ª–µ–º–æ–µ: {generation_time:.1f} —Å–µ–∫")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ (ADetailer –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º—è)
                        if generation_time > 15.0:
                            print(f"   ‚úÖ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –û–ß–ï–ù–¨ –±–æ–ª—å—à–æ–µ - ADetailer —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ!")
                        elif generation_time > 12.0:
                            print(f"   ‚úÖ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ - ADetailer —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                        elif generation_time > 8.0:
                            print(f"   ‚úÖ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ - ADetailer —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                        else:
                            print(f"   ‚ö†Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±—ã—Å—Ç—Ä–æ–µ - –≤–æ–∑–º–æ–∂–Ω–æ ADetailer –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        
                        print(f"\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! ADetailer –≤–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                        return True
                    else:
                        print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π ({len(image_data)} –±–∞–π—Ç)")
                        return False
                        
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
                    return False
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    async def test_without_adetailer(self):
        """–¢–µ—Å—Ç –±–µ–∑ ADetailer –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        print(f"\nüß™ –¢–ï–°–¢ –ë–ï–ó ADETAILER (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)")
        print("=" * 50)
        
        test_data = {
            "prompt": "beautiful woman portrait, close up face, high quality, photorealistic",
            "negative_prompt": "worst quality, low quality, blurry, ugly, deformed",
            "use_default_prompts": False,
            "steps": 15,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –±–µ–∑ ADetailer
            "cfg_scale": 6.0,  # –ù–∏–∑–∫–∏–π CFG –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            "width": 512,
            "height": 512,
            "seed": 42,  # –¢–æ—Ç –∂–µ —Å–∏–¥
            "use_adetailer": False  # –û—Ç–∫–ª—é—á–∞–µ–º ADetailer
        }
        
        self.log_test("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ë–ï–ó ADetailer...")
        
        try:
            async with httpx.AsyncClient(timeout=60.0) as client:
                start_time = time.time()
                
                response = await client.post(
                    f"{self.api_url}/api/generation/generate",
                    json=test_data,
                    headers={"Content-Type": "application/json"}
                )
                
                generation_time = time.time() - start_time
                
                if response.status_code == 200:
                    image_data = response.content
                    filename = f"no_adetailer_test_{int(time.time())}.png"
                    filepath = self.output_dir / filename
                    
                    with open(filepath, "wb") as f:
                        f.write(image_data)
                    
                    print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ë–ï–ó ADetailer —É—Å–ø–µ—à–Ω–∞!")
                    print(f"‚è±Ô∏è –í—Ä–µ–º—è: {generation_time:.1f} —Å–µ–∫")
                    print(f"üìè –†–∞–∑–º–µ—Ä: {len(image_data)} –±–∞–π—Ç")
                    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
                    
                    return generation_time
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                    return None
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None
    
    async def run_comparison_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç"""
        print("üöÄ –ó–ê–ü–£–°–ö –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê ADETAILER")
        print("=" * 60)
        
        # –¢–µ—Å—Ç —Å ADetailer
        adetailer_success = await self.test_adetailer_generation()
        
        # –¢–µ—Å—Ç –±–µ–∑ ADetailer
        no_adetailer_time = await self.test_without_adetailer()
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
        print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        print("=" * 40)
        
        if adetailer_success and no_adetailer_time:
            print(f"‚úÖ ADetailer: –í–ö–õ–Æ–ß–ï–ù –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"‚úÖ –ë–µ–∑ ADetailer: –†–∞–±–æ—Ç–∞–µ—Ç ({no_adetailer_time:.1f} —Å–µ–∫)")
            print(f"\nüéØ –í–´–í–û–î: ADetailer —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç!")
        elif adetailer_success:
            print(f"‚úÖ ADetailer: –í–ö–õ–Æ–ß–ï–ù –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"‚ùå –ë–µ–∑ ADetailer: –û—à–∏–±–∫–∞")
            print(f"\nüéØ –í–´–í–û–î: ADetailer —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º")
        else:
            print(f"‚ùå ADetailer: –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
            print(f"\nüéØ –í–´–í–û–î: ADetailer –Ω–µ –≤–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        print("=" * 60)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = ADetailerTest()
    await tester.run_comparison_test()

if __name__ == "__main__":
    asyncio.run(main()) 