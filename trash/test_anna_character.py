#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ Anna —Å text-generation-webui.
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.chat_bot.models.characters.anna import get_character_data
from app.chat_bot.services.textgen_webui_service import TextGenWebUIService
from app.chat_bot.config.chat_config import chat_config

async def test_anna_character():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ Anna —Å text-generation-webui."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ Anna —Å text-generation-webui...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    character_data = get_character_data()
    print(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ –∑–∞–≥—Ä—É–∂–µ–Ω: {character_data['name']}")
    print(f"üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {len(character_data['instructions'])} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"üé≠ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {len(character_data['system_prompt'])} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"üìã –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {len(character_data['response_format'])} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
    service = TextGenWebUIService()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print(f"\nüîå –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {chat_config.TEXTGEN_WEBUI_URL}...")
        connected = await service.check_connection()
        
        if not connected:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ text-generation-webui")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä text-generation-webui –∑–∞–ø—É—â–µ–Ω")
            return
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ text-generation-webui —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏...")
        models = await service.get_available_models()
        if models:
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
            for model in models[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   - {model.get('id', 'Unknown')}")
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
        print("\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è Anna...")
        test_message = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
        prompt = service.build_character_prompt(
            character_data=character_data,
            user_message=test_message,
            history=[]
        )
        
        print(f"‚úÖ –ü—Ä–æ–º–ø—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω ({len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print("üìã –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ–º–ø—Ç–∞:")
        print("-" * 50)
        print(prompt[:200] + "..." if len(prompt) > 200 else prompt)
        print("-" * 50)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞
        print(f"\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ –¥–ª—è: '{test_message}'")
        
        response = await service.generate_text(
            prompt=prompt,
            max_tokens=chat_config.MYTHOMAX_MAX_TOKENS,
            temperature=chat_config.MYTHOMAX_TEMPERATURE,
            top_p=chat_config.MYTHOMAX_TOP_P,
            top_k=chat_config.MYTHOMAX_TOP_K,
            repeat_penalty=chat_config.MYTHOMAX_REPEAT_PENALTY,
            presence_penalty=chat_config.MYTHOMAX_PRESENCE_PENALTY
        )
        
        if response:
            print("‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìù –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
            print("üí¨ –û—Ç–≤–µ—Ç:")
            print("-" * 50)
            print(response)
            print("-" * 50)
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await service.disconnect()
        print("\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

async def test_anna_streaming():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç streaming –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ Anna."""
    
    print("\nüåä –¢–µ—Å—Ç–∏—Ä—É–µ–º streaming –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è Anna...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    character_data = get_character_data()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
    service = TextGenWebUIService()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        connected = await service.check_connection()
        if not connected:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ text-generation-webui")
            return
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º streaming
        test_message = "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ"
        prompt = service.build_character_prompt(
            character_data=character_data,
            user_message=test_message,
            history=[]
        )
        
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º streaming –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è: '{test_message}'")
        
        response_parts = []
        async for chunk in service.generate_text_stream(
            prompt=prompt,
            max_tokens=chat_config.MYTHOMAX_MAX_TOKENS,
            temperature=chat_config.MYTHOMAX_TEMPERATURE,
            top_p=chat_config.MYTHOMAX_TOP_P,
            top_k=chat_config.MYTHOMAX_TOP_K,
            repeat_penalty=chat_config.MYTHOMAX_REPEAT_PENALTY,
            presence_penalty=chat_config.MYTHOMAX_PRESENCE_PENALTY
        ):
            if chunk:
                response_parts.append(chunk)
                print(f"üìù –ß–∞–Ω–∫: {chunk}")
        
        if response_parts:
            full_response = "".join(response_parts)
            print(f"\n‚úÖ Streaming –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç ({len(full_response)} —Å–∏–º–≤–æ–ª–æ–≤):")
            print("-" * 50)
            print(full_response)
            print("-" * 50)
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ streaming")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ streaming —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        await service.disconnect()

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ Anna —Å text-generation-webui")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(test_anna_character())
    asyncio.run(test_anna_streaming())
    
    print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
