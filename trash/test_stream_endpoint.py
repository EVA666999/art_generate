#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /stream/{character_id} —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º Anna.
"""

import asyncio
import httpx
import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

async def test_stream_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç /stream/{character_id} —Å Anna."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç /stream/{character_id} —Å Anna...")
    
    # Anna –∏–º–µ–µ—Ç ID 5 –≤ –ë–î
    character_id = 5
    message = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message}'")
    print(f"üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂ ID: {character_id}")
    
    try:
        async with httpx.AsyncClient() as client:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ streaming endpoint
            response = await client.post(
                f"http://localhost:8000/api/v1/chat/stream/{character_id}",
                json={
                    "message": message,
                    "history": [],
                    "session_id": "test_session_123"
                },
                headers={"Content-Type": "application/json"}
            )
            
            print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(response.headers)}")
            
            if response.status_code == 200:
                print("‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω!")
                print("üìñ –ß–∏—Ç–∞–µ–º streaming –æ—Ç–≤–µ—Ç...")
                
                # –ß–∏—Ç–∞–µ–º streaming –æ—Ç–≤–µ—Ç
                content = response.text
                print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤):")
                print("=" * 50)
                print(content)
                print("=" * 50)
                
                # –ü–∞—Ä—Å–∏–º streaming –¥–∞–Ω–Ω—ã–µ
                lines = content.split('\n')
                chunks = []
                
                for line in lines:
                    if line.startswith('data: '):
                        try:
                            json_str = line[6:]  # –£–±–∏—Ä–∞–µ–º 'data: '
                            if json_str.strip():
                                data = json.loads(json_str)
                                if 'chunk' in data:
                                    chunks.append(data['chunk'])
                                    print(f"üì¶ –ß–∞–Ω–∫: {data['chunk']}")
                                if data.get('done'):
                                    print("üèÅ –ü–æ–ª—É—á–µ–Ω —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
                        except json.JSONDecodeError as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                            print(f"   –°—Ç—Ä–æ–∫–∞: {line}")
                
                if chunks:
                    full_response = ''.join(chunks)
                    print(f"\nüéØ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç Anna: {full_response}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Anna –æ—Ç–≤–µ—á–∞–µ—Ç –∫–∞–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂
                    if "anna" in full_response.lower() or "—è" in full_response.lower():
                        print("‚úÖ Anna –æ—Ç–≤–µ—á–∞–µ—Ç –∫–∞–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂!")
                    else:
                        print("‚ùå Anna –æ—Ç–≤–µ—á–∞–µ—Ç –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞")
                    
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                print(f"üìÑ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
                
    except httpx.RequestError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_stream_endpoint())
