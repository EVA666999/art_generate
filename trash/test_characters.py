#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from app.database.db import async_session_maker
from app.chat_bot.models.models import CharacterDB
from sqlalchemy import select


async def test_characters():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –ë–î...")
    
    try:
        async with async_session_maker() as db:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            result = await db.execute(select(CharacterDB).order_by(CharacterDB.name))
            characters = result.scalars().all()
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {len(characters)}")
            
            if characters:
                print("\nüìã –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:")
                for char in characters:
                    print(f"  - ID: {char.id}, –ò–º—è: {char.name}")
                    print(f"    Instructions: {char.instructions[:50] if char.instructions else '–ù–µ—Ç'}...")
                    print(f"    System prompt: {char.system_prompt[:50] if char.system_prompt else '–ù–µ—Ç'}...")
                    print(f"    Response format: {char.response_format[:50] if char.response_format else '–ù–µ—Ç'}...")
                    print()
            else:
                print("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_characters())
