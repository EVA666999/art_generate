#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ Anna.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–æ–¥–µ–ª—å –ø–æ–º–Ω–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π.
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from app.chat_bot.services.textgen_webui_service import TextGenWebUIService
from app.chat_bot.models.characters.anna import CHARACTER_DATA

async def test_context_memory():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –ø–∞–º—è—Ç—å –Ω–∞ 20 —Å–æ–æ–±—â–µ–Ω–∏–π."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –ø–∞–º—è—Ç—å –Ω–∞ 20 —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
    service = TextGenWebUIService()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ text-generation-webui
        await service.connect()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if not await service.check_connection():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ text-generation-webui")
            return
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ text-generation-webui —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ 20 —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏
        history = []
        
        # –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (10 —à—Ç—É–∫) - —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        user_messages = [
            "Hello! My name is Michael.",
            "I work as a programmer in an IT company.",
            "My main programming language is Python.",
            "I create web applications using Django and FastAPI.",
            "I also work with databases like PostgreSQL and MongoDB.",
            "I have experience in machine learning and AI.",
            "I use libraries like scikit-learn and TensorFlow.",
            "I'm currently studying microservices architecture.",
            "I work with Docker and Kubernetes for deployment.",
            "My favorite code editor is VS Code."
        ]
        
        # –û—Ç–≤–µ—Ç—ã Anna (10 —à—Ç—É–∫) - —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        anna_responses = [
            "Hello, Michael! Nice to meet you!",
            "Oh, a programmer! That's so interesting!",
            "Python is an excellent choice! I've heard it's very popular.",
            "Django and FastAPI are modern frameworks, right?",
            "Databases are the foundation of any application.",
            "Machine learning sounds exciting!",
            "scikit-learn and TensorFlow are powerful tools.",
            "Microservices is a complex but interesting topic.",
            "Docker and Kubernetes are for containerization, right?",
            "VS Code is an excellent editor! I've heard many good things about it."
        ]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        for i in range(10):
            history.append({"role": "user", "content": user_messages[i]})
            history.append({"role": "assistant", "content": anna_responses[i]})
        
        print(f"üìù –°–æ–∑–¥–∞–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –∏–∑ {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–º–ø—Ç –ë–ï–ó –∏—Å—Ç–æ—Ä–∏–∏
        print("\nüìù –¢–µ—Å—Ç 1: –ü—Ä–æ–º–ø—Ç –ë–ï–ó –∏—Å—Ç–æ—Ä–∏–∏")
        prompt_without_history = service.build_character_prompt(
            CHARACTER_DATA, 
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ", 
            history=None
        )
        print(f"–î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {len(prompt_without_history)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–º–ø—Ç –° –∏—Å—Ç–æ—Ä–∏–µ–π (20 —Å–æ–æ–±—â–µ–Ω–∏–π)
        print("\nüìù –¢–µ—Å—Ç 2: –ü—Ä–æ–º–ø—Ç –° –∏—Å—Ç–æ—Ä–∏–µ–π (20 —Å–æ–æ–±—â–µ–Ω–∏–π)")
        prompt_with_history = service.build_character_prompt(
            CHARACTER_DATA, 
            "What do you remember about our conversation?", 
            history=history
        )
        print(f"–î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π: {len(prompt_with_history)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –ø—Ä–æ–º–ø—Ç–∞, –≥–¥–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—è
        print("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ–º–ø—Ç–∞ (–≥–¥–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—è):")
        print(prompt_with_history[-1000:])
        
        # –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        print("\nü§ñ –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")
        print("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏...")
        
        async for chunk in service.generate_text_stream(
            prompt_with_history,
            max_tokens=200,
            temperature=0.7
        ):
            print(chunk, end="", flush=True)
        
        print("\n\nüìä –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º–∏–Ω–∞–µ—Ç –ª–∏ –º–æ–¥–µ–ª—å –∫–ª—é—á–µ–≤—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        response_text = ""
        async for chunk in service.generate_text_stream(
            prompt_with_history,
            max_tokens=200,
            temperature=0.7
        ):
            response_text += chunk
        
        print(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {response_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context_keywords = [
            "Michael", "programmer", "Python", "Django", "FastAPI", 
            "PostgreSQL", "MongoDB", "machine learning", "AI", "Docker", 
            "Kubernetes", "VS Code", "scikit-learn", "TensorFlow",
            "microservices", "frameworks", "databases", "deployment"
        ]
        
        found_keywords = []
        for keyword in context_keywords:
            if keyword.lower() in response_text.lower():
                found_keywords.append(keyword)
        
        print(f"–ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {found_keywords}")
        
        if len(found_keywords) >= 3:
            print("‚úÖ –ú–æ–¥–µ–ª—å –•–û–†–û–®–û –ø–æ–º–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞!")
        elif len(found_keywords) >= 1:
            print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–º–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç")
        else:
            print("‚ùå –ú–æ–¥–µ–ª—å –ù–ï –ø–æ–º–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        print("\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞:")
        
        if "michael" in response_text.lower():
            print("‚úÖ –ú–æ–¥–µ–ª—å –ø–æ–º–Ω–∏—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        else:
            print("‚ùå –ú–æ–¥–µ–ª—å –ù–ï –ø–æ–º–Ω–∏—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
        if "python" in response_text.lower():
            print("‚úÖ –ú–æ–¥–µ–ª—å –ø–æ–º–Ω–∏—Ç –ø—Ä–æ Python!")
        else:
            print("‚ùå –ú–æ–¥–µ–ª—å –ù–ï –ø–æ–º–Ω–∏—Ç –ø—Ä–æ Python")
            
        if "django" in response_text.lower() or "fastapi" in response_text.lower():
            print("‚úÖ –ú–æ–¥–µ–ª—å –ø–æ–º–Ω–∏—Ç –ø—Ä–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏!")
        else:
            print("‚ùå –ú–æ–¥–µ–ª—å –ù–ï –ø–æ–º–Ω–∏—Ç –ø—Ä–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏")
            
        if "docker" in response_text.lower() or "kubernetes" in response_text.lower():
            print("‚úÖ –ú–æ–¥–µ–ª—å –ø–æ–º–Ω–∏—Ç –ø—Ä–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—é!")
        else:
            print("‚ùå –ú–æ–¥–µ–ª—å –ù–ï –ø–æ–º–Ω–∏—Ç –ø—Ä–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—é")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        memory_score = len(found_keywords) / len(context_keywords) * 100
        print(f"\nüìà –û—Ü–µ–Ω–∫–∞ –ø–∞–º—è—Ç–∏: {memory_score:.1f}%")
        
        if memory_score >= 70:
            print("üéâ –û—Ç–ª–∏—á–Ω–∞—è –ø–∞–º—è—Ç—å! –ú–æ–¥–µ–ª—å —Ö–æ—Ä–æ—à–æ –ø–æ–º–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç")
        elif memory_score >= 40:
            print("üëç –•–æ—Ä–æ—à–∞—è –ø–∞–º—è—Ç—å! –ú–æ–¥–µ–ª—å –ø–æ–º–Ω–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ—Ç–∞–ª–∏")
        else:
            print("üòû –°–ª–∞–±–∞—è –ø–∞–º—è—Ç—å! –ú–æ–¥–µ–ª—å –ø–ª–æ—Ö–æ –ø–æ–º–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
    finally:
        await service.disconnect()

if __name__ == "__main__":
    asyncio.run(test_context_memory())
