#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ text-generation-webui —Å–µ—Ä–≤–∏—Å–∞.
"""

import asyncio
import aiohttp
import json
from datetime import datetime

async def test_app_health():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º health check —ç–Ω–¥–ø–æ–∏–Ω—Ç."""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º health check –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        async with aiohttp.ClientSession() as session:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π health check
            async with session.get("http://localhost:8000/health") as response:
                if response.status == 200:
                    health_data = await response.json()
                    print("‚úÖ Health check —É—Å–ø–µ—à–µ–Ω:")
                    print(f"   –°—Ç–∞—Ç—É—Å: {health_data.get('status')}")
                    print(f"   –í—Ä–µ–º—è: {health_data.get('timestamp')}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å text-generation-webui
                    if 'services' in health_data:
                        textgen_health = health_data['services'].get('text_generation_webui', {})
                        print(f"   TextGen WebUI: {textgen_health.get('status', 'unknown')}")
                        if 'warnings' in textgen_health:
                            print(f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {', '.join(textgen_health['warnings'])}")
                else:
                    print(f"‚ùå Health check –Ω–µ—É—Å–ø–µ—à–µ–Ω: {response.status}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è health check: {e}")

async def test_textgen_status():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å text-generation-webui."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å text-generation-webui...")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("http://localhost:8000/api/v1/chat/textgen-status") as response:
                if response.status == 200:
                    status_data = await response.json()
                    print("‚úÖ TextGen WebUI —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω:")
                    print(f"   –î–æ—Å—Ç—É–ø–µ–Ω: {status_data.get('available')}")
                    print(f"   –ú–æ–¥–µ–ª—å: {status_data.get('current_model')}")
                    print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–∞: {status_data.get('model_loaded')}")
                    print(f"   –°—Ç–∞—Ç—É—Å: {status_data.get('status')}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TextGen WebUI: {e}")

async def test_chat_status():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —á–∞—Ç-—Å–µ—Ä–≤–∏—Å–∞."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —á–∞—Ç-—Å–µ—Ä–≤–∏—Å–∞...")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("http://localhost:8000/api/v1/chat/status") as response:
                if response.status == 200:
                    chat_status = await response.json()
                    print("‚úÖ –°—Ç–∞—Ç—É—Å —á–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω:")
                    print(f"   –ü–æ–¥–∫–ª—é—á–µ–Ω: {chat_status.get('connected')}")
                    print(f"   –ö—ç—à: {chat_status.get('cache_enabled')}")
                    print(f"   –ú–∞–∫—Å. –∏—Å—Ç–æ—Ä–∏—è: {chat_status.get('max_history_length')}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞: {response.status}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç-—Å–µ—Ä–≤–∏—Å–∞: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    await test_app_health()
    await test_textgen_status()
    await test_chat_status()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())
