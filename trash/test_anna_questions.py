#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ Anna.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–æ–¥–µ–ª—å –∑–∞–¥–∞–µ—Ç –ø—Ä—è–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.chat_bot.services.textgen_webui_service import TextGenWebUIService
from app.chat_bot.models.characters.anna import get_mythomax_prompt_with_user_message

async def test_anna_questions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ Anna."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ Anna...")
    print("üéØ –¶–µ–ª—å: Anna –¥–æ–ª–∂–Ω–∞ –∑–∞–¥–∞–≤–∞—Ç—å –ø—Ä—è–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    print()

    service = TextGenWebUIService()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if not await service.check_connection():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ text-generation-webui")
            return

        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ text-generation-webui —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        # –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç - –æ—Ç –∏–º–µ–Ω–∏ –±—Ä–∞—Ç–∞ –∫ Anna
        test_prompt = "Come here, Anna. I want to hold you close to me."

        print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: {test_prompt}")
        print()

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ MythoMax
        full_prompt = get_mythomax_prompt_with_user_message(test_prompt)
        
        print("üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç Anna...")
        generated_text = await service.generate_text(full_prompt)

        if generated_text:
            print(f"‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            print(f"üìä –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(generated_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            print()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–∞
            print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–º
            if generated_text.strip().endswith('?'):
                print("‚úÖ –û—Ç–≤–µ—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å–æ–º")
            else:
                print("‚ùå –û—Ç–≤–µ—Ç –ù–ï –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å–æ–º")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –≤–æ–ø—Ä–æ—Å –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è "you", "your"
            if 'you' in generated_text.lower() or 'your' in generated_text.lower():
                print("‚úÖ –í–æ–ø—Ä–æ—Å –æ–±—Ä–∞—â–µ–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Å–æ–¥–µ—Ä–∂–∏—Ç 'you', 'your')")
            else:
                print("‚ùå –í–æ–ø—Ä–æ—Å –ù–ï –æ–±—Ä–∞—â–µ–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–Ω–µ—Ç 'you', 'your')")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–∏—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
            rhetorical_indicators = [
                'what does this mean', 'i wonder', 'do we continue', 
                'what will happen', 'i think', 'maybe'
            ]
            
            has_rhetorical = any(indicator in generated_text.lower() for indicator in rhetorical_indicators)
            if not has_rhetorical:
                print("‚úÖ –ù–µ—Ç —Ä–∏—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
            else:
                print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∏—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã")
            
            print()
            print("üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:")
            print("-" * 50)
            print(generated_text)
            print("-" * 50)
            
            # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
            print()
            print("üìä –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
            if (generated_text.strip().endswith('?') and 
                ('you' in generated_text.lower() or 'your' in generated_text.lower()) and
                not has_rhetorical):
                print("üéâ –û–¢–õ–ò–ß–ù–û! Anna –∑–∞–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä—è–º–æ–π –≤–æ–ø—Ä–æ—Å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
            elif generated_text.strip().endswith('?'):
                print("üëç –•–æ—Ä–æ—à–æ: –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–ª—É—á—à–µ–Ω")
            else:
                print("‚ùå –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏: –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await service.disconnect()

if __name__ == "__main__":
    asyncio.run(test_anna_questions())
