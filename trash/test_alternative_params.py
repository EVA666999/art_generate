#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º—ã min_new_tokens.
"""

import asyncio
import aiohttp
import json
import random


async def test_alternative_params():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
    
    print("üß™ –¢–µ—Å—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
    print("üîó URL: http://localhost:5000")
    print()
    
    # –ü—Ä–æ–º–ø—Ç —Å —è–≤–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –¥–ª–∏–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    test_prompt = (
        "Hello! Please tell me about your day in detail. "
        "Write at least 200 characters. "
        "Describe everything you did, how you felt, what you thought about, "
        "and include specific details about your experiences. "
        "Continue writing until you reach at least 200 characters."
    )
    
    # –¢–µ—Å—Ç 1: min_tokens –≤–º–µ—Å—Ç–æ min_new_tokens
    print("üîÑ –¢–µ—Å—Ç 1: min_tokens=100 (–≤–º–µ—Å—Ç–æ min_new_tokens)")
    payload1 = {
        "prompt": test_prompt,
        "max_new_tokens": 500,
        "min_tokens": 100,
        "temperature": 0.7,
        "top_p": 0.9,
        "top_k": 40,
        "repetition_penalty": 1.1,
        "stream": False,
        "seed": random.randint(1, 999999999)
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "http://localhost:5000/v1/completions",
                json=payload1,
                headers={"Content-Type": "application/json"}
            ) as resp:
                if resp.status == 200:
                    data1 = await resp.json()
                    response1 = data1["choices"][0]["text"].strip()
                    print(f"   ‚Ä¢ –û—Ç–≤–µ—Ç: {response1[:100]}...")
                    print(f"   ‚Ä¢ –î–ª–∏–Ω–∞: {len(response1)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"   ‚Ä¢ –¢–æ–∫–µ–Ω—ã: {data1.get('usage', {}).get('total_tokens', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                else:
                    print(f"   ‚Ä¢ –û—à–∏–±–∫–∞: {resp.status}")
                    text = await resp.text()
                    print(f"   ‚Ä¢ –î–µ—Ç–∞–ª–∏: {text}")
    except Exception as e:
        print(f"   ‚Ä¢ –û—à–∏–±–∫–∞: {e}")
    
    print()
    
    # –¢–µ—Å—Ç 2: –° stop_sequence –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    print("üîÑ –¢–µ—Å—Ç 2: stop_sequence –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    payload2 = {
        "prompt": test_prompt,
        "max_new_tokens": 800,
        "temperature": 0.7,
        "top_p": 0.9,
        "top_k": 40,
        "repetition_penalty": 1.1,
        "stop": ["\n\n", ".", "!", "?"],  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–≤–æ–π–Ω—ã—Ö –ø–µ—Ä–µ–Ω–æ—Å–∞—Ö
        "stream": False,
        "seed": random.randint(1, 999999999)
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "http://localhost:5000/v1/completions",
                json=payload2,
                headers={"Content-Type": "application/json"}
            ) as resp:
                if resp.status == 200:
                    data2 = await resp.json()
                    response2 = data2["choices"][0]["text"].strip()
                    print(f"   ‚Ä¢ –û—Ç–≤–µ—Ç: {response2[:100]}...")
                    print(f"   ‚Ä¢ –î–ª–∏–Ω–∞: {len(response2)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"   ‚Ä¢ –¢–æ–∫–µ–Ω—ã: {data2.get('usage', {}).get('total_tokens', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                else:
                    print(f"   ‚Ä¢ –û—à–∏–±–∫–∞: {resp.status}")
                    text = await resp.text()
                    print(f"   ‚Ä¢ –î–µ—Ç–∞–ª–∏: {text}")
    except Exception as e:
        print(f"   ‚Ä¢ –û—à–∏–±–∫–∞: {e}")
    
    print()
    
    # –¢–µ—Å—Ç 3: –° –æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –∏ –≤—ã—Å–æ–∫–∏–º max_tokens
    print("üîÑ –¢–µ—Å—Ç 3: –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ + –≤—ã—Å–æ–∫–∏–π max_tokens")
    payload3 = {
        "prompt": test_prompt,
        "max_new_tokens": 1000,
        "temperature": 0.1,  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏
        "top_p": 0.95,
        "top_k": 20,
        "repetition_penalty": 1.05,
        "stream": False,
        "seed": random.randint(1, 999999999)
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "http://localhost:5000/v1/completions",
                json=payload3,
                headers={"Content-Type": "application/json"}
            ) as resp:
                if resp.status == 200:
                    data3 = await resp.json()
                    response3 = data3["choices"][0]["text"].strip()
                    print(f"   ‚Ä¢ –û—Ç–≤–µ—Ç: {response3[:100]}...")
                    print(f"   ‚Ä¢ –î–ª–∏–Ω–∞: {len(response3)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"   ‚Ä¢ –¢–æ–∫–µ–Ω—ã: {data3.get('usage', {}).get('total_tokens', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                else:
                    print(f"   ‚Ä¢ –û—à–∏–±–∫–∞: {resp.status}")
                    text = await resp.text()
                    print(f"   ‚Ä¢ –î–µ—Ç–∞–ª–∏: {text}")
    except Exception as e:
        print(f"   ‚Ä¢ –û—à–∏–±–∫–∞: {e}")
    
    print()
    
    # –¢–µ—Å—Ç 4: –° ban_eos_token –∏ add_bos_token
    print("üîÑ –¢–µ—Å—Ç 4: ban_eos_token + add_bos_token")
    payload4 = {
        "prompt": test_prompt,
        "max_new_tokens": 600,
        "temperature": 0.7,
        "top_p": 0.9,
        "top_k": 40,
        "repetition_penalty": 1.1,
        "ban_eos_token": True,  # –ó–∞–ø—Ä–µ—â–∞–µ–º EOS —Ç–æ–∫–µ–Ω
        "add_bos_token": False,  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º BOS —Ç–æ–∫–µ–Ω
        "stream": False,
        "seed": random.randint(1, 999999999)
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "http://localhost:5000/v1/completions",
                json=payload4,
                headers={"Content-Type": "application/json"}
            ) as resp:
                if resp.status == 200:
                    data4 = await resp.json()
                    response4 = data4["choices"][0]["text"].strip()
                    print(f"   ‚Ä¢ –û—Ç–≤–µ—Ç: {response4[:100]}...")
                    print(f"   ‚Ä¢ –î–ª–∏–Ω–∞: {response4[:100]} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"   ‚Ä¢ –¢–æ–∫–µ–Ω—ã: {data4.get('usage', {}).get('total_tokens', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                else:
                    print(f"   ‚Ä¢ –û—à–∏–±–∫–∞: {resp.status}")
                    text = await resp.text()
                    print(f"   ‚Ä¢ –î–µ—Ç–∞–ª–∏: {text}")
    except Exception as e:
        print(f"   ‚Ä¢ –û—à–∏–±–∫–∞: {e}")
    
    print()
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    print("üí° –ï—Å–ª–∏ min_tokens –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:")
    print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å stop_sequence –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–ª–∏–Ω—ã")
    print("   ‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å max_new_tokens")
    print("   ‚Ä¢ –ü–æ–Ω–∏–∑–∏—Ç—å temperature –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏")
    print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ban_eos_token")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
    print("=" * 50)
    
    asyncio.run(test_alternative_params())
    
    print("\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
