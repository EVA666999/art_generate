#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è streaming —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from app.chat_bot.services.textgen_webui_service import TextGenWebUIService

async def test_generate_stream_method():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ generate_stream –∫–∞–∫ –∞–ª–∏–∞—Å –¥–ª—è generate_text_stream"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ generate_stream...")
    
    service = TextGenWebUIService()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if hasattr(service, 'generate_stream'):
        print("‚úÖ –ú–µ—Ç–æ–¥ generate_stream –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå –ú–µ—Ç–æ–¥ generate_stream –ù–ï –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–ª–∏–∞—Å –¥–ª—è generate_text_stream
    if hasattr(service, 'generate_text_stream'):
        print("‚úÖ –ú–µ—Ç–æ–¥ generate_text_stream –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå –ú–µ—Ç–æ–¥ generate_text_stream –ù–ï –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –º–µ—Ç–æ–¥–æ–≤
    import inspect
    
    stream_sig = inspect.signature(service.generate_stream)
    text_stream_sig = inspect.signature(service.generate_text_stream)
    
    print(f"üìù –°–∏–≥–Ω–∞—Ç—É—Ä–∞ generate_stream: {stream_sig}")
    print(f"üìù –°–∏–≥–Ω–∞—Ç—É—Ä–∞ generate_text_stream: {text_stream_sig}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
    stream_params = list(stream_sig.parameters.keys())
    text_stream_params = list(text_stream_sig.parameters.keys())
    
    # –£–±–∏—Ä–∞–µ–º 'self' –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    stream_params = [p for p in stream_params if p != 'self']
    text_stream_params = [p for p in text_stream_params if p != 'self']
    
    if stream_params == text_stream_params:
        print("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ—Ç–æ–¥–æ–≤ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
    else:
        print(f"‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ—Ç–æ–¥–æ–≤ –ù–ï —Å–æ–≤–ø–∞–¥–∞—é—Ç:")
        print(f"   generate_stream: {stream_params}")
        print(f"   generate_text_stream: {text_stream_params}")
        return False
    
    return True

async def test_parameter_names():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è max_tokens, –∞ –Ω–µ max_new_tokens
    service = TextGenWebUIService()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É –º–µ—Ç–æ–¥–∞
    import inspect
    sig = inspect.signature(service.generate_text_stream)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä max_tokens
    if 'max_tokens' in sig.parameters:
        print("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä max_tokens –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä max_tokens –ù–ï –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ù–ï–¢ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ max_new_tokens
    if 'max_new_tokens' not in sig.parameters:
        print("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä max_new_tokens –ù–ï –Ω–∞–π–¥–µ–Ω (–∫–∞–∫ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)")
    else:
        print("‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä max_new_tokens –Ω–∞–π–¥–µ–Ω (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)")
        return False
    
    return True

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ streaming —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...\n")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ generate_stream
    test1_passed = await test_generate_stream_method()
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    test2_passed = await test_parameter_names()
    
    print("\n" + "="*50)
    if test1_passed and test2_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ Streaming —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
    
    print("="*50)

if __name__ == "__main__":
    asyncio.run(main())
