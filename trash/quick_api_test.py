#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç API endpoints text-generation-webui
"""

import asyncio
import aiohttp
import json
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.config.settings import get_settings

async def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö API endpoints."""
    settings = get_settings()
    base_url = settings.textgen_webui_url
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints: {base_url}")
    print("=" * 50)
    
    async with aiohttp.ClientSession() as session:
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏ (/api/v1/model)")
        try:
            async with session.get(f"{base_url}/api/v1/model") as response:
                print(f"   HTTP Status: {response.status}")
                if response.status == 200:
                    data = await response.json()
                    print(f"   ‚úÖ –û—Ç–≤–µ—Ç: {json.dumps(data, indent=2, ensure_ascii=False)}")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ (/api/v1/generate)")
        try:
            test_prompt = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
            generation_request = {
                "prompt": test_prompt,
                "max_new_tokens": 50,
                "temperature": 0.7,
                "top_p": 0.9,
                "stream": False
            }
            
            async with session.post(
                f"{base_url}/api/v1/generate",
                json=generation_request,
                headers={"Content-Type": "application/json"}
            ) as response:
                print(f"   HTTP Status: {response.status}")
                if response.status == 200:
                    data = await response.json()
                    print(f"   ‚úÖ –û—Ç–≤–µ—Ç: {json.dumps(data, indent=2, ensure_ascii=False)}")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status}")
                    try:
                        error_data = await response.text()
                        print(f"   üìù –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_data}")
                    except:
                        pass
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞")
        try:
            async with session.get(f"{base_url}/") as response:
                print(f"   HTTP Status: {response.status}")
                if response.status == 200:
                    print("   ‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    print(f"   ‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º: {response.status}")
        except Exception as e:
            print(f"   ‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
        print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤")
        import socket
        
        def check_port(port, host='127.0.0.1'):
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                result = sock.connect_ex((host, port))
                sock.close()
                return result == 0
            except:
                return False
        
        api_port = 7860
        web_port = 7861
        
        print(f"   üîå API –ø–æ—Ä—Ç {api_port}: {'‚úÖ –û—Ç–∫—Ä—ã—Ç' if check_port(api_port) else '‚ùå –ó–∞–∫—Ä—ã—Ç'}")
        print(f"   üåê Web –ø–æ—Ä—Ç {web_port}: {'‚úÖ –û—Ç–∫—Ä—ã—Ç' if check_port(web_port) else '‚ùå –ó–∞–∫—Ä—ã—Ç'}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ API TEXT-GENERATION-WEBUI")
    print("=" * 60)
    
    await test_api_endpoints()
    
    print("\n" + "=" * 60)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüí° –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
    print("   1. –ó–∞–ø—É—â–µ–Ω –ª–∏ text-generation-webui —Å–µ—Ä–≤–µ—Ä?")
    print("   2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–∏ –ø–æ—Ä—Ç—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö?")
    print("   3. –ù–µ—Ç –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π—Ä–≤–æ–ª–æ–º?")

if __name__ == "__main__":
    asyncio.run(main())
