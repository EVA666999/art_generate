#!/usr/bin/env python3
"""
–¢–µ—Å—Ç ADetailer —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π args
"""
import asyncio
import httpx
import json
import time
from pathlib import Path

async def test_adetailer_dict_structure():
    api_url = "http://localhost:8000/api/generation/generate"
    
    # –¢–µ—Å—Ç —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π args
    test_data = {
        "prompt": "beautiful woman portrait, close up face, detailed eyes, high quality",
        "use_default_prompts": True,
        "alwayson_scripts": {
            "ADetailer": {
                "args": {
                    "ad_model": "face_yolov8n.pt",
                    "ad_steps": 30
                }
            }
        }
    }
    
    print("üîç –¢–ï–°–¢ ADETAILER –° –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ô –°–¢–†–£–ö–¢–£–†–û–ô")
    print("=" * 50)
    
    async with httpx.AsyncClient(timeout=120.0) as client:
        try:
            start_time = time.time()
            print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...")
            
            response = await client.post(api_url, json=test_data)
            
            end_time = time.time()
            generation_time = end_time - start_time
            
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {generation_time:.2f} —Å–µ–∫—É–Ω–¥")
            
            if response.status_code == 200:
                print("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                output_path = Path("trash/adetailer_dict_structure.png")
                output_path.parent.mkdir(exist_ok=True)
                with open(output_path, 'wb') as f:
                    f.write(response.content)
                
                file_size = output_path.stat().st_size
                print(f"üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
                print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:,} –±–∞–π—Ç")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = response.headers
                print("\nüìã –ó–ê–ì–û–õ–û–í–ö–ò –û–¢–í–ï–¢–ê:")
                for key, value in headers.items():
                    if key.startswith('X-'):
                        print(f"  {key}: {value}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                if generation_time > 35:
                    print("‚úÖ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ - ADetailer —Ä–∞–±–æ—Ç–∞–µ—Ç")
                elif generation_time > 20:
                    print("‚ö†Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ä–µ–¥–Ω–µ–µ - ADetailer –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
                else:
                    print("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–∞—è - ADetailer –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
                if file_size > 500000:
                    print("‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π - Hires.fix —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    print("‚ö†Ô∏è –§–∞–π–ª –º–∞–ª–µ–Ω—å–∫–∏–π - –≤–æ–∑–º–æ–∂–Ω–æ Hires.fix –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_adetailer_dict_structure()) 