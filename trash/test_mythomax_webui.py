#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã text-generation-webui —Å –º–æ–¥–µ–ª—å—é MythoMax L2 13B.
–ó–∞–ø—É—Å–∫–∞–π—Ç–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ text-generation-webui —Å–µ—Ä–≤–µ—Ä–∞.
"""

import asyncio
import aiohttp
import json
from typing import Dict, Any

async def test_webui_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ text-generation-webui."""
    print("üîå –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ text-generation-webui...")
    
    try:
        async with aiohttp.ClientSession() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            async with session.get("http://localhost:5000/v1/models") as response:
                if response.status == 200:
                    models = await response.json()
                    print(f"‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω. –ú–æ–¥–µ–ª–∏: {models}")
                    return True
                else:
                    print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                    return False
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

async def test_model_status():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏."""
    print("\nü§ñ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏...")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("http://localhost:5000/v1/model") as response:
                if response.status == 200:
                    status = await response.json()
                    print(f"‚úÖ –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏: {json.dumps(status, indent=2, ensure_ascii=False)}")
                    return status
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏: {response.status}")
                    return None
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏: {e}")
        return None

async def test_text_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞."""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞...")
    
    try:
        # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Alpaca –¥–ª—è MythoMax
        system_message = "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
        user_message = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
        
        prompt = f"{system_message}\n\n### Instruction:\n{user_message}\n\n### Response:\n"
        
        payload = {
            "prompt": prompt,
            "max_new_tokens": 100,
            "temperature": 0.8,
            "top_p": 0.9,
            "top_k": 40,
            "repeat_penalty": 1.1,
            "presence_penalty": 0.1,
            "do_sample": True,
            "stream": False
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post("http://localhost:5000/v1/generate", json=payload) as response:
                if response.status == 200:
                    result = await response.json()
                    generated_text = result.get("results", [{}])[0].get("text", "")
                    
                    # –û—á–∏—â–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    if generated_text.startswith(prompt):
                        generated_text = generated_text[len(prompt):].strip()
                    
                    print(f"‚úÖ –¢–µ–∫—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                    print(f"üìù –û—Ç–≤–µ—Ç: {generated_text}")
                    return generated_text
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status}")
                    error_text = await response.text()
                    print(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_text}")
                    return None
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return None

async def test_stream_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞."""
    print("\nüåä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
    
    try:
        system_message = "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∏—Å—Ç–æ—Ä–∏—é."
        user_message = "–†–∞—Å—Å–∫–∞–∂–∏ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ –∫–æ—Ç–∞"
        
        prompt = f"{system_message}\n\n### Instruction:\n{user_message}\n\n### Response:\n"
        
        payload = {
            "prompt": prompt,
            "max_new_tokens": 150,
            "temperature": 0.8,
            "top_p": 0.9,
            "top_k": 40,
            "repeat_penalty": 1.1,
            "presence_penalty": 0.1,
            "do_sample": True,
            "stream": True
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post("http://localhost:5000/v1/generate", json=payload) as response:
                if response.status == 200:
                    print("‚úÖ –ü–æ—Ç–æ–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å:")
                    print("üìù –û—Ç–≤–µ—Ç:")
                    
                    full_response = ""
                    async for line in response.content:
                        if line:
                            try:
                                data = json.loads(line.decode('utf-8'))
                                if data.get("type") == "text":
                                    chunk = data.get("text", "")
                                    if chunk:
                                        print(chunk, end="", flush=True)
                                        full_response += chunk
                                elif data.get("type") == "end":
                                    print("\n‚úÖ –ü–æ—Ç–æ–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                                    break
                            except json.JSONDecodeError:
                                continue
                    
                    print(f"\nüìä –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç ({len(full_response)} —Å–∏–º–≤–æ–ª–æ–≤): {full_response}")
                    return full_response
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status}")
                    return None
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return None

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ text-generation-webui —Å MythoMax L2 13B")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not await test_webui_connection():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ text-generation-webui")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: start_webui_with_api.bat")
        return
    
    # –¢–µ—Å—Ç 2: –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏
    await test_model_status()
    
    # –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
    await test_text_generation()
    
    # –¢–µ—Å—Ç 4: –ü–æ—Ç–æ–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    await test_stream_generation()
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())
