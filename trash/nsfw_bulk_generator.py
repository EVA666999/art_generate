#!/usr/bin/env python3
"""
–ú–ê–°–°–û–í–´–ô –ì–ï–ù–ï–†–ê–¢–û–† NSFW –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 30 NSFW –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ trash/nsfw_images
"""
import asyncio
import httpx
import json
import time
import random
from pathlib import Path
from typing import List, Dict, Any
from datetime import datetime

class NSFWBulkGenerator:
    """–ú–∞—Å—Å–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä NSFW –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        self.api_url = "http://localhost:8000"
        self.output_dir = Path("trash/nsfw_images")
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_requested": 5,
            "successful": 0,
            "failed": 0,
            "total_time": 0,
            "start_time": None,
            "end_time": None
        }
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã (–¥–æ–ø–æ–ª–Ω—è—é—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏)
        self.nsfw_prompts = [
            "anime girl, beautiful",
            "anime girl, cute",
            "anime girl, pretty",
            "anime girl, lovely",
            "anime girl, gorgeous"
        ]
        
        # –ë–∞–∑–æ–≤—ã–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã (–¥–æ–ø–æ–ª–Ω—è—é—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏)
        self.negative_prompts = [
            "low quality, blurry"
        ]
    
    def log_progress(self, message: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {message}")
    
    def get_random_prompt(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π NSFW –ø—Ä–æ–º–ø—Ç"""
        return random.choice(self.nsfw_prompts)
    
    def get_negative_prompt(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        return ", ".join(self.negative_prompts)
    
    async def generate_single_image(self, index: int) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        prompt = self.get_random_prompt()
        negative_prompt = self.get_negative_prompt()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–æ–º–ø—Ç—ã
        settings = {
            "prompt": prompt,
            "negative_prompt": negative_prompt,
            "use_default_prompts": True,  # –í–∫–ª—é—á–∞–µ–º –≤–∞—à–∏ –ø—Ä–æ–º–ø—Ç—ã –∏–∑ default_prompts.py
            "seed": random.randint(1, 999999999)  # –°–ª—É—á–∞–π–Ω—ã–π —Å–∏–¥
        }
        
        self.log_progress(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {index+1}/30: {prompt[:50]}...")
        
        try:
            async with httpx.AsyncClient(timeout=60.0) as client:
                start_time = time.time()
                
                response = await client.post(
                    f"{self.api_url}/api/generation/generate",
                    json=settings,
                    headers={"Content-Type": "application/json"}
                )
                
                generation_time = time.time() - start_time
                
                if response.status_code == 200:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    image_data = response.content
                    filename = f"nsfw_{index+1:02d}_{int(time.time())}.png"
                    filepath = self.output_dir / filename
                    
                    with open(filepath, "wb") as f:
                        f.write(image_data)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                    headers = response.headers
                    result = {
                        "success": True,
                        "filename": filename,
                        "filepath": str(filepath),
                        "file_size": len(image_data),
                        "generation_time": generation_time,
                        "prompt": prompt,
                        "seed": headers.get("X-Seed", "unknown"),
                        "steps": headers.get("X-Steps", "unknown"),
                        "cfg_scale": headers.get("X-CFG-Scale", "unknown"),
                        "sampler": headers.get("X-Sampler", "unknown")
                    }
                    
                    self.log_progress(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {filename} ({len(image_data)} –±–∞–π—Ç, {generation_time:.1f}—Å)")
                    return result
                    
                else:
                    error_msg = f"HTTP {response.status_code}: {response.text}"
                    self.log_progress(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")
                    return {
                        "success": False,
                        "error": error_msg,
                        "prompt": prompt
                    }
                    
        except Exception as e:
            error_msg = str(e)
            self.log_progress(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {error_msg}")
            return {
                "success": False,
                "error": error_msg,
                "prompt": prompt
            }
    
    async def generate_bulk_images(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ 30 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        print("üöÄ –ó–ê–ü–£–°–ö –ú–ê–°–°–û–í–û–ô –ì–ï–ù–ï–†–ê–¶–ò–ò NSFW –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
        print("=" * 60)
        print(f"üìÅ –ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {self.output_dir.absolute()}")
        print(f"üéØ –¶–µ–ª—å: 30 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print(f"‚è∞ –ù–∞—á–∞–ª–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 60)
        
        self.stats["start_time"] = time.time()
        results = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        for i in range(30):
            result = await self.generate_single_image(i)
            results.append(result)
            
            if result["success"]:
                self.stats["successful"] += 1
            else:
                self.stats["failed"] += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏
            if i < 29:  # –ù–µ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                await asyncio.sleep(1)
        
        self.stats["end_time"] = time.time()
        self.stats["total_time"] = self.stats["end_time"] - self.stats["start_time"]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        self.generate_report(results)
    
    def generate_report(self, results: List[Dict[str, Any]]):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        print("\n" + "=" * 60)
        print("üìã –û–¢–ß–ï–¢ –û –ú–ê–°–°–û–í–û–ô –ì–ï–ù–ï–†–ê–¶–ò–ò")
        print("=" * 60)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   - –ó–∞–ø—Ä–æ—à–µ–Ω–æ: {self.stats['total_requested']}")
        print(f"   - –£—Å–ø–µ—à–Ω–æ: {self.stats['successful']}")
        print(f"   - –û—à–∏–±–æ–∫: {self.stats['failed']}")
        print(f"   - –û–±—â–µ–µ –≤—Ä–µ–º—è: {self.stats['total_time']:.1f} —Å–µ–∫")
        print(f"   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {self.stats['total_time']/30:.1f} —Å–µ–∫")
        
        if self.stats['successful'] > 0:
            success_rate = (self.stats['successful'] / self.stats['total_requested']) * 100
            print(f"   - –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        # –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        successful_results = [r for r in results if r["success"]]
        if successful_results:
            total_size = sum(r["file_size"] for r in successful_results)
            avg_size = total_size / len(successful_results)
            avg_time = sum(r["generation_time"] for r in successful_results) / len(successful_results)
            
            print(f"\nüìà –ê–ù–ê–õ–ò–ó –£–°–ü–ï–®–ù–´–• –ì–ï–ù–ï–†–ê–¶–ò–ô:")
            print(f"   - –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size / (1024*1024):.1f} MB")
            print(f"   - –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {avg_size / 1024:.1f} KB")
            print(f"   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {avg_time:.1f} —Å–µ–∫")
        
        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        print(f"\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:")
        for result in successful_results:
            print(f"   ‚úÖ {result['filename']} ({result['file_size']} –±–∞–π—Ç)")
        
        # –û—à–∏–±–∫–∏
        failed_results = [r for r in results if not r["success"]]
        if failed_results:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò:")
            for result in failed_results:
                print(f"   ‚ùå –ü—Ä–æ–º–ø—Ç: {result['prompt'][:50]}...")
                print(f"      –û—à–∏–±–∫–∞: {result['error']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report_file = self.output_dir / "generation_report.txt"
        with open(report_file, "w", encoding="utf-8") as f:
            f.write("–û–¢–ß–ï–¢ –û –ú–ê–°–°–û–í–û–ô –ì–ï–ù–ï–†–ê–¶–ò–ò NSFW –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô\n")
            f.write("=" * 50 + "\n")
            f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"–£—Å–ø–µ—à–Ω–æ: {self.stats['successful']}/10\n")
            f.write(f"–í—Ä–µ–º—è: {self.stats['total_time']:.1f} —Å–µ–∫\n\n")
            
            f.write("–°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:\n")
            for result in successful_results:
                f.write(f"- {result['filename']}\n")
                f.write(f"  –ü—Ä–æ–º–ø—Ç: {result['prompt']}\n")
                f.write(f"  –°–∏–¥: {result['seed']}\n")
                f.write(f"  –®–∞–≥–∏: {result['steps']}\n")
                f.write(f"  CFG: {result['cfg_scale']}\n")
                f.write(f"  –°—ç–º–ø–ª–µ—Ä: {result['sampler']}\n\n")
        
        print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        print("=" * 60)
        
        if self.stats['successful'] == 30:
            print("üéâ –í–°–ï 30 –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–´!")
        else:
            print(f"‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–æ {self.stats['successful']}/30 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    generator = NSFWBulkGenerator()
    await generator.generate_bulk_images()

if __name__ == "__main__":
    asyncio.run(main()) 