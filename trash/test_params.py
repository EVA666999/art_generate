#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.chat_bot.services.textgen_webui_service import TextGenWebUIService
from app.chat_bot.schemas.chat import ChatMessage, MessageRole, CharacterConfig
from app.chat_bot.config.chat_config import chat_config


async def test_params():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    
    print("üß™ –¢–µ—Å—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
    print(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"   ‚Ä¢ ENFORCE_MIN_TOKENS: {chat_config.ENFORCE_MIN_TOKENS}")
    print(f"   ‚Ä¢ MIN_NEW_TOKENS: {chat_config.MIN_NEW_TOKENS}")
    print(f"   ‚Ä¢ DEFAULT_MAX_TOKENS: {chat_config.DEFAULT_MAX_TOKENS}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
    test_character = CharacterConfig(
        name="TestAnna",
        instructions="You are Anna, a shy but curious young woman. Write naturally and in detail.",
        system_prompt="You are having a conversation with your brother.",
        response_format="Respond naturally and in detail."
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    test_message = ChatMessage(role=MessageRole.USER, content="Hello, how are you?")
    
    try:
        async with TextGenWebUIService() as service:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if not await service.check_connection():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ text-generation-webui")
                return
            
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ text-generation-webui —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            print()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            print("üîÑ –¢–µ—Å—Ç 1: –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
            response1, meta1 = await service.generate_response(
                messages=[test_message],
                character_config=test_character
            )
            print(f"   ‚Ä¢ –û—Ç–≤–µ—Ç: {response1[:100]}...")
            print(f"   ‚Ä¢ –î–ª–∏–Ω–∞: {len(response1)} —Å–∏–º–≤–æ–ª–æ–≤")
            print()
            
            print("üîÑ –¢–µ—Å—Ç 2: –° —è–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
            response2, meta2 = await service.generate_response(
                messages=[test_message],
                character_config=test_character,
                max_tokens=200,
                temperature=0.9,
                top_p=0.99,
                top_k=100,
                repeat_penalty=1.2
            )
            print(f"   ‚Ä¢ –û—Ç–≤–µ—Ç: {response2[:100]}...")
            print(f"   ‚Ä¢ –î–ª–∏–Ω–∞: {len(response2)} —Å–∏–º–≤–æ–ª–æ–≤")
            print()
            
            print("üîÑ –¢–µ—Å—Ç 3: –° –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–æ–π")
            response3, meta3 = await service.generate_response(
                messages=[test_message],
                character_config=test_character,
                max_tokens=300,
                temperature=0.7
            )
            print(f"   ‚Ä¢ –û—Ç–≤–µ—Ç: {response3[:100]}...")
            print(f"   ‚Ä¢ –î–ª–∏–Ω–∞: {len(response3)} —Å–∏–º–≤–æ–ª–æ–≤")
            print()
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            print("üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
            lengths = [len(response1), len(response2), len(response3)]
            print(f"   ‚Ä¢ –î–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤: {lengths}")
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {sum(lengths) / len(lengths):.1f}")
            print(f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {min(lengths)}")
            print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {max(lengths)}")
            
            if min(lengths) < 100:
                print("‚ö†Ô∏è  –ï—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã - –ø—Ä–æ–±–ª–µ–º–∞ —Å min_new_tokens")
            else:
                print("‚úÖ –í—Å–µ –æ—Ç–≤–µ—Ç—ã –∏–º–µ—é—Ç –ø—Ä–∏–µ–º–ª–µ–º—É—é –¥–ª–∏–Ω—É")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
    print("=" * 50)
    
    asyncio.run(test_params())
    
    print("\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
