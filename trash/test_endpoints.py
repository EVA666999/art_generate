#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö endpoints –≤ text-generation-webui
"""

import asyncio
import aiohttp
import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

async def test_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ endpoints text-generation-webui"""
    base_url = "http://localhost:5000"
    
    async with aiohttp.ClientSession() as session:
        # –¢–µ—Å—Ç 1: /v1/models
        print("üîç –¢–µ—Å—Ç–∏—Ä—É—é /v1/models...")
        try:
            async with session.get(f"{base_url}/v1/models") as response:
                print(f"   –°—Ç–∞—Ç—É—Å: {response.status}")
                if response.status == 200:
                    data = await response.json()
                    print(f"   –û—Ç–≤–µ—Ç: {json.dumps(data, indent=2, ensure_ascii=False)}")
                else:
                    print(f"   –û—à–∏–±–∫–∞: {response.status}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print()
        
        # –¢–µ—Å—Ç 2: /v1/chat/completions
        print("üîç –¢–µ—Å—Ç–∏—Ä—É—é /v1/chat/completions...")
        try:
            payload = {
                "model": "Gryphe-MythoMax-L2-13b.Q4_K_S.gguf",
                "messages": [{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç"}],
                "max_tokens": 10
            }
            async with session.post(f"{base_url}/v1/chat/completions", json=payload) as response:
                print(f"   –°—Ç–∞—Ç—É—Å: {response.status}")
                if response.status == 200:
                    data = await response.json()
                    print(f"   –û—Ç–≤–µ—Ç: {json.dumps(data, indent=2, ensure_ascii=False)}")
                else:
                    print(f"   –û—à–∏–±–∫–∞: {response.status}")
                    try:
                        error_text = await response.text()
                        print(f"   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_text}")
                    except:
                        pass
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print()
        
        # –¢–µ—Å—Ç 3: /v1/generate (—Å—Ç–∞—Ä—ã–π endpoint)
        print("üîç –¢–µ—Å—Ç–∏—Ä—É—é /v1/generate...")
        try:
            payload = {
                "prompt": "–ü—Ä–∏–≤–µ—Ç",
                "max_new_tokens": 10,
                "temperature": 0.7,
                "do_sample": True
            }
            async with session.post(f"{base_url}/v1/generate", json=payload) as response:
                print(f"   –°—Ç–∞—Ç—É—Å: {response.status}")
                if response.status == 200:
                    data = await response.json()
                    print(f"   –û—Ç–≤–µ—Ç: {json.dumps(data, indent=2, ensure_ascii=False)}")
                else:
                    print(f"   –û—à–∏–±–∫–∞: {response.status}")
                    try:
                        error_text = await response.text()
                        print(f"   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_text}")
                    except:
                        pass
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print()
        
        # –¢–µ—Å—Ç 4: /api/v1/generate (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint)
        print("üîç –¢–µ—Å—Ç–∏—Ä—É—é /api/v1/generate...")
        try:
            payload = {
                "prompt": "–ü—Ä–∏–≤–µ—Ç",
                "max_new_tokens": 10,
                "temperature": 0.7,
                "do_sample": True
            }
            async with session.post(f"{base_url}/api/v1/generate", json=payload) as response:
                print(f"   –°—Ç–∞—Ç—É—Å: {response.status}")
                if response.status == 200:
                    data = await response.json()
                    print(f"   –û—Ç–≤–µ—Ç: {json.dumps(data, indent=2, ensure_ascii=False)}")
                else:
                    print(f"   –û—à–∏–±–∫–∞: {response.status}")
                    try:
                        error_text = await response.text()
                        print(f"   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_text}")
                    except:
                        pass
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_endpoints())
