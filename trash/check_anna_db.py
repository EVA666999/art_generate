#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ Anna –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

async def check_anna_in_db():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ Anna –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Anna –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from app.database.db import async_session_maker
        from app.chat_bot.models.models import CharacterDB
        from sqlalchemy import select
        
        async with async_session_maker() as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            result = await db.execute(select(CharacterDB).order_by(CharacterDB.name))
            characters = result.scalars().all()
            
            print(f"üìä –í—Å–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –ë–î: {len(characters)}")
            
            # –ò—â–µ–º Anna
            anna = None
            for char in characters:
                print(f"  - {char.id}: {char.name}")
                if char.name.lower() == "anna":
                    anna = char
                    print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ Anna —Å ID {char.id}")
                    print(f"    üìù Instructions: {char.instructions[:100] if char.instructions else '–ù–µ—Ç'}...")
                    print(f"    üé≠ System prompt: {char.system_prompt[:100] if char.system_prompt else '–ù–µ—Ç'}...")
                    print(f"    üìã Response format: {char.response_format[:100] if char.response_format else '–ù–µ—Ç'}...")
            
            if not anna:
                print("‚ùå Anna –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
                print("üí° –ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å Anna —á–µ—Ä–µ–∑ /load-file-character/anna")
            else:
                print("‚úÖ Anna –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoint
                print("\nüåê –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoint...")
                import httpx
                
                try:
                    async with httpx.AsyncClient() as client:
                        response = await client.get("http://localhost:8000/api/v1/characters/")
                        if response.status_code == 200:
                            api_characters = response.json()
                            print(f"üì° API –≤–µ—Ä–Ω—É–ª {len(api_characters)} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:")
                            for char in api_characters:
                                print(f"  - {char['id']}: {char['name']}")
                                if char['name'].lower() == "anna":
                                    print(f"    ‚úÖ Anna –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ API —Å ID {char['id']}")
                        else:
                            print(f"‚ùå API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(check_anna_in_db())
