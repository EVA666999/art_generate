#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API text-generation-webui –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ min_new_tokens.
"""

import asyncio
import aiohttp
import json
import random


async def test_direct_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –Ω–∞–ø—Ä—è–º—É—é"""
    
    print("üß™ –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ API text-generation-webui...")
    print("üîó URL: http://localhost:5000")
    print()
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
    test_prompt = "Hello! Please tell me about your day in detail. Write at least 200 characters."
    
    # –¢–µ—Å—Ç 1: –ë–µ–∑ min_new_tokens
    print("üîÑ –¢–µ—Å—Ç 1: –ë–µ–∑ min_new_tokens")
    payload1 = {
        "prompt": test_prompt,
        "max_new_tokens": 300,
        "temperature": 0.7,
        "top_p": 0.9,
        "top_k": 40,
        "repetition_penalty": 1.1,
        "stream": False,
        "seed": random.randint(1, 999999999)
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "http://localhost:5000/v1/completions",
                json=payload1,
                headers={"Content-Type": "application/json"}
            ) as resp:
                if resp.status == 200:
                    data1 = await resp.json()
                    response1 = data1["choices"][0]["text"].strip()
                    print(f"   ‚Ä¢ –û—Ç–≤–µ—Ç: {response1[:100]}...")
                    print(f"   ‚Ä¢ –î–ª–∏–Ω–∞: {len(response1)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"   ‚Ä¢ –¢–æ–∫–µ–Ω—ã: {data1.get('usage', {}).get('total_tokens', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                else:
                    print(f"   ‚Ä¢ –û—à–∏–±–∫–∞: {resp.status}")
                    text = await resp.text()
                    print(f"   ‚Ä¢ –î–µ—Ç–∞–ª–∏: {text}")
    except Exception as e:
        print(f"   ‚Ä¢ –û—à–∏–±–∫–∞: {e}")
    
    print()
    
    # –¢–µ—Å—Ç 2: –° min_new_tokens
    print("üîÑ –¢–µ—Å—Ç 2: –° min_new_tokens=100")
    payload2 = {
        "prompt": test_prompt,
        "max_new_tokens": 300,
        "min_new_tokens": 100,
        "temperature": 0.7,
        "top_p": 0.9,
        "top_k": 40,
        "repetition_penalty": 1.1,
        "stream": False,
        "seed": random.randint(1, 999999999)
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "http://localhost:5000/v1/completions",
                json=payload2,
                headers={"Content-Type": "application/json"}
            ) as resp:
                if resp.status == 200:
                    data2 = await resp.json()
                    response2 = data2["choices"][0]["text"].strip()
                    print(f"   ‚Ä¢ –û—Ç–≤–µ—Ç: {response2[:100]}...")
                    print(f"   ‚Ä¢ –î–ª–∏–Ω–∞: {len(response2)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"   ‚Ä¢ –¢–æ–∫–µ–Ω—ã: {data2.get('usage', {}).get('total_tokens', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                else:
                    print(f"   ‚Ä¢ –û—à–∏–±–∫–∞: {resp.status}")
                    text = await resp.text()
                    print(f"   ‚Ä¢ –î–µ—Ç–∞–ª–∏: {text}")
    except Exception as e:
        print(f"   ‚Ä¢ –û—à–∏–±–∫–∞: {e}")
    
    print()
    
    # –¢–µ—Å—Ç 3: –° –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–º min_new_tokens
    print("üîÑ –¢–µ—Å—Ç 3: –° min_new_tokens=200")
    payload3 = {
        "prompt": test_prompt,
        "max_new_tokens": 500,
        "min_new_tokens": 200,
        "temperature": 0.7,
        "top_p": 0.9,
        "top_k": 40,
        "repetition_penalty": 1.1,
        "stream": False,
        "seed": random.randint(1, 999999999)
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "http://localhost:5000/v1/completions",
                json=payload3,
                headers={"Content-Type": "application/json"}
            ) as resp:
                if resp.status == 200:
                    data3 = await resp.json()
                    response3 = data3["choices"][0]["text"].strip()
                    print(f"   ‚Ä¢ –û—Ç–≤–µ—Ç: {response3[:100]}...")
                    print(f"   ‚Ä¢ –î–ª–∏–Ω–∞: {len(response3)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"   ‚Ä¢ –¢–æ–∫–µ–Ω—ã: {data3.get('usage', {}).get('total_tokens', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                else:
                    print(f"   ‚Ä¢ –û—à–∏–±–∫–∞: {resp.status}")
                    text = await resp.text()
                    print(f"   ‚Ä¢ –î–µ—Ç–∞–ª–∏: {text}")
    except Exception as e:
        print(f"   ‚Ä¢ –û—à–∏–±–∫–∞: {e}")
    
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
    print("üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("http://localhost:5000/v1/models") as resp:
                if resp.status == 200:
                    models = await resp.json()
                    for model in models.get("data", []):
                        print(f"   ‚Ä¢ –ú–æ–¥–µ–ª—å: {model.get('id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                        print(f"     - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {list(model.keys())}")
                else:
                    print(f"   ‚Ä¢ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {resp.status}")
    except Exception as e:
        print(f"   ‚Ä¢ –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä—è–º–æ–≥–æ API...")
    print("=" * 50)
    
    asyncio.run(test_direct_api())
    
    print("\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
